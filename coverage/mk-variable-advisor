---------------------------- ------ ------ ------ ------ ------ ------ ------
File                           stmt   bran   cond    sub    pod   time  total
---------------------------- ------ ------ ------ ------ ------ ------ ------
...visor/mk-variable-advisor   60.4   39.3   38.0   78.3    n/a  100.0   54.4
Total                          60.4   39.3   38.0   78.3    n/a  100.0   54.4
---------------------------- ------ ------ ------ ------ ------ ------ ------


Run:          -e
Perl version: 118.53.46.49.48.46.48
OS:           linux
Start:        Sat Jul 10 18:15:07 2010
Finish:       Sat Jul 10 18:15:07 2010

Run:          ./101_show_variables_static.t
Perl version: 118.53.46.49.48.46.48
OS:           linux
Start:        Sat Jul 10 18:15:08 2010
Finish:       Sat Jul 10 18:15:09 2010

Run:          ./102_show_variables_online.t
Perl version: 118.53.46.49.48.46.48
OS:           linux
Start:        Sat Jul 10 18:15:12 2010
Finish:       Sat Jul 10 18:15:12 2010

/home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     #!/usr/bin/env perl
2                                                     
3                                                     # This program is copyright 2010-@CURRENTYEAR@ Percona Inc.
4                                                     # Feedback and improvements are welcome.
5                                                     #
6                                                     # THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
7                                                     # WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
8                                                     # MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
9                                                     #
10                                                    # This program is free software; you can redistribute it and/or modify it under
11                                                    # the terms of the GNU General Public License as published by the Free Software
12                                                    # Foundation, version 2; OR the Perl Artistic License.  On UNIX and similar
13                                                    # systems, you can issue `man perlgpl' or `man perlartistic' to read these
14                                                    # licenses.
15                                                    #
16                                                    # You should have received a copy of the GNU General Public License along with
17                                                    # this program; if not, write to the Free Software Foundation, Inc., 59 Temple
18                                                    # Place, Suite 330, Boston, MA  02111-1307  USA.
19                                                    
20             2                    2            17   use strict;
               2                                  5   
               2                                 13   
21             2                    2            12   use warnings FATAL => 'all';
               2                                 21   
               2                                 14   
22                                                    
23                                                    our $VERSION = '@VERSION@';
24                                                    our $DISTRIB = '@DISTRIB@';
25                                                    our $SVN_REV = sprintf("%d", (q$Revision: 6697 $ =~ m/(\d+)/g, 0));
26                                                    
27                                                    # ###########################################################################
28                                                    # OptionParser package 6322
29                                                    # This package is a copy without comments from the original.  The original
30                                                    # with comments and its test file can be found in the SVN repository at,
31                                                    #   trunk/common/OptionParser.pm
32                                                    #   trunk/common/t/OptionParser.t
33                                                    # See http://code.google.com/p/maatkit/wiki/Developers for more information.
34                                                    # ###########################################################################
35                                                    package OptionParser;
36                                                    
37             2                    2            13   use strict;
               2                                  4   
               2                                 10   
38             2                    2            13   use warnings FATAL => 'all';
               2                                  4   
               2                                 13   
39                                                    
40             2                    2            22   use Getopt::Long;
               2                                  6   
               2                                 14   
41             2                    2            15   use List::Util qw(max);
               2                                  4   
               2                                 27   
42             2                    2            14   use English qw(-no_match_vars);
               2                                  4   
               2                                 15   
43                                                    
44    ***      2            50      2            13   use constant MKDEBUG => $ENV{MKDEBUG} || 0;
               2                                  9   
               2                                 36   
45                                                    
46                                                    my $POD_link_re = '[LC]<"?([^">]+)"?>';
47                                                    
48                                                    sub new {
49            10                   10           140      my ( $class, %args ) = @_;
50            10                                 66      foreach my $arg ( qw(description) ) {
51    ***     10     50                          98         die "I need a $arg argument" unless $args{$arg};
52                                                       }
53                                                    
54            10                                140      my ($program_name) = $PROGRAM_NAME =~ m/([.A-Za-z-]+)$/;
55    ***     10            50                   52      $program_name ||= $PROGRAM_NAME;
56    ***     10            33                   87      my $home = $ENV{HOME} || $ENV{HOMEPATH} || $ENV{USERPROFILE} || '.';
      ***                   33                        
      ***                   50                        
57                                                    
58            10                                104      my %attributes = (
59                                                          'type'       => 1,
60                                                          'short form' => 1,
61                                                          'group'      => 1,
62                                                          'default'    => 1,
63                                                          'cumulative' => 1,
64                                                          'negatable'  => 1,
65                                                       );
66                                                    
67            10                                599      my $self = {
68                                                          strict            => 1,
69                                                          prompt            => '<options>',
70                                                          head1             => 'OPTIONS',
71                                                          skip_rules        => 0,
72                                                          item              => '--(.*)',
73                                                          attributes        => \%attributes,
74                                                          parse_attributes  => \&_parse_attribs,
75                                                    
76                                                          %args,
77                                                    
78                                                          program_name      => $program_name,
79                                                          opts              => {},
80                                                          got_opts          => 0,
81                                                          short_opts        => {},
82                                                          defaults          => {},
83                                                          groups            => {},
84                                                          allowed_groups    => {},
85                                                          errors            => [],
86                                                          rules             => [],  # desc of rules for --help
87                                                          mutex             => [],  # rule: opts are mutually exclusive
88                                                          atleast1          => [],  # rule: at least one opt is required
89                                                          disables          => {},  # rule: opt disables other opts 
90                                                          defaults_to       => {},  # rule: opt defaults to value of other opt
91                                                          DSNParser         => undef,
92                                                          default_files     => [
93                                                             "/etc/maatkit/maatkit.conf",
94                                                             "/etc/maatkit/$program_name.conf",
95                                                             "$home/.maatkit.conf",
96                                                             "$home/.$program_name.conf",
97                                                          ],
98                                                          types             => {
99                                                             string => 's', # standard Getopt type
100                                                            int    => 'i', # standard Getopt type
101                                                            float  => 'f', # standard Getopt type
102                                                            Hash   => 'H', # hash, formed from a comma-separated list
103                                                            hash   => 'h', # hash as above, but only if a value is given
104                                                            Array  => 'A', # array, similar to Hash
105                                                            array  => 'a', # array, similar to hash
106                                                            DSN    => 'd', # DSN
107                                                            size   => 'z', # size with kMG suffix (powers of 2^10)
108                                                            time   => 'm', # time, with an optional suffix of s/h/m/d
109                                                         },
110                                                      };
111                                                   
112           10                                108      return bless $self, $class;
113                                                   }
114                                                   
115                                                   sub get_specs {
116            5                    5            22      my ( $self, $file ) = @_;
117   ***      5            50                   36      $file ||= __FILE__;
118            5                                 45      my @specs = $self->_pod_to_specs($file);
119            5                                 83      $self->_parse_specs(@specs);
120                                                   
121   ***      5     50                         151      open my $fh, "<", $file or die "Cannot open $file: $OS_ERROR";
122            5                                 15      my $contents = do { local $/ = undef; <$fh> };
               5                                 29   
               5                               1036   
123            5                                 26      close $file;
124   ***      5     50                         226      if ( $contents =~ m/^=head1 DSN OPTIONS/m ) {
125            5                                 16         MKDEBUG && _d('Parsing DSN OPTIONS');
126            5                                 36         my $dsn_attribs = {
127                                                            dsn  => 1,
128                                                            copy => 1,
129                                                         };
130                                                         my $parse_dsn_attribs = sub {
131           40                   40           165            my ( $self, $option, $attribs ) = @_;
132           80                                248            map {
133           40                                175               my $val = $attribs->{$_};
134   ***     80     50                         350               if ( $val ) {
135   ***     80     50                         357                  $val    = $val eq 'yes' ? 1
                    100                               
136                                                                          : $val eq 'no'  ? 0
137                                                                          :                 $val;
138           80                                478                  $attribs->{$_} = $val;
139                                                               }
140                                                            } keys %$attribs;
141                                                            return {
142           40                                476               key => $option,
143                                                               %$attribs,
144                                                            };
145            5                                 55         };
146            5                                 47         my $dsn_o = new OptionParser(
147                                                            description       => 'DSN OPTIONS',
148                                                            head1             => 'DSN OPTIONS',
149                                                            dsn               => 0,         # XXX don't infinitely recurse!
150                                                            item              => '\* (.)',  # key opts are a single character
151                                                            skip_rules        => 1,         # no rules before opts
152                                                            attributes        => $dsn_attribs,
153                                                            parse_attributes  => $parse_dsn_attribs,
154                                                         );
155           40                                385         my @dsn_opts = map {
156            5                                 28            my $opts = {
157                                                               key  => $_->{spec}->{key},
158                                                               dsn  => $_->{spec}->{dsn},
159                                                               copy => $_->{spec}->{copy},
160                                                               desc => $_->{desc},
161                                                            };
162           40                                127            $opts;
163                                                         } $dsn_o->_pod_to_specs($file);
164            5                                129         $self->{DSNParser} = DSNParser->new(opts => \@dsn_opts);
165                                                      }
166                                                   
167            5                                 14      return;
168                                                   }
169                                                   
170                                                   sub DSNParser {
171            5                    5            23      my ( $self ) = @_;
172            5                                 23      return $self->{DSNParser};
173                                                   };
174                                                   
175                                                   sub get_defaults_files {
176            5                    5            20      my ( $self ) = @_;
177            5                                 15      return @{$self->{default_files}};
               5                                 48   
178                                                   }
179                                                   
180                                                   sub _pod_to_specs {
181           10                   10            53      my ( $self, $file ) = @_;
182   ***     10            50                   43      $file ||= __FILE__;
183   ***     10     50                         245      open my $fh, '<', $file or die "Cannot open $file: $OS_ERROR";
184                                                   
185           10                                 35      my @specs = ();
186           10                                 29      my @rules = ();
187           10                                 26      my $para;
188                                                   
189           10                                117      local $INPUT_RECORD_SEPARATOR = '';
190           10                                159      while ( $para = <$fh> ) {
191         5620    100                       42475         next unless $para =~ m/^=head1 $self->{head1}/;
192           10                                 34         last;
193                                                      }
194                                                   
195           10                                 63      while ( $para = <$fh> ) {
196           15    100                          89         last if $para =~ m/^=over/;
197   ***      5     50                          38         next if $self->{skip_rules};
198   ***      0                                  0         chomp $para;
199   ***      0                                  0         $para =~ s/\s+/ /g;
200   ***      0                                  0         $para =~ s/$POD_link_re/$1/go;
201   ***      0                                  0         MKDEBUG && _d('Option rule:', $para);
202   ***      0                                  0         push @rules, $para;
203                                                      }
204                                                   
205   ***     10     50                          45      die "POD has no $self->{head1} section" unless $para;
206                                                   
207           10                                 30      do {
208          140    100                        1274         if ( my ($option) = $para =~ m/^=item $self->{item}/ ) {
209          130                                346            chomp $para;
210          130                                271            MKDEBUG && _d($para);
211          130                                314            my %attribs;
212                                                   
213          130                                462            $para = <$fh>; # read next paragraph, possibly attributes
214                                                   
215          130    100                         494            if ( $para =~ m/: / ) { # attributes
216          110                                535               $para =~ s/\s+\Z//g;
217          200                                894               %attribs = map {
218          110                                506                     my ( $attrib, $val) = split(/: /, $_);
219   ***    200     50                         955                     die "Unrecognized attribute for --$option: $attrib"
220                                                                        unless $self->{attributes}->{$attrib};
221          200                                981                     ($attrib, $val);
222                                                                  } split(/; /, $para);
223          110    100                         487               if ( $attribs{'short form'} ) {
224           40                                186                  $attribs{'short form'} =~ s/-//;
225                                                               }
226          110                                444               $para = <$fh>; # read next paragraph, probably short help desc
227                                                            }
228                                                            else {
229           20                                 62               MKDEBUG && _d('Option has no attributes');
230                                                            }
231                                                   
232          130                                814            $para =~ s/\s+\Z//g;
233          130                               1488            $para =~ s/\s+/ /g;
234          130                                521            $para =~ s/$POD_link_re/$1/go;
235                                                   
236          130                                472            $para =~ s/\.(?:\n.*| [A-Z].*|\Z)//s;
237          130                                294            MKDEBUG && _d('Short help:', $para);
238                                                   
239   ***    130     50                         497            die "No description after option spec $option" if $para =~ m/^=item/;
240                                                   
241          130    100                         612            if ( my ($base_option) =  $option =~ m/^\[no\](.*)/ ) {
242            5                                 16               $option = $base_option;
243            5                                 16               $attribs{'negatable'} = 1;
244                                                            }
245                                                   
246          130    100                         717            push @specs, {
      ***            50                               
247                                                               spec  => $self->{parse_attributes}->($self, $option, \%attribs), 
248                                                               desc  => $para
249                                                                  . ($attribs{default} ? " (default $attribs{default})" : ''),
250                                                               group => ($attribs{'group'} ? $attribs{'group'} : 'default'),
251                                                            };
252                                                         }
253          140                                920         while ( $para = <$fh> ) {
254   ***    155     50                         536            last unless $para;
255          155    100                         604            if ( $para =~ m/^=head1/ ) {
256           10                                 32               $para = undef; # Can't 'last' out of a do {} block.
257           10                                 48               last;
258                                                            }
259          145    100                         920            last if $para =~ m/^=item /;
260                                                         }
261                                                      } while ( $para );
262                                                   
263   ***     10     50                          41      die "No valid specs in $self->{head1}" unless @specs;
264                                                   
265           10                                109      close $fh;
266           10                                 33      return @specs, @rules;
267                                                   }
268                                                   
269                                                   sub _parse_specs {
270            5                    5            34      my ( $self, @specs ) = @_;
271            5                                 19      my %disables; # special rule that requires deferred checking
272                                                   
273            5                                 25      foreach my $opt ( @specs ) {
274   ***     90     50                         317         if ( ref $opt ) { # It's an option spec, not a rule.
275                                                            MKDEBUG && _d('Parsing opt spec:',
276           90                                192               map { ($_, '=>', $opt->{$_}) } keys %$opt);
277                                                   
278           90                                612            my ( $long, $short ) = $opt->{spec} =~ m/^([\w-]+)(?:\|([^!+=]*))?/;
279   ***     90     50                         357            if ( !$long ) {
280   ***      0                                  0               die "Cannot parse long option from spec $opt->{spec}";
281                                                            }
282           90                                324            $opt->{long} = $long;
283                                                   
284   ***     90     50                         383            die "Duplicate long option --$long" if exists $self->{opts}->{$long};
285           90                                385            $self->{opts}->{$long} = $opt;
286                                                   
287   ***     90     50                         331            if ( length $long == 1 ) {
288   ***      0                                  0               MKDEBUG && _d('Long opt', $long, 'looks like short opt');
289   ***      0                                  0               $self->{short_opts}->{$long} = $long;
290                                                            }
291                                                   
292           90    100                         284            if ( $short ) {
293   ***     40     50                         177               die "Duplicate short option -$short"
294                                                                  if exists $self->{short_opts}->{$short};
295           40                                161               $self->{short_opts}->{$short} = $long;
296           40                                141               $opt->{short} = $short;
297                                                            }
298                                                            else {
299           50                                174               $opt->{short} = undef;
300                                                            }
301                                                   
302           90    100                         969            $opt->{is_negatable}  = $opt->{spec} =~ m/!/        ? 1 : 0;
303           90    100                         430            $opt->{is_cumulative} = $opt->{spec} =~ m/\+/       ? 1 : 0;
304   ***     90     50                         459            $opt->{is_required}   = $opt->{desc} =~ m/required/ ? 1 : 0;
305                                                   
306   ***     90            50                  369            $opt->{group} ||= 'default';
307           90                                438            $self->{groups}->{ $opt->{group} }->{$long} = 1;
308                                                   
309           90                                283            $opt->{value} = undef;
310           90                                284            $opt->{got}   = 0;
311                                                   
312           90                                443            my ( $type ) = $opt->{spec} =~ m/=(.)/;
313           90                                316            $opt->{type} = $type;
314           90                                197            MKDEBUG && _d($long, 'type:', $type);
315                                                   
316                                                   
317           90    100    100                  672            $opt->{spec} =~ s/=./=s/ if ( $type && $type =~ m/[HhAadzm]/ );
318                                                   
319           90    100                         533            if ( (my ($def) = $opt->{desc} =~ m/default\b(?: ([^)]+))?/) ) {
320   ***     15     50                          84               $self->{defaults}->{$long} = defined $def ? $def : 1;
321           15                                 37               MKDEBUG && _d($long, 'default:', $def);
322                                                            }
323                                                   
324           90    100                         340            if ( $long eq 'config' ) {
325            5                                 31               $self->{defaults}->{$long} = join(',', $self->get_defaults_files());
326                                                            }
327                                                   
328   ***     90     50                         451            if ( (my ($dis) = $opt->{desc} =~ m/(disables .*)/) ) {
329   ***      0                                  0               $disables{$long} = $dis;
330   ***      0                                  0               MKDEBUG && _d('Deferring check of disables rule for', $opt, $dis);
331                                                            }
332                                                   
333           90                                421            $self->{opts}->{$long} = $opt;
334                                                         }
335                                                         else { # It's an option rule, not a spec.
336   ***      0                                  0            MKDEBUG && _d('Parsing rule:', $opt); 
337   ***      0                                  0            push @{$self->{rules}}, $opt;
      ***      0                                  0   
338   ***      0                                  0            my @participants = $self->_get_participants($opt);
339   ***      0                                  0            my $rule_ok = 0;
340                                                   
341   ***      0      0                           0            if ( $opt =~ m/mutually exclusive|one and only one/ ) {
342   ***      0                                  0               $rule_ok = 1;
343   ***      0                                  0               push @{$self->{mutex}}, \@participants;
      ***      0                                  0   
344   ***      0                                  0               MKDEBUG && _d(@participants, 'are mutually exclusive');
345                                                            }
346   ***      0      0                           0            if ( $opt =~ m/at least one|one and only one/ ) {
347   ***      0                                  0               $rule_ok = 1;
348   ***      0                                  0               push @{$self->{atleast1}}, \@participants;
      ***      0                                  0   
349   ***      0                                  0               MKDEBUG && _d(@participants, 'require at least one');
350                                                            }
351   ***      0      0                           0            if ( $opt =~ m/default to/ ) {
352   ***      0                                  0               $rule_ok = 1;
353   ***      0                                  0               $self->{defaults_to}->{$participants[0]} = $participants[1];
354   ***      0                                  0               MKDEBUG && _d($participants[0], 'defaults to', $participants[1]);
355                                                            }
356   ***      0      0                           0            if ( $opt =~ m/restricted to option groups/ ) {
357   ***      0                                  0               $rule_ok = 1;
358   ***      0                                  0               my ($groups) = $opt =~ m/groups ([\w\s\,]+)/;
359   ***      0                                  0               my @groups = split(',', $groups);
360   ***      0                                  0               %{$self->{allowed_groups}->{$participants[0]}} = map {
      ***      0                                  0   
361   ***      0                                  0                  s/\s+//;
362   ***      0                                  0                  $_ => 1;
363                                                               } @groups;
364                                                            }
365                                                   
366   ***      0      0                           0            die "Unrecognized option rule: $opt" unless $rule_ok;
367                                                         }
368                                                      }
369                                                   
370            5                                 29      foreach my $long ( keys %disables ) {
371   ***      0                                  0         my @participants = $self->_get_participants($disables{$long});
372   ***      0                                  0         $self->{disables}->{$long} = \@participants;
373   ***      0                                  0         MKDEBUG && _d('Option', $long, 'disables', @participants);
374                                                      }
375                                                   
376            5                                 21      return; 
377                                                   }
378                                                   
379                                                   sub _get_participants {
380   ***      0                    0             0      my ( $self, $str ) = @_;
381   ***      0                                  0      my @participants;
382   ***      0                                  0      foreach my $long ( $str =~ m/--(?:\[no\])?([\w-]+)/g ) {
383   ***      0      0                           0         die "Option --$long does not exist while processing rule $str"
384                                                            unless exists $self->{opts}->{$long};
385   ***      0                                  0         push @participants, $long;
386                                                      }
387   ***      0                                  0      MKDEBUG && _d('Participants for', $str, ':', @participants);
388   ***      0                                  0      return @participants;
389                                                   }
390                                                   
391                                                   sub opts {
392   ***      0                    0             0      my ( $self ) = @_;
393   ***      0                                  0      my %opts = %{$self->{opts}};
      ***      0                                  0   
394   ***      0                                  0      return %opts;
395                                                   }
396                                                   
397                                                   sub short_opts {
398   ***      0                    0             0      my ( $self ) = @_;
399   ***      0                                  0      my %short_opts = %{$self->{short_opts}};
      ***      0                                  0   
400   ***      0                                  0      return %short_opts;
401                                                   }
402                                                   
403                                                   sub set_defaults {
404   ***      0                    0             0      my ( $self, %defaults ) = @_;
405   ***      0                                  0      $self->{defaults} = {};
406   ***      0                                  0      foreach my $long ( keys %defaults ) {
407   ***      0      0                           0         die "Cannot set default for nonexistent option $long"
408                                                            unless exists $self->{opts}->{$long};
409   ***      0                                  0         $self->{defaults}->{$long} = $defaults{$long};
410   ***      0                                  0         MKDEBUG && _d('Default val for', $long, ':', $defaults{$long});
411                                                      }
412   ***      0                                  0      return;
413                                                   }
414                                                   
415                                                   sub get_defaults {
416   ***      0                    0             0      my ( $self ) = @_;
417   ***      0                                  0      return $self->{defaults};
418                                                   }
419                                                   
420                                                   sub get_groups {
421   ***      0                    0             0      my ( $self ) = @_;
422   ***      0                                  0      return $self->{groups};
423                                                   }
424                                                   
425                                                   sub _set_option {
426            8                    8            36      my ( $self, $opt, $val ) = @_;
427   ***      8      0                          18      my $long = exists $self->{opts}->{$opt}       ? $opt
      ***            50                               
428                                                               : exists $self->{short_opts}->{$opt} ? $self->{short_opts}->{$opt}
429                                                               : die "Getopt::Long gave a nonexistent option: $opt";
430                                                   
431            8                                 16      $opt = $self->{opts}->{$long};
432            8    100                          45      if ( $opt->{is_cumulative} ) {
433            3                                 13         $opt->{value}++;
434                                                      }
435                                                      else {
436            5                                 21         $opt->{value} = $val;
437                                                      }
438            8                                 24      $opt->{got} = 1;
439            8                                 30      MKDEBUG && _d('Got option', $long, '=', $val);
440                                                   }
441                                                   
442                                                   sub get_opts {
443            5                    5            20      my ( $self ) = @_; 
444                                                   
445            5                                 15      foreach my $long ( keys %{$self->{opts}} ) {
               5                                 56   
446           90                                354         $self->{opts}->{$long}->{got} = 0;
447   ***     90     50                         693         $self->{opts}->{$long}->{value}
                    100                               
448                                                            = exists $self->{defaults}->{$long}       ? $self->{defaults}->{$long}
449                                                            : $self->{opts}->{$long}->{is_cumulative} ? 0
450                                                            : undef;
451                                                      }
452            5                                 25      $self->{got_opts} = 0;
453                                                   
454            5                                 20      $self->{errors} = [];
455                                                   
456   ***      5     50     33                   63      if ( @ARGV && $ARGV[0] eq "--config" ) {
457   ***      0                                  0         shift @ARGV;
458   ***      0                                  0         $self->_set_option('config', shift @ARGV);
459                                                      }
460   ***      5     50                          42      if ( $self->has('config') ) {
461            5                                 22         my @extra_args;
462            5                                 33         foreach my $filename ( split(',', $self->get('config')) ) {
463           20                                 48            eval {
464           20                                 90               push @extra_args, $self->_read_config_file($filename);
465                                                            };
466   ***     20     50                          98            if ( $EVAL_ERROR ) {
467   ***     20     50                          82               if ( $self->got('config') ) {
468   ***      0                                  0                  die $EVAL_ERROR;
469                                                               }
470                                                               elsif ( MKDEBUG ) {
471                                                                  _d($EVAL_ERROR);
472                                                               }
473                                                            }
474                                                         }
475            5                                 25         unshift @ARGV, @extra_args;
476                                                      }
477                                                   
478            5                                 49      Getopt::Long::Configure('no_ignore_case', 'bundling');
479                                                      GetOptions(
480           85                    8           570         map    { $_->{spec} => sub { $self->_set_option(@_); } }
               8                                 46   
              90                                339   
481            5                                 31         grep   { $_->{long} ne 'config' } # --config is handled specially above.
482   ***      5     50                          17         values %{$self->{opts}}
483                                                      ) or $self->save_error('Error parsing options');
484                                                   
485   ***      5     50     33                  182      if ( exists $self->{opts}->{version} && $self->{opts}->{version}->{got} ) {
486   ***      0      0                           0         printf("%s  Ver %s Distrib %s Changeset %s\n",
487                                                            $self->{program_name}, $main::VERSION, $main::DISTRIB, $main::SVN_REV)
488                                                               or die "Cannot print: $OS_ERROR";
489   ***      0                                  0         exit 0;
490                                                      }
491                                                   
492   ***      5     50     66                   38      if ( @ARGV && $self->{strict} ) {
493   ***      0                                  0         $self->save_error("Unrecognized command-line options @ARGV");
494                                                      }
495                                                   
496            5                                 15      foreach my $mutex ( @{$self->{mutex}} ) {
               5                                 29   
497   ***      0                                  0         my @set = grep { $self->{opts}->{$_}->{got} } @$mutex;
      ***      0                                  0   
498   ***      0      0                           0         if ( @set > 1 ) {
499   ***      0                                  0            my $err = join(', ', map { "--$self->{opts}->{$_}->{long}" }
      ***      0                                  0   
500   ***      0                                  0                         @{$mutex}[ 0 .. scalar(@$mutex) - 2] )
501                                                                    . ' and --'.$self->{opts}->{$mutex->[-1]}->{long}
502                                                                    . ' are mutually exclusive.';
503   ***      0                                  0            $self->save_error($err);
504                                                         }
505                                                      }
506                                                   
507            5                                 15      foreach my $required ( @{$self->{atleast1}} ) {
               5                                 26   
508   ***      0                                  0         my @set = grep { $self->{opts}->{$_}->{got} } @$required;
      ***      0                                  0   
509   ***      0      0                           0         if ( @set == 0 ) {
510   ***      0                                  0            my $err = join(', ', map { "--$self->{opts}->{$_}->{long}" }
      ***      0                                  0   
511   ***      0                                  0                         @{$required}[ 0 .. scalar(@$required) - 2] )
512                                                                    .' or --'.$self->{opts}->{$required->[-1]}->{long};
513   ***      0                                  0            $self->save_error("Specify at least one of $err");
514                                                         }
515                                                      }
516                                                   
517            5                                 17      $self->_check_opts( keys %{$self->{opts}} );
               5                                 56   
518            5                                 24      $self->{got_opts} = 1;
519            5                                 16      return;
520                                                   }
521                                                   
522                                                   sub _check_opts {
523            5                    5            45      my ( $self, @long ) = @_;
524            5                                 21      my $long_last = scalar @long;
525            5                                 24      while ( @long ) {
526            5                                 37         foreach my $i ( 0..$#long ) {
527           90                                275            my $long = $long[$i];
528   ***     90     50                         305            next unless $long;
529           90                                314            my $opt  = $self->{opts}->{$long};
530           90    100                         477            if ( $opt->{got} ) {
      ***            50                               
531   ***      7     50                          35               if ( exists $self->{disables}->{$long} ) {
532   ***      0                                  0                  my @disable_opts = @{$self->{disables}->{$long}};
      ***      0                                  0   
533   ***      0                                  0                  map { $self->{opts}->{$_}->{value} = undef; } @disable_opts;
      ***      0                                  0   
534   ***      0                                  0                  MKDEBUG && _d('Unset options', @disable_opts,
535                                                                     'because', $long,'disables them');
536                                                               }
537                                                   
538   ***      7     50                          35               if ( exists $self->{allowed_groups}->{$long} ) {
539                                                   
540   ***      0                                  0                  my @restricted_groups = grep {
541   ***      0                                  0                     !exists $self->{allowed_groups}->{$long}->{$_}
542   ***      0                                  0                  } keys %{$self->{groups}};
543                                                   
544   ***      0                                  0                  my @restricted_opts;
545   ***      0                                  0                  foreach my $restricted_group ( @restricted_groups ) {
546   ***      0                                  0                     RESTRICTED_OPT:
547   ***      0                                  0                     foreach my $restricted_opt (
548                                                                        keys %{$self->{groups}->{$restricted_group}} )
549                                                                     {
550   ***      0      0                           0                        next RESTRICTED_OPT if $restricted_opt eq $long;
551   ***      0      0                           0                        push @restricted_opts, $restricted_opt
552                                                                           if $self->{opts}->{$restricted_opt}->{got};
553                                                                     }
554                                                                  }
555                                                   
556   ***      0      0                           0                  if ( @restricted_opts ) {
557   ***      0                                  0                     my $err;
558   ***      0      0                           0                     if ( @restricted_opts == 1 ) {
559   ***      0                                  0                        $err = "--$restricted_opts[0]";
560                                                                     }
561                                                                     else {
562   ***      0                                  0                        $err = join(', ',
563   ***      0                                  0                                  map { "--$self->{opts}->{$_}->{long}" }
564   ***      0                                  0                                  grep { $_ } 
565                                                                                  @restricted_opts[0..scalar(@restricted_opts) - 2]
566                                                                               )
567                                                                             . ' or --'.$self->{opts}->{$restricted_opts[-1]}->{long};
568                                                                     }
569   ***      0                                  0                     $self->save_error("--$long is not allowed with $err");
570                                                                  }
571                                                               }
572                                                   
573                                                            }
574                                                            elsif ( $opt->{is_required} ) { 
575   ***      0                                  0               $self->save_error("Required option --$long must be specified");
576                                                            }
577                                                   
578           90                                329            $self->_validate_type($opt);
579   ***     90     50                         327            if ( $opt->{parsed} ) {
580           90                                310               delete $long[$i];
581                                                            }
582                                                            else {
583   ***      0                                  0               MKDEBUG && _d('Temporarily failed to parse', $long);
584                                                            }
585                                                         }
586                                                   
587   ***      5     50                          24         die "Failed to parse options, possibly due to circular dependencies"
588                                                            if @long == $long_last;
589            5                                 23         $long_last = @long;
590                                                      }
591                                                   
592            5                                 19      return;
593                                                   }
594                                                   
595                                                   sub _validate_type {
596           90                   90           298      my ( $self, $opt ) = @_;
597   ***     90     50                         336      return unless $opt;
598                                                   
599           90    100                         366      if ( !$opt->{type} ) {
600           30                                 98         $opt->{parsed} = 1;
601           30                                 82         return;
602                                                      }
603                                                   
604           60                                183      my $val = $opt->{value};
605                                                   
606   ***     60     50     66                 1414      if ( $val && $opt->{type} eq 'm' ) {  # type time
      ***            50     66                        
      ***            50     66                        
                    100    100                        
      ***           100     66                        
      ***                   66                        
      ***                   66                        
607   ***      0                                  0         MKDEBUG && _d('Parsing option', $opt->{long}, 'as a time value');
608   ***      0                                  0         my ( $prefix, $num, $suffix ) = $val =~ m/([+-]?)(\d+)([a-z])?$/;
609   ***      0      0                           0         if ( !$suffix ) {
610   ***      0                                  0            my ( $s ) = $opt->{desc} =~ m/\(suffix (.)\)/;
611   ***      0             0                    0            $suffix = $s || 's';
612   ***      0                                  0            MKDEBUG && _d('No suffix given; using', $suffix, 'for',
613                                                               $opt->{long}, '(value:', $val, ')');
614                                                         }
615   ***      0      0                           0         if ( $suffix =~ m/[smhd]/ ) {
616   ***      0      0                           0            $val = $suffix eq 's' ? $num            # Seconds
      ***             0                               
      ***             0                               
617                                                                 : $suffix eq 'm' ? $num * 60       # Minutes
618                                                                 : $suffix eq 'h' ? $num * 3600     # Hours
619                                                                 :                  $num * 86400;   # Days
620   ***      0             0                    0            $opt->{value} = ($prefix || '') . $val;
621   ***      0                                  0            MKDEBUG && _d('Setting option', $opt->{long}, 'to', $val);
622                                                         }
623                                                         else {
624   ***      0                                  0            $self->save_error("Invalid time suffix for --$opt->{long}");
625                                                         }
626                                                      }
627                                                      elsif ( $val && $opt->{type} eq 'd' ) {  # type DSN
628   ***      0                                  0         MKDEBUG && _d('Parsing option', $opt->{long}, 'as a DSN');
629   ***      0                                  0         my $prev = {};
630   ***      0                                  0         my $from_key = $self->{defaults_to}->{ $opt->{long} };
631   ***      0      0                           0         if ( $from_key ) {
632   ***      0                                  0            MKDEBUG && _d($opt->{long}, 'DSN copies from', $from_key, 'DSN');
633   ***      0      0                           0            if ( $self->{opts}->{$from_key}->{parsed} ) {
634   ***      0                                  0               $prev = $self->{opts}->{$from_key}->{value};
635                                                            }
636                                                            else {
637   ***      0                                  0               MKDEBUG && _d('Cannot parse', $opt->{long}, 'until',
638                                                                  $from_key, 'parsed');
639   ***      0                                  0               return;
640                                                            }
641                                                         }
642   ***      0                                  0         my $defaults = $self->{DSNParser}->parse_options($self);
643   ***      0                                  0         $opt->{value} = $self->{DSNParser}->parse($val, $prev, $defaults);
644                                                      }
645                                                      elsif ( $val && $opt->{type} eq 'z' ) {  # type size
646   ***      0                                  0         MKDEBUG && _d('Parsing option', $opt->{long}, 'as a size value');
647   ***      0                                  0         $self->_parse_size($opt, $val);
648                                                      }
649                                                      elsif ( $opt->{type} eq 'H' || (defined $val && $opt->{type} eq 'h') ) {
650   ***      1            50                   20         $opt->{value} = { map { $_ => 1 } split(/(?<!\\),\s*/, ($val || '')) };
               2                                 15   
651                                                      }
652                                                      elsif ( $opt->{type} eq 'A' || (defined $val && $opt->{type} eq 'a') ) {
653   ***      5            50                   68         $opt->{value} = [ split(/(?<!\\),\s*/, ($val || '')) ];
654                                                      }
655                                                      else {
656           54                                138         MKDEBUG && _d('Nothing to validate for option',
657                                                            $opt->{long}, 'type', $opt->{type}, 'value', $val);
658                                                      }
659                                                   
660           60                                195      $opt->{parsed} = 1;
661           60                                156      return;
662                                                   }
663                                                   
664                                                   sub get {
665           50                   50           204      my ( $self, $opt ) = @_;
666           50    100                         229      my $long = (length $opt == 1 ? $self->{short_opts}->{$opt} : $opt);
667   ***     50     50     33                  473      die "Option $opt does not exist"
668                                                         unless $long && exists $self->{opts}->{$long};
669           50                                433      return $self->{opts}->{$long}->{value};
670                                                   }
671                                                   
672                                                   sub got {
673           20                   20            83      my ( $self, $opt ) = @_;
674   ***     20     50                          86      my $long = (length $opt == 1 ? $self->{short_opts}->{$opt} : $opt);
675   ***     20     50     33                  214      die "Option $opt does not exist"
676                                                         unless $long && exists $self->{opts}->{$long};
677           20                                126      return $self->{opts}->{$long}->{got};
678                                                   }
679                                                   
680                                                   sub has {
681           13                   13            57      my ( $self, $opt ) = @_;
682           13    100                          70      my $long = (length $opt == 1 ? $self->{short_opts}->{$opt} : $opt);
683           13    100                         107      return defined $long ? exists $self->{opts}->{$long} : 0;
684                                                   }
685                                                   
686                                                   sub set {
687   ***      0                    0             0      my ( $self, $opt, $val ) = @_;
688   ***      0      0                           0      my $long = (length $opt == 1 ? $self->{short_opts}->{$opt} : $opt);
689   ***      0      0      0                    0      die "Option $opt does not exist"
690                                                         unless $long && exists $self->{opts}->{$long};
691   ***      0                                  0      $self->{opts}->{$long}->{value} = $val;
692   ***      0                                  0      return;
693                                                   }
694                                                   
695                                                   sub save_error {
696   ***      0                    0             0      my ( $self, $error ) = @_;
697   ***      0                                  0      push @{$self->{errors}}, $error;
      ***      0                                  0   
698                                                   }
699                                                   
700                                                   sub errors {
701   ***      0                    0             0      my ( $self ) = @_;
702   ***      0                                  0      return $self->{errors};
703                                                   }
704                                                   
705                                                   sub prompt {
706   ***      0                    0             0      my ( $self ) = @_;
707   ***      0                                  0      return "Usage: $PROGRAM_NAME $self->{prompt}\n";
708                                                   }
709                                                   
710                                                   sub descr {
711   ***      0                    0             0      my ( $self ) = @_;
712   ***      0             0                    0      my $descr  = $self->{program_name} . ' ' . ($self->{description} || '')
713                                                                 . "  For more details, please use the --help option, "
714                                                                 . "or try 'perldoc $PROGRAM_NAME' "
715                                                                 . "for complete documentation.";
716   ***      0      0                           0      $descr = join("\n", $descr =~ m/(.{0,80})(?:\s+|$)/g)
717                                                         unless $ENV{DONT_BREAK_LINES};
718   ***      0                                  0      $descr =~ s/ +$//mg;
719   ***      0                                  0      return $descr;
720                                                   }
721                                                   
722                                                   sub usage_or_errors {
723            5                    5            22      my ( $self ) = @_;
724   ***      5     50                          35      if ( $self->{opts}->{help}->{got} ) {
      ***      5     50                          28   
725   ***      0      0                           0         print $self->print_usage() or die "Cannot print usage: $OS_ERROR";
726   ***      0                                  0         exit 0;
727                                                      }
728                                                      elsif ( scalar @{$self->{errors}} ) {
729   ***      0      0                           0         print $self->print_errors() or die "Cannot print errors: $OS_ERROR";
730   ***      0                                  0         exit 0;
731                                                      }
732            5                                 17      return;
733                                                   }
734                                                   
735                                                   sub print_errors {
736   ***      0                    0             0      my ( $self ) = @_;
737   ***      0                                  0      my $usage = $self->prompt() . "\n";
738   ***      0      0                           0      if ( (my @errors = @{$self->{errors}}) ) {
      ***      0                                  0   
739   ***      0                                  0         $usage .= join("\n  * ", 'Errors in command-line arguments:', @errors)
740                                                                 . "\n";
741                                                      }
742   ***      0                                  0      return $usage . "\n" . $self->descr();
743                                                   }
744                                                   
745                                                   sub print_usage {
746   ***      0                    0             0      my ( $self ) = @_;
747   ***      0      0                           0      die "Run get_opts() before print_usage()" unless $self->{got_opts};
748   ***      0                                  0      my @opts = values %{$self->{opts}};
      ***      0                                  0   
749                                                   
750   ***      0      0                           0      my $maxl = max(
751   ***      0                                  0         map { length($_->{long}) + ($_->{is_negatable} ? 4 : 0) }
752                                                         @opts);
753                                                   
754   ***      0      0                           0      my $maxs = max(0,
755   ***      0                                  0         map { length($_) + ($self->{opts}->{$_}->{is_negatable} ? 4 : 0) }
756   ***      0                                  0         values %{$self->{short_opts}});
757                                                   
758   ***      0                                  0      my $lcol = max($maxl, ($maxs + 3));
759   ***      0                                  0      my $rcol = 80 - $lcol - 6;
760   ***      0                                  0      my $rpad = ' ' x ( 80 - $rcol );
761                                                   
762   ***      0                                  0      $maxs = max($lcol - 3, $maxs);
763                                                   
764   ***      0                                  0      my $usage = $self->descr() . "\n" . $self->prompt();
765                                                   
766   ***      0                                  0      my @groups = reverse sort grep { $_ ne 'default'; } keys %{$self->{groups}};
      ***      0                                  0   
      ***      0                                  0   
767   ***      0                                  0      push @groups, 'default';
768                                                   
769   ***      0                                  0      foreach my $group ( reverse @groups ) {
770   ***      0      0                           0         $usage .= "\n".($group eq 'default' ? 'Options' : $group).":\n\n";
771   ***      0                                  0         foreach my $opt (
      ***      0                                  0   
772   ***      0                                  0            sort { $a->{long} cmp $b->{long} }
773                                                            grep { $_->{group} eq $group }
774                                                            @opts )
775                                                         {
776   ***      0      0                           0            my $long  = $opt->{is_negatable} ? "[no]$opt->{long}" : $opt->{long};
777   ***      0                                  0            my $short = $opt->{short};
778   ***      0                                  0            my $desc  = $opt->{desc};
779   ***      0      0      0                    0            if ( $opt->{type} && $opt->{type} eq 'm' ) {
780   ***      0                                  0               my ($s) = $desc =~ m/\(suffix (.)\)/;
781   ***      0             0                    0               $s    ||= 's';
782   ***      0                                  0               $desc =~ s/\s+\(suffix .\)//;
783   ***      0                                  0               $desc .= ".  Optional suffix s=seconds, m=minutes, h=hours, "
784                                                                      . "d=days; if no suffix, $s is used.";
785                                                            }
786   ***      0                                  0            $desc = join("\n$rpad", grep { $_ } $desc =~ m/(.{0,$rcol})(?:\s+|$)/g);
      ***      0                                  0   
787   ***      0                                  0            $desc =~ s/ +$//mg;
788   ***      0      0                           0            if ( $short ) {
789   ***      0                                  0               $usage .= sprintf("  --%-${maxs}s -%s  %s\n", $long, $short, $desc);
790                                                            }
791                                                            else {
792   ***      0                                  0               $usage .= sprintf("  --%-${lcol}s  %s\n", $long, $desc);
793                                                            }
794                                                         }
795                                                      }
796                                                   
797   ***      0      0                           0      if ( (my @rules = @{$self->{rules}}) ) {
      ***      0                                  0   
798   ***      0                                  0         $usage .= "\nRules:\n\n";
799   ***      0                                  0         $usage .= join("\n", map { "  $_" } @rules) . "\n";
      ***      0                                  0   
800                                                      }
801   ***      0      0                           0      if ( $self->{DSNParser} ) {
802   ***      0                                  0         $usage .= "\n" . $self->{DSNParser}->usage();
803                                                      }
804   ***      0                                  0      $usage .= "\nOptions and values after processing arguments:\n\n";
805   ***      0                                  0      foreach my $opt ( sort { $a->{long} cmp $b->{long} } @opts ) {
      ***      0                                  0   
806   ***      0                                  0         my $val   = $opt->{value};
807   ***      0             0                    0         my $type  = $opt->{type} || '';
808   ***      0                                  0         my $bool  = $opt->{spec} =~ m/^[\w-]+(?:\|[\w-])?!?$/;
809   ***      0      0                           0         $val      = $bool              ? ( $val ? 'TRUE' : 'FALSE' )
      ***             0                               
      ***             0                               
      ***             0                               
      ***             0                               
      ***             0                               
810                                                                   : !defined $val      ? '(No value)'
811                                                                   : $type eq 'd'       ? $self->{DSNParser}->as_string($val)
812                                                                   : $type =~ m/H|h/    ? join(',', sort keys %$val)
813                                                                   : $type =~ m/A|a/    ? join(',', @$val)
814                                                                   :                    $val;
815   ***      0                                  0         $usage .= sprintf("  --%-${lcol}s  %s\n", $opt->{long}, $val);
816                                                      }
817   ***      0                                  0      return $usage;
818                                                   }
819                                                   
820                                                   sub prompt_noecho {
821   ***      0      0             0             0      shift @_ if ref $_[0] eq __PACKAGE__;
822   ***      0                                  0      my ( $prompt ) = @_;
823   ***      0                                  0      local $OUTPUT_AUTOFLUSH = 1;
824   ***      0      0                           0      print $prompt
825                                                         or die "Cannot print: $OS_ERROR";
826   ***      0                                  0      my $response;
827   ***      0                                  0      eval {
828   ***      0                                  0         require Term::ReadKey;
829   ***      0                                  0         Term::ReadKey::ReadMode('noecho');
830   ***      0                                  0         chomp($response = <STDIN>);
831   ***      0                                  0         Term::ReadKey::ReadMode('normal');
832   ***      0      0                           0         print "\n"
833                                                            or die "Cannot print: $OS_ERROR";
834                                                      };
835   ***      0      0                           0      if ( $EVAL_ERROR ) {
836   ***      0                                  0         die "Cannot read response; is Term::ReadKey installed? $EVAL_ERROR";
837                                                      }
838   ***      0                                  0      return $response;
839                                                   }
840                                                   
841                                                   if ( MKDEBUG ) {
842                                                      print '# ', $^X, ' ', $], "\n";
843                                                      my $uname = `uname -a`;
844                                                      if ( $uname ) {
845                                                         $uname =~ s/\s+/ /g;
846                                                         print "# $uname\n";
847                                                      }
848                                                      printf("# %s  Ver %s Distrib %s Changeset %s line %d\n",
849                                                         $PROGRAM_NAME, ($main::VERSION || ''), ($main::DISTRIB || ''),
850                                                         ($main::SVN_REV || ''), __LINE__);
851                                                      print('# Arguments: ',
852                                                         join(' ', map { my $a = "_[$_]_"; $a =~ s/\n/\n# /g; $a; } @ARGV), "\n");
853                                                   }
854                                                   
855                                                   sub _read_config_file {
856           20                   20            86      my ( $self, $filename ) = @_;
857   ***     20     50                          46      open my $fh, "<", $filename or die "Cannot open $filename: $OS_ERROR\n";
858   ***      0                                  0      my @args;
859   ***      0                                  0      my $prefix = '--';
860   ***      0                                  0      my $parse  = 1;
861                                                   
862                                                      LINE:
863   ***      0                                  0      while ( my $line = <$fh> ) {
864   ***      0                                  0         chomp $line;
865   ***      0      0                           0         next LINE if $line =~ m/^\s*(?:\#|\;|$)/;
866   ***      0                                  0         $line =~ s/\s+#.*$//g;
867   ***      0                                  0         $line =~ s/^\s+|\s+$//g;
868   ***      0      0                           0         if ( $line eq '--' ) {
869   ***      0                                  0            $prefix = '';
870   ***      0                                  0            $parse  = 0;
871   ***      0                                  0            next LINE;
872                                                         }
873   ***      0      0      0                    0         if ( $parse
      ***             0                               
874                                                            && (my($opt, $arg) = $line =~ m/^\s*([^=\s]+?)(?:\s*=\s*(.*?)\s*)?$/)
875                                                         ) {
876   ***      0                                  0            push @args, grep { defined $_ } ("$prefix$opt", $arg);
      ***      0                                  0   
877                                                         }
878                                                         elsif ( $line =~ m/./ ) {
879   ***      0                                  0            push @args, $line;
880                                                         }
881                                                         else {
882   ***      0                                  0            die "Syntax error in file $filename at line $INPUT_LINE_NUMBER";
883                                                         }
884                                                      }
885   ***      0                                  0      close $fh;
886   ***      0                                  0      return @args;
887                                                   }
888                                                   
889                                                   sub read_para_after {
890   ***      0                    0             0      my ( $self, $file, $regex ) = @_;
891   ***      0      0                           0      open my $fh, "<", $file or die "Can't open $file: $OS_ERROR";
892   ***      0                                  0      local $INPUT_RECORD_SEPARATOR = '';
893   ***      0                                  0      my $para;
894   ***      0                                  0      while ( $para = <$fh> ) {
895   ***      0      0                           0         next unless $para =~ m/^=pod$/m;
896   ***      0                                  0         last;
897                                                      }
898   ***      0                                  0      while ( $para = <$fh> ) {
899   ***      0      0                           0         next unless $para =~ m/$regex/;
900   ***      0                                  0         last;
901                                                      }
902   ***      0                                  0      $para = <$fh>;
903   ***      0                                  0      chomp($para);
904   ***      0      0                           0      close $fh or die "Can't close $file: $OS_ERROR";
905   ***      0                                  0      return $para;
906                                                   }
907                                                   
908                                                   sub clone {
909   ***      0                    0             0      my ( $self ) = @_;
910                                                   
911   ***      0                                  0      my %clone = map {
912   ***      0                                  0         my $hashref  = $self->{$_};
913   ***      0                                  0         my $val_copy = {};
914   ***      0                                  0         foreach my $key ( keys %$hashref ) {
915   ***      0                                  0            my $ref = ref $hashref->{$key};
916   ***      0                                  0            $val_copy->{$key} = !$ref           ? $hashref->{$key}
917   ***      0                                  0                              : $ref eq 'HASH'  ? { %{$hashref->{$key}} }
918   ***      0      0                           0                              : $ref eq 'ARRAY' ? [ @{$hashref->{$key}} ]
      ***             0                               
      ***             0                               
919                                                                              : $hashref->{$key};
920                                                         }
921   ***      0                                  0         $_ => $val_copy;
922                                                      } qw(opts short_opts defaults);
923                                                   
924   ***      0                                  0      foreach my $scalar ( qw(got_opts) ) {
925   ***      0                                  0         $clone{$scalar} = $self->{$scalar};
926                                                      }
927                                                   
928   ***      0                                  0      return bless \%clone;     
929                                                   }
930                                                   
931                                                   sub _parse_size {
932   ***      0                    0             0      my ( $self, $opt, $val ) = @_;
933                                                   
934   ***      0      0      0                    0      if ( lc($val || '') eq 'null' ) {
935   ***      0                                  0         MKDEBUG && _d('NULL size for', $opt->{long});
936   ***      0                                  0         $opt->{value} = 'null';
937   ***      0                                  0         return;
938                                                      }
939                                                   
940   ***      0                                  0      my %factor_for = (k => 1_024, M => 1_048_576, G => 1_073_741_824);
941   ***      0                                  0      my ($pre, $num, $factor) = $val =~ m/^([+-])?(\d+)([kMG])?$/;
942   ***      0      0                           0      if ( defined $num ) {
943   ***      0      0                           0         if ( $factor ) {
944   ***      0                                  0            $num *= $factor_for{$factor};
945   ***      0                                  0            MKDEBUG && _d('Setting option', $opt->{y},
946                                                               'to num', $num, '* factor', $factor);
947                                                         }
948   ***      0             0                    0         $opt->{value} = ($pre || '') . $num;
949                                                      }
950                                                      else {
951   ***      0                                  0         $self->save_error("Invalid size for --$opt->{long}");
952                                                      }
953   ***      0                                  0      return;
954                                                   }
955                                                   
956                                                   sub _parse_attribs {
957           90                   90           371      my ( $self, $option, $attribs ) = @_;
958           90                                395      my $types = $self->{types};
959           90    100                        1493      return $option
                    100                               
                    100                               
                    100                               
960                                                         . ($attribs->{'short form'} ? '|' . $attribs->{'short form'}   : '' )
961                                                         . ($attribs->{'negatable'}  ? '!'                              : '' )
962                                                         . ($attribs->{'cumulative'} ? '+'                              : '' )
963                                                         . ($attribs->{'type'}       ? '=' . $types->{$attribs->{type}} : '' );
964                                                   }
965                                                   
966                                                   sub _d {
967   ***      0                    0             0      my ($package, undef, $line) = caller 0;
968   ***      0      0                           0      @_ = map { (my $temp = $_) =~ s/\n/\n# /g; $temp; }
      ***      0                                  0   
      ***      0                                  0   
969   ***      0                                  0           map { defined $_ ? $_ : 'undef' }
970                                                           @_;
971   ***      0                                  0      print STDERR "# $package:$line $PID ", join(' ', @_), "\n";
972                                                   }
973                                                   
974                                                   1;
975                                                   
976                                                   # ###########################################################################
977                                                   # End OptionParser package
978                                                   # ###########################################################################
979                                                   
980                                                   # ###########################################################################
981                                                   # DSNParser package 6366
982                                                   # This package is a copy without comments from the original.  The original
983                                                   # with comments and its test file can be found in the SVN repository at,
984                                                   #   trunk/common/DSNParser.pm
985                                                   #   trunk/common/t/DSNParser.t
986                                                   # See http://code.google.com/p/maatkit/wiki/Developers for more information.
987                                                   # ###########################################################################
988                                                   package DSNParser;
989                                                   
990            2                    2            20   use strict;
               2                                  5   
               2                                 14   
991            2                    2           261   use warnings FATAL => 'all';
               2                                  6   
               2                                 17   
992            2                    2            16   use English qw(-no_match_vars);
               2                                  5   
               2                                 12   
993            2                    2            13   use Data::Dumper;
               2                                  4   
               2                                 16   
994                                                   $Data::Dumper::Indent    = 0;
995                                                   $Data::Dumper::Quotekeys = 0;
996                                                   
997                                                   eval {
998                                                      require DBI;
999                                                   };
1000                                                  my $have_dbi = $EVAL_ERROR ? 0 : 1;
1001                                                  
1002  ***      2            50      2            12   use constant MKDEBUG => $ENV{MKDEBUG} || 0;
               2                                  5   
               2                                 42   
1003                                                  
1004                                                  sub new {
1005           6                    6            50      my ( $class, %args ) = @_;
1006           6                                 34      foreach my $arg ( qw(opts) ) {
1007  ***      6     50                          41         die "I need a $arg argument" unless $args{$arg};
1008                                                     }
1009           6                                 26      my $self = {
1010                                                        opts => {}  # h, P, u, etc.  Should come from DSN OPTIONS section in POD.
1011                                                     };
1012           6                                 19      foreach my $opt ( @{$args{opts}} ) {
               6                                 30   
1013  ***     49     50     33                  407         if ( !$opt->{key} || !$opt->{desc} ) {
1014  ***      0                                  0            die "Invalid DSN option: ", Dumper($opt);
1015                                                        }
1016                                                        MKDEBUG && _d('DSN option:',
1017                                                           join(', ',
1018          49                                107               map { "$_=" . (defined $opt->{$_} ? ($opt->{$_} || '') : 'undef') }
1019                                                                 keys %$opt
1020                                                           )
1021                                                        );
1022  ***     49            50                  444         $self->{opts}->{$opt->{key}} = {
1023                                                           dsn  => $opt->{dsn},
1024                                                           desc => $opt->{desc},
1025                                                           copy => $opt->{copy} || 0,
1026                                                        };
1027                                                     }
1028           6                                126      return bless $self, $class;
1029                                                  }
1030                                                  
1031                                                  sub prop {
1032          12                   12            57      my ( $self, $prop, $value ) = @_;
1033          12    100                          62      if ( @_ > 2 ) {
1034           5                                 12         MKDEBUG && _d('Setting', $prop, 'property');
1035           5                                 27         $self->{$prop} = $value;
1036                                                     }
1037          12                                 78      return $self->{$prop};
1038                                                  }
1039                                                  
1040                                                  sub parse {
1041           3                    3           138      my ( $self, $dsn, $prev, $defaults ) = @_;
1042           3    100                          13      if ( !$dsn ) {
1043           1                                  2         MKDEBUG && _d('No DSN to parse');
1044           1                                  4         return;
1045                                                     }
1046           2                                  5      MKDEBUG && _d('Parsing', $dsn);
1047  ***      2            50                   10      $prev     ||= {};
1048  ***      2            50                    8      $defaults ||= {};
1049           2                                  6      my %given_props;
1050           2                                  6      my %final_props;
1051           2                                  7      my $opts = $self->{opts};
1052                                                  
1053           2                                 14      foreach my $dsn_part ( split(/,/, $dsn) ) {
1054  ***      5     50                          96         if ( my ($prop_key, $prop_val) = $dsn_part =~  m/^(.)=(.*)$/ ) {
1055           5                                 24            $given_props{$prop_key} = $prop_val;
1056                                                        }
1057                                                        else {
1058  ***      0                                  0            MKDEBUG && _d('Interpreting', $dsn_part, 'as h=', $dsn_part);
1059  ***      0                                  0            $given_props{h} = $dsn_part;
1060                                                        }
1061                                                     }
1062                                                  
1063           2                                 12      foreach my $key ( keys %$opts ) {
1064          17                                 36         MKDEBUG && _d('Finding value for', $key);
1065          17                                 57         $final_props{$key} = $given_props{$key};
1066  ***     17     50     66                  143         if (   !defined $final_props{$key}
      ***                   33                        
1067                                                             && defined $prev->{$key} && $opts->{$key}->{copy} )
1068                                                        {
1069  ***      0                                  0            $final_props{$key} = $prev->{$key};
1070  ***      0                                  0            MKDEBUG && _d('Copying value for', $key, 'from previous DSN');
1071                                                        }
1072          17    100                          68         if ( !defined $final_props{$key} ) {
1073          12                                 41            $final_props{$key} = $defaults->{$key};
1074          12                                 33            MKDEBUG && _d('Copying value for', $key, 'from defaults');
1075                                                        }
1076                                                     }
1077                                                  
1078           2                                 10      foreach my $key ( keys %given_props ) {
1079  ***      5     50                          24         die "Unknown DSN option '$key' in '$dsn'.  For more details, "
1080                                                              . "please use the --help option, or try 'perldoc $PROGRAM_NAME' "
1081                                                              . "for complete documentation."
1082                                                           unless exists $opts->{$key};
1083                                                     }
1084  ***      2     50                          40      if ( (my $required = $self->prop('required')) ) {
1085  ***      0                                  0         foreach my $key ( keys %$required ) {
1086  ***      0      0                           0            die "Missing required DSN option '$key' in '$dsn'.  For more details, "
1087                                                                 . "please use the --help option, or try 'perldoc $PROGRAM_NAME' "
1088                                                                 . "for complete documentation."
1089                                                              unless $final_props{$key};
1090                                                        }
1091                                                     }
1092                                                  
1093           2                                 13      return \%final_props;
1094                                                  }
1095                                                  
1096                                                  sub parse_options {
1097           1                    1             4      my ( $self, $o ) = @_;
1098  ***      1     50                           7      die 'I need an OptionParser object' unless ref $o eq 'OptionParser';
1099  ***      0                                  0      my $dsn_string
1100                                                        = join(',',
1101           8    100                          32             map  { "$_=".$o->get($_); }
1102           1                                  8             grep { $o->has($_) && $o->get($_) }
1103           1                                  6             keys %{$self->{opts}}
1104                                                          );
1105           1                                  4      MKDEBUG && _d('DSN string made from options:', $dsn_string);
1106           1                                  5      return $self->parse($dsn_string);
1107                                                  }
1108                                                  
1109                                                  sub as_string {
1110  ***      0                    0             0      my ( $self, $dsn, $props ) = @_;
1111  ***      0      0                           0      return $dsn unless ref $dsn;
1112  ***      0      0                           0      my %allowed = $props ? map { $_=>1 } @$props : ();
      ***      0                                  0   
1113  ***      0      0                           0      return join(',',
1114  ***      0      0                           0         map  { "$_=" . ($_ eq 'p' ? '...' : $dsn->{$_})  }
1115  ***      0      0                           0         grep { defined $dsn->{$_} && $self->{opts}->{$_} }
1116  ***      0                                  0         grep { !$props || $allowed{$_}                   }
1117                                                        sort keys %$dsn );
1118                                                  }
1119                                                  
1120                                                  sub usage {
1121  ***      0                    0             0      my ( $self ) = @_;
1122  ***      0                                  0      my $usage
1123                                                        = "DSN syntax is key=value[,key=value...]  Allowable DSN keys:\n\n"
1124                                                        . "  KEY  COPY  MEANING\n"
1125                                                        . "  ===  ====  =============================================\n";
1126  ***      0                                  0      my %opts = %{$self->{opts}};
      ***      0                                  0   
1127  ***      0                                  0      foreach my $key ( sort keys %opts ) {
1128  ***      0      0      0                    0         $usage .= "  $key    "
1129                                                               .  ($opts{$key}->{copy} ? 'yes   ' : 'no    ')
1130                                                               .  ($opts{$key}->{desc} || '[No description]')
1131                                                               . "\n";
1132                                                     }
1133  ***      0                                  0      $usage .= "\n  If the DSN is a bareword, the word is treated as the 'h' key.\n";
1134  ***      0                                  0      return $usage;
1135                                                  }
1136                                                  
1137                                                  sub get_cxn_params {
1138           2                    2            16      my ( $self, $info ) = @_;
1139           2                                  5      my $dsn;
1140           2                                  6      my %opts = %{$self->{opts}};
               2                                 18   
1141  ***      2            50                   12      my $driver = $self->prop('dbidriver') || '';
1142  ***      2     50                           9      if ( $driver eq 'Pg' ) {
1143  ***      0                                  0         $dsn = 'DBI:Pg:dbname=' . ( $info->{D} || '' ) . ';'
1144  ***      0                                  0            . join(';', map  { "$opts{$_}->{dsn}=$info->{$_}" }
1145  ***      0             0                    0                        grep { defined $info->{$_} }
1146                                                                       qw(h P));
1147                                                     }
1148                                                     else {
1149           3                                 35         $dsn = 'DBI:mysql:' . ( $info->{D} || '' ) . ';'
1150          10                                 36            . join(';', map  { "$opts{$_}->{dsn}=$info->{$_}" }
1151  ***      2            50                   25                        grep { defined $info->{$_} }
1152                                                                       qw(F h P S A))
1153                                                           . ';mysql_read_default_group=client';
1154                                                     }
1155           2                                  7      MKDEBUG && _d($dsn);
1156           2                                 19      return ($dsn, $info->{u}, $info->{p});
1157                                                  }
1158                                                  
1159                                                  sub fill_in_dsn {
1160  ***      0                    0             0      my ( $self, $dbh, $dsn ) = @_;
1161  ***      0                                  0      my $vars = $dbh->selectall_hashref('SHOW VARIABLES', 'Variable_name');
1162  ***      0                                  0      my ($user, $db) = $dbh->selectrow_array('SELECT USER(), DATABASE()');
1163  ***      0                                  0      $user =~ s/@.*//;
1164  ***      0             0                    0      $dsn->{h} ||= $vars->{hostname}->{Value};
1165  ***      0             0                    0      $dsn->{S} ||= $vars->{'socket'}->{Value};
1166  ***      0             0                    0      $dsn->{P} ||= $vars->{port}->{Value};
1167  ***      0             0                    0      $dsn->{u} ||= $user;
1168  ***      0             0                    0      $dsn->{D} ||= $db;
1169                                                  }
1170                                                  
1171                                                  sub get_dbh {
1172           2                    2            11      my ( $self, $cxn_string, $user, $pass, $opts ) = @_;
1173  ***      2            50                   10      $opts ||= {};
1174  ***      2     50                          20      my $defaults = {
1175                                                        AutoCommit         => 0,
1176                                                        RaiseError         => 1,
1177                                                        PrintError         => 0,
1178                                                        ShowErrorStatement => 1,
1179                                                        mysql_enable_utf8 => ($cxn_string =~ m/charset=utf8/ ? 1 : 0),
1180                                                     };
1181           2                                 11      @{$defaults}{ keys %$opts } = values %$opts;
               2                                  8   
1182                                                  
1183  ***      2     50                          11      if ( $opts->{mysql_use_result} ) {
1184  ***      0                                  0         $defaults->{mysql_use_result} = 1;
1185                                                     }
1186                                                  
1187  ***      2     50                           8      if ( !$have_dbi ) {
1188  ***      0                                  0         die "Cannot connect to MySQL because the Perl DBI module is not "
1189                                                           . "installed or not found.  Run 'perl -MDBI' to see the directories "
1190                                                           . "that Perl searches for DBI.  If DBI is not installed, try:\n"
1191                                                           . "  Debian/Ubuntu  apt-get install libdbi-perl\n"
1192                                                           . "  RHEL/CentOS    yum install perl-DBI\n"
1193                                                           . "  OpenSolaris    pgk install pkg:/SUNWpmdbi\n";
1194                                                  
1195                                                     }
1196                                                  
1197           2                                  5      my $dbh;
1198           2                                  7      my $tries = 2;
1199  ***      2            66                   22      while ( !$dbh && $tries-- ) {
1200                                                        MKDEBUG && _d($cxn_string, ' ', $user, ' ', $pass, ' {',
1201           2                                  6            join(', ', map { "$_=>$defaults->{$_}" } keys %$defaults ), '}');
1202                                                  
1203           2                                  6         eval {
1204           2                                 16            $dbh = DBI->connect($cxn_string, $user, $pass, $defaults);
1205                                                  
1206  ***      2     50                          20            if ( $cxn_string =~ m/mysql/i ) {
1207           2                                  6               my $sql;
1208                                                  
1209           2                                  6               $sql = 'SELECT @@SQL_MODE';
1210           2                                  5               MKDEBUG && _d($dbh, $sql);
1211           2                                  5               my ($sql_mode) = $dbh->selectrow_array($sql);
1212                                                  
1213  ***      2     50                         362               $sql = 'SET @@SQL_QUOTE_SHOW_CREATE = 1'
1214                                                                   . '/*!40101, @@SQL_MODE=\'NO_AUTO_VALUE_ON_ZERO'
1215                                                                   . ($sql_mode ? ",$sql_mode" : '')
1216                                                                   . '\'*/';
1217           2                                  6               MKDEBUG && _d($dbh, $sql);
1218           2                                201               $dbh->do($sql);
1219                                                  
1220  ***      2     50                          16               if ( my ($charset) = $cxn_string =~ m/charset=(\w+)/ ) {
1221  ***      0                                  0                  $sql = "/*!40101 SET NAMES $charset*/";
1222  ***      0                                  0                  MKDEBUG && _d($dbh, ':', $sql);
1223  ***      0                                  0                  $dbh->do($sql);
1224  ***      0                                  0                  MKDEBUG && _d('Enabling charset for STDOUT');
1225  ***      0      0                           0                  if ( $charset eq 'utf8' ) {
1226  ***      0      0                           0                     binmode(STDOUT, ':utf8')
1227                                                                       or die "Can't binmode(STDOUT, ':utf8'): $OS_ERROR";
1228                                                                 }
1229                                                                 else {
1230  ***      0      0                           0                     binmode(STDOUT) or die "Can't binmode(STDOUT): $OS_ERROR";
1231                                                                 }
1232                                                              }
1233                                                  
1234           2    100                          11               if ( $self->prop('set-vars') ) {
1235           1                                  5                  $sql = "SET " . $self->prop('set-vars');
1236           1                                  3                  MKDEBUG && _d($dbh, ':', $sql);
1237           1                                 81                  $dbh->do($sql);
1238                                                              }
1239                                                           }
1240                                                        };
1241  ***      2     50     33                   25         if ( !$dbh && $EVAL_ERROR ) {
1242  ***      0                                  0            MKDEBUG && _d($EVAL_ERROR);
1243  ***      0      0                           0            if ( $EVAL_ERROR =~ m/not a compiled character set|character set utf8/ ) {
      ***             0                               
1244  ***      0                                  0               MKDEBUG && _d('Going to try again without utf8 support');
1245  ***      0                                  0               delete $defaults->{mysql_enable_utf8};
1246                                                           }
1247                                                           elsif ( $EVAL_ERROR =~ m/locate DBD\/mysql/i ) {
1248  ***      0                                  0               die "Cannot connect to MySQL because the Perl DBD::mysql module is "
1249                                                                 . "not installed or not found.  Run 'perl -MDBD::mysql' to see "
1250                                                                 . "the directories that Perl searches for DBD::mysql.  If "
1251                                                                 . "DBD::mysql is not installed, try:\n"
1252                                                                 . "  Debian/Ubuntu  apt-get install libdbd-mysql-perl\n"
1253                                                                 . "  RHEL/CentOS    yum install perl-DBD-MySQL\n"
1254                                                                 . "  OpenSolaris    pgk install pkg:/SUNWapu13dbd-mysql\n";
1255                                                           }
1256  ***      0      0                           0            if ( !$tries ) {
1257  ***      0                                  0               die $EVAL_ERROR;
1258                                                           }
1259                                                        }
1260                                                     }
1261                                                  
1262           2                                  4      MKDEBUG && _d('DBH info: ',
1263                                                        $dbh,
1264                                                        Dumper($dbh->selectrow_hashref(
1265                                                           'SELECT DATABASE(), CONNECTION_ID(), VERSION()/*!50038 , @@hostname*/')),
1266                                                        'Connection info:',      $dbh->{mysql_hostinfo},
1267                                                        'Character set info:',   Dumper($dbh->selectall_arrayref(
1268                                                                       'SHOW VARIABLES LIKE "character_set%"', { Slice => {}})),
1269                                                        '$DBD::mysql::VERSION:', $DBD::mysql::VERSION,
1270                                                        '$DBI::VERSION:',        $DBI::VERSION,
1271                                                     );
1272                                                  
1273           2                                 12      return $dbh;
1274                                                  }
1275                                                  
1276                                                  sub get_hostname {
1277  ***      0                    0             0      my ( $self, $dbh ) = @_;
1278  ***      0      0      0                    0      if ( my ($host) = ($dbh->{mysql_hostinfo} || '') =~ m/^(\w+) via/ ) {
1279  ***      0                                  0         return $host;
1280                                                     }
1281  ***      0                                  0      my ( $hostname, $one ) = $dbh->selectrow_array(
1282                                                        'SELECT /*!50038 @@hostname, */ 1');
1283  ***      0                                  0      return $hostname;
1284                                                  }
1285                                                  
1286                                                  sub disconnect {
1287  ***      0                    0             0      my ( $self, $dbh ) = @_;
1288  ***      0                                  0      MKDEBUG && $self->print_active_handles($dbh);
1289  ***      0                                  0      $dbh->disconnect;
1290                                                  }
1291                                                  
1292                                                  sub print_active_handles {
1293  ***      0                    0             0      my ( $self, $thing, $level ) = @_;
1294  ***      0             0                    0      $level ||= 0;
1295  ***      0      0      0                    0      printf("# Active %sh: %s %s %s\n", ($thing->{Type} || 'undef'), "\t" x $level,
      ***             0      0                        
      ***                    0                        
1296                                                        $thing, (($thing->{Type} || '') eq 'st' ? $thing->{Statement} || '' : ''))
1297                                                        or die "Cannot print: $OS_ERROR";
1298  ***      0                                  0      foreach my $handle ( grep {defined} @{ $thing->{ChildHandles} } ) {
      ***      0                                  0   
      ***      0                                  0   
1299  ***      0                                  0         $self->print_active_handles( $handle, $level + 1 );
1300                                                     }
1301                                                  }
1302                                                  
1303                                                  sub copy {
1304  ***      0                    0             0      my ( $self, $dsn_1, $dsn_2, %args ) = @_;
1305  ***      0      0                           0      die 'I need a dsn_1 argument' unless $dsn_1;
1306  ***      0      0                           0      die 'I need a dsn_2 argument' unless $dsn_2;
1307  ***      0                                  0      my %new_dsn = map {
1308  ***      0                                  0         my $key = $_;
1309  ***      0                                  0         my $val;
1310  ***      0      0                           0         if ( $args{overwrite} ) {
1311  ***      0      0                           0            $val = defined $dsn_1->{$key} ? $dsn_1->{$key} : $dsn_2->{$key};
1312                                                        }
1313                                                        else {
1314  ***      0      0                           0            $val = defined $dsn_2->{$key} ? $dsn_2->{$key} : $dsn_1->{$key};
1315                                                        }
1316  ***      0                                  0         $key => $val;
1317  ***      0                                  0      } keys %{$self->{opts}};
1318  ***      0                                  0      return \%new_dsn;
1319                                                  }
1320                                                  
1321                                                  sub _d {
1322  ***      0                    0             0      my ($package, undef, $line) = caller 0;
1323  ***      0      0                           0      @_ = map { (my $temp = $_) =~ s/\n/\n# /g; $temp; }
      ***      0                                  0   
      ***      0                                  0   
1324  ***      0                                  0           map { defined $_ ? $_ : 'undef' }
1325                                                          @_;
1326  ***      0                                  0      print STDERR "# $package:$line $PID ", join(' ', @_), "\n";
1327                                                  }
1328                                                  
1329                                                  1;
1330                                                  
1331                                                  # ###########################################################################
1332                                                  # End DSNParser package
1333                                                  # ###########################################################################
1334                                                  
1335                                                  # ###########################################################################
1336                                                  # VersionParser package 6667
1337                                                  # This package is a copy without comments from the original.  The original
1338                                                  # with comments and its test file can be found in the SVN repository at,
1339                                                  #   trunk/common/VersionParser.pm
1340                                                  #   trunk/common/t/VersionParser.t
1341                                                  # See http://code.google.com/p/maatkit/wiki/Developers for more information.
1342                                                  # ###########################################################################
1343                                                  package VersionParser;
1344                                                  
1345           2                    2            16   use strict;
               2                                  5   
               2                                 16   
1346           2                    2            16   use warnings FATAL => 'all';
               2                                  5   
               2                                 18   
1347                                                  
1348           2                    2            12   use English qw(-no_match_vars);
               2                                  5   
               2                                 11   
1349                                                  
1350  ***      2            50      2            12   use constant MKDEBUG => $ENV{MKDEBUG} || 0;
               2                                  5   
               2                                 27   
1351                                                  
1352                                                  sub new {
1353           5                    5            22      my ( $class ) = @_;
1354           5                                 52      bless {}, $class;
1355                                                  }
1356                                                  
1357                                                  sub parse {
1358           5                    5            30      my ( $self, $str ) = @_;
1359           5                                 93      my $result = sprintf('%03d%03d%03d', $str =~ m/(\d+)/g);
1360           5                                 15      MKDEBUG && _d($str, 'parses to', $result);
1361           5                                 22      return $result;
1362                                                  }
1363                                                  
1364                                                  sub version_ge {
1365  ***      0                    0             0      my ( $self, $dbh, $target ) = @_;
1366  ***      0      0                           0      if ( !$self->{$dbh} ) {
1367  ***      0                                  0         $self->{$dbh} = $self->parse(
1368                                                           $dbh->selectrow_array('SELECT VERSION()'));
1369                                                     }
1370  ***      0      0                           0      my $result = $self->{$dbh} ge $self->parse($target) ? 1 : 0;
1371  ***      0                                  0      MKDEBUG && _d($self->{$dbh}, 'ge', $target, ':', $result);
1372  ***      0                                  0      return $result;
1373                                                  }
1374                                                  
1375                                                  sub innodb_version {
1376           5                    5            25      my ( $self, $dbh ) = @_;
1377           5    100                          26      return unless $dbh;
1378           1                                  3      my $innodb_version = "NO";
1379                                                  
1380          12                                 49      my ($innodb) =
1381          12                                 31         grep { $_->{engine} =~ m/InnoDB/i }
1382                                                        map  {
1383           1                                  6            my %hash;
1384          12                                 57            @hash{ map { lc $_ } keys %$_ } = values %$_;
              36                                132   
1385          12                                 44            \%hash;
1386                                                        }
1387           1                                  3         @{ $dbh->selectall_arrayref("SHOW ENGINES", {Slice=>{}}) };
1388  ***      1     50                          17      if ( $innodb ) {
1389           1                                  2         MKDEBUG && _d("InnoDB support:", $innodb->{support});
1390  ***      1     50                          10         if ( $innodb->{support} =~ m/YES|DEFAULT/i ) {
1391           1                                  2            my $vars = $dbh->selectrow_hashref(
1392                                                              "SHOW VARIABLES LIKE 'innodb_version'");
1393  ***      1     50      0                    8            $innodb_version = !$vars ? "BUILTIN"
1394                                                                           :          ($vars->{Value} || $vars->{value});
1395                                                        }
1396                                                        else {
1397  ***      0                                  0            $innodb_version = $innodb->{support};  # probably DISABLED or NO
1398                                                        }
1399                                                     }
1400                                                  
1401           1                                  2      MKDEBUG && _d("InnoDB version:", $innodb_version);
1402           1                                  6      return $innodb_version;
1403                                                  }
1404                                                  
1405                                                  sub _d {
1406  ***      0                    0             0      my ($package, undef, $line) = caller 0;
1407  ***      0      0                           0      @_ = map { (my $temp = $_) =~ s/\n/\n# /g; $temp; }
      ***      0                                  0   
      ***      0                                  0   
1408  ***      0                                  0           map { defined $_ ? $_ : 'undef' }
1409                                                          @_;
1410  ***      0                                  0      print STDERR "# $package:$line $PID ", join(' ', @_), "\n";
1411                                                  }
1412                                                  
1413                                                  1;
1414                                                  
1415                                                  # ###########################################################################
1416                                                  # End VersionParser package
1417                                                  # ###########################################################################
1418                                                  
1419                                                  # ###########################################################################
1420                                                  # Daemon package 6255
1421                                                  # This package is a copy without comments from the original.  The original
1422                                                  # with comments and its test file can be found in the SVN repository at,
1423                                                  #   trunk/common/Daemon.pm
1424                                                  #   trunk/common/t/Daemon.t
1425                                                  # See http://code.google.com/p/maatkit/wiki/Developers for more information.
1426                                                  # ###########################################################################
1427                                                  
1428                                                  package Daemon;
1429                                                  
1430           2                    2            18   use strict;
               2                                  6   
               2                                 11   
1431           2                    2            12   use warnings FATAL => 'all';
               2                                  4   
               2                                250   
1432                                                  
1433           2                    2            12   use POSIX qw(setsid);
               2                                  6   
               2                                 23   
1434           2                    2            12   use English qw(-no_match_vars);
               2                                  6   
               2                                 10   
1435                                                  
1436  ***      2            50      2            13   use constant MKDEBUG => $ENV{MKDEBUG} || 0;
               2                                  6   
               2                                 26   
1437                                                  
1438                                                  sub new {
1439  ***      0                    0             0      my ( $class, %args ) = @_;
1440  ***      0                                  0      foreach my $arg ( qw(o) ) {
1441  ***      0      0                           0         die "I need a $arg argument" unless $args{$arg};
1442                                                     }
1443  ***      0                                  0      my $o = $args{o};
1444  ***      0      0                           0      my $self = {
      ***             0                               
1445                                                        o        => $o,
1446                                                        log_file => $o->has('log') ? $o->get('log') : undef,
1447                                                        PID_file => $o->has('pid') ? $o->get('pid') : undef,
1448                                                     };
1449                                                  
1450  ***      0                                  0      check_PID_file(undef, $self->{PID_file});
1451                                                  
1452  ***      0                                  0      MKDEBUG && _d('Daemonized child will log to', $self->{log_file});
1453  ***      0                                  0      return bless $self, $class;
1454                                                  }
1455                                                  
1456                                                  sub daemonize {
1457  ***      0                    0             0      my ( $self ) = @_;
1458                                                  
1459  ***      0                                  0      MKDEBUG && _d('About to fork and daemonize');
1460  ***      0      0                           0      defined (my $pid = fork()) or die "Cannot fork: $OS_ERROR";
1461  ***      0      0                           0      if ( $pid ) {
1462  ***      0                                  0         MKDEBUG && _d('I am the parent and now I die');
1463  ***      0                                  0         exit;
1464                                                     }
1465                                                  
1466  ***      0                                  0      $self->{PID_owner} = $PID;
1467  ***      0                                  0      $self->{child}     = 1;
1468                                                  
1469  ***      0      0                           0      POSIX::setsid() or die "Cannot start a new session: $OS_ERROR";
1470  ***      0      0                           0      chdir '/'       or die "Cannot chdir to /: $OS_ERROR";
1471                                                  
1472  ***      0                                  0      $self->_make_PID_file();
1473                                                  
1474  ***      0                                  0      $OUTPUT_AUTOFLUSH = 1;
1475                                                  
1476  ***      0      0                           0      if ( -t STDIN ) {
1477  ***      0                                  0         close STDIN;
1478  ***      0      0                           0         open  STDIN, '/dev/null'
1479                                                           or die "Cannot reopen STDIN to /dev/null: $OS_ERROR";
1480                                                     }
1481                                                  
1482  ***      0      0                           0      if ( $self->{log_file} ) {
1483  ***      0                                  0         close STDOUT;
1484  ***      0      0                           0         open  STDOUT, '>>', $self->{log_file}
1485                                                           or die "Cannot open log file $self->{log_file}: $OS_ERROR";
1486                                                  
1487  ***      0                                  0         close STDERR;
1488  ***      0      0                           0         open  STDERR, ">&STDOUT"
1489                                                           or die "Cannot dupe STDERR to STDOUT: $OS_ERROR"; 
1490                                                     }
1491                                                     else {
1492  ***      0      0                           0         if ( -t STDOUT ) {
1493  ***      0                                  0            close STDOUT;
1494  ***      0      0                           0            open  STDOUT, '>', '/dev/null'
1495                                                              or die "Cannot reopen STDOUT to /dev/null: $OS_ERROR";
1496                                                        }
1497  ***      0      0                           0         if ( -t STDERR ) {
1498  ***      0                                  0            close STDERR;
1499  ***      0      0                           0            open  STDERR, '>', '/dev/null'
1500                                                              or die "Cannot reopen STDERR to /dev/null: $OS_ERROR";
1501                                                        }
1502                                                     }
1503                                                  
1504  ***      0                                  0      MKDEBUG && _d('I am the child and now I live daemonized');
1505  ***      0                                  0      return;
1506                                                  }
1507                                                  
1508                                                  sub check_PID_file {
1509  ***      0                    0             0      my ( $self, $file ) = @_;
1510  ***      0      0                           0      my $PID_file = $self ? $self->{PID_file} : $file;
1511  ***      0                                  0      MKDEBUG && _d('Checking PID file', $PID_file);
1512  ***      0      0      0                    0      if ( $PID_file && -f $PID_file ) {
1513  ***      0                                  0         my $pid;
1514  ***      0                                  0         eval { chomp($pid = `cat $PID_file`); };
      ***      0                                  0   
1515  ***      0      0                           0         die "Cannot cat $PID_file: $OS_ERROR" if $EVAL_ERROR;
1516  ***      0                                  0         MKDEBUG && _d('PID file exists; it contains PID', $pid);
1517  ***      0      0                           0         if ( $pid ) {
1518  ***      0                                  0            my $pid_is_alive = kill 0, $pid;
1519  ***      0      0                           0            if ( $pid_is_alive ) {
1520  ***      0                                  0               die "The PID file $PID_file already exists "
1521                                                                 . " and the PID that it contains, $pid, is running";
1522                                                           }
1523                                                           else {
1524  ***      0                                  0               warn "Overwriting PID file $PID_file because the PID that it "
1525                                                                 . "contains, $pid, is not running";
1526                                                           }
1527                                                        }
1528                                                        else {
1529  ***      0                                  0            die "The PID file $PID_file already exists but it does not "
1530                                                              . "contain a PID";
1531                                                        }
1532                                                     }
1533                                                     else {
1534  ***      0                                  0         MKDEBUG && _d('No PID file');
1535                                                     }
1536  ***      0                                  0      return;
1537                                                  }
1538                                                  
1539                                                  sub make_PID_file {
1540  ***      0                    0             0      my ( $self ) = @_;
1541  ***      0      0                           0      if ( exists $self->{child} ) {
1542  ***      0                                  0         die "Do not call Daemon::make_PID_file() for daemonized scripts";
1543                                                     }
1544  ***      0                                  0      $self->_make_PID_file();
1545  ***      0                                  0      $self->{PID_owner} = $PID;
1546  ***      0                                  0      return;
1547                                                  }
1548                                                  
1549                                                  sub _make_PID_file {
1550  ***      0                    0             0      my ( $self ) = @_;
1551                                                  
1552  ***      0                                  0      my $PID_file = $self->{PID_file};
1553  ***      0      0                           0      if ( !$PID_file ) {
1554  ***      0                                  0         MKDEBUG && _d('No PID file to create');
1555  ***      0                                  0         return;
1556                                                     }
1557                                                  
1558  ***      0                                  0      $self->check_PID_file();
1559                                                  
1560  ***      0      0                           0      open my $PID_FH, '>', $PID_file
1561                                                        or die "Cannot open PID file $PID_file: $OS_ERROR";
1562  ***      0      0                           0      print $PID_FH $PID
1563                                                        or die "Cannot print to PID file $PID_file: $OS_ERROR";
1564  ***      0      0                           0      close $PID_FH
1565                                                        or die "Cannot close PID file $PID_file: $OS_ERROR";
1566                                                  
1567  ***      0                                  0      MKDEBUG && _d('Created PID file:', $self->{PID_file});
1568  ***      0                                  0      return;
1569                                                  }
1570                                                  
1571                                                  sub _remove_PID_file {
1572  ***      0                    0             0      my ( $self ) = @_;
1573  ***      0      0      0                    0      if ( $self->{PID_file} && -f $self->{PID_file} ) {
1574  ***      0      0                           0         unlink $self->{PID_file}
1575                                                           or warn "Cannot remove PID file $self->{PID_file}: $OS_ERROR";
1576  ***      0                                  0         MKDEBUG && _d('Removed PID file');
1577                                                     }
1578                                                     else {
1579  ***      0                                  0         MKDEBUG && _d('No PID to remove');
1580                                                     }
1581  ***      0                                  0      return;
1582                                                  }
1583                                                  
1584                                                  sub DESTROY {
1585  ***      0                    0             0      my ( $self ) = @_;
1586                                                  
1587  ***      0      0      0                    0      $self->_remove_PID_file() if ($self->{PID_owner} || 0) == $PID;
1588                                                  
1589  ***      0                                  0      return;
1590                                                  }
1591                                                  
1592                                                  sub _d {
1593  ***      0                    0             0      my ($package, undef, $line) = caller 0;
1594  ***      0      0                           0      @_ = map { (my $temp = $_) =~ s/\n/\n# /g; $temp; }
      ***      0                                  0   
      ***      0                                  0   
1595  ***      0                                  0           map { defined $_ ? $_ : 'undef' }
1596                                                          @_;
1597  ***      0                                  0      print STDERR "# $package:$line $PID ", join(' ', @_), "\n";
1598                                                  }
1599                                                  
1600                                                  1;
1601                                                  
1602                                                  # ###########################################################################
1603                                                  # End Daemon package
1604                                                  # ###########################################################################
1605                                                  
1606                                                  # ###########################################################################
1607                                                  # PodParser package 6696
1608                                                  # This package is a copy without comments from the original.  The original
1609                                                  # with comments and its test file can be found in the SVN repository at,
1610                                                  #   trunk/common/PodParser.pm
1611                                                  #   trunk/common/t/PodParser.t
1612                                                  # See http://code.google.com/p/maatkit/wiki/Developers for more information.
1613                                                  # ###########################################################################
1614                                                  package PodParser;
1615                                                  
1616                                                  
1617           2                    2            14   use strict;
               2                                  6   
               2                                 10   
1618           2                    2            12   use warnings FATAL => 'all';
               2                                  5   
               2                                 14   
1619           2                    2            12   use English qw(-no_match_vars);
               2                                  6   
               2                                 11   
1620                                                  
1621  ***      2            50      2            12   use constant MKDEBUG => $ENV{MKDEBUG} || 0;
               2                                  6   
               2                                 38   
1622                                                  
1623                                                  my %parse_items_from = (
1624                                                     'OPTIONS'     => 1,
1625                                                     'DSN OPTIONS' => 1,
1626                                                     'RULES'       => 1,
1627                                                  );
1628                                                  
1629                                                  my %item_pattern_for = (
1630                                                     'OPTIONS'     => qr/--(.*)/,
1631                                                     'DSN OPTIONS' => qr/\* (.)/,
1632                                                     'RULES'       => qr/(.*)/,
1633                                                  );
1634                                                  
1635                                                  my %section_has_rules = (
1636                                                     'OPTIONS'     => 1,
1637                                                     'DSN OPTIONS' => 0,
1638                                                     'RULES'       => 0,
1639                                                  );
1640                                                  
1641                                                  sub new {
1642           5                    5            25      my ( $class, %args ) = @_;
1643           5                                 47      my $self = {
1644                                                        current_section => '',
1645                                                        current_item    => '',
1646                                                        in_list         => 0,
1647                                                        items           => {},
1648                                                     };
1649           5                                 51      return bless $self, $class;
1650                                                  }
1651                                                   
1652                                                  sub get_items {
1653           5                    5            24      my ( $self, $section ) = @_;
1654  ***      5     50                          35      return $section ? $self->{items}->{$section} : $self->{items};
1655                                                  }
1656                                                  
1657                                                  sub parse_from_file {
1658           5                    5            27      my ( $self, $file ) = @_;
1659  ***      5     50                          20      return unless $file;
1660                                                  
1661  ***      5     50                         224      open my $fh, "<", $file or die "Cannot open $file: $OS_ERROR";
1662           5                                 37      local $INPUT_RECORD_SEPARATOR = '';  # read paragraphs
1663           5                                 17      my $para;
1664                                                  
1665  ***      5            66                10398      1 while defined($para = <$fh>) && $para !~ m/^=pod/;
1666  ***      5     50                          21      die "$file does not contain =pod" unless $para;
1667                                                  
1668  ***      5            66                   80      while ( defined($para = <$fh>) && $para !~ m/^=cut/ ) {
1669        1615    100                        6395         if ( $para =~ m/^=(head|item|over|back)/ ) {
1670         570                               3505            my ($cmd, $name) = $para =~ m/^=(\w+)(?:\s+(.+))?/;
1671         570           100                 2207            $name ||= '';
1672         570                               1211            MKDEBUG && _d('cmd:', $cmd, 'name:', $name);
1673         570                               2104            $self->command($cmd, $name);
1674                                                        }
1675                                                        else {
1676        1045                               3849            $self->textblock($para);
1677                                                        }
1678                                                     }
1679                                                  
1680           5                                 17      close $fh;
1681                                                  }
1682                                                  
1683                                                  sub command {
1684         570                  570          2255      my ( $self, $cmd, $name ) = @_;
1685                                                     
1686         570                               1893      $name =~ s/\s+\Z//m;  # Remove \n and blank line after name.
1687                                                     
1688         570    100    100                 3953      if  ( $cmd eq 'head1' && $parse_items_from{$name} ) {
                    100                               
                    100                               
      ***            50                               
1689          15                                 32         MKDEBUG && _d('In section', $name);
1690          15                                 55         $self->{current_section} = $name;
1691          15                                 88         $self->{items}->{$name}  = {};
1692                                                     }
1693                                                     elsif ( $cmd eq 'over' ) {
1694          15                                 35         MKDEBUG && _d('Start items in', $self->{current_section});
1695          15                                 51         $self->{in_list} = 1;
1696                                                     }
1697                                                     elsif ( $cmd eq 'item' ) {
1698         465                               1709         my $pat = $item_pattern_for{ $self->{current_section} };
1699         465                               2730         my ($item) = $name =~ m/$pat/;
1700  ***    465     50                        1523         if ( $item ) {
1701         465                                971            MKDEBUG && _d($self->{current_section}, 'item:', $item);
1702         465                               2987            $self->{items}->{ $self->{current_section} }->{$item} = {
1703                                                              desc => '',  # every item should have a desc
1704                                                           };
1705         465                               1763            $self->{current_item} = $item;
1706                                                        }
1707                                                        else {
1708  ***      0                                  0            warn "Item $name does not match $pat";
1709                                                        }
1710                                                     }
1711                                                     elsif ( $cmd eq '=back' ) {
1712  ***      0                                  0         MKDEBUG && _d('End items');
1713  ***      0                                  0         $self->{in_list} = 0;
1714                                                     }
1715                                                     else {
1716          75                                251         $self->{current_section} = '';
1717          75                                258         $self->{in_list}         = 0;
1718                                                     }
1719                                                     
1720         570                               6061      return;
1721                                                  }
1722                                                  
1723                                                  sub textblock {
1724        1045                 1045          4153      my ( $self, $para ) = @_;
1725                                                  
1726  ***   1045    100     66                 9511      return unless $self->{current_section} && $self->{current_item};
1727                                                  
1728         920                               2881      my $section = $self->{current_section};
1729         920                               4215      my $item    = $self->{items}->{$section}->{ $self->{current_item} };
1730                                                  
1731         920                               5051      $para =~ s/\s+\Z//;
1732                                                  
1733         920    100                        3642      if ( $para =~ m/^\w+[:;] / ) {
1734         405                                867         MKDEBUG && _d('Item attributes:', $para);
1735         450                               2100         map {
1736         405                               1649            my ($attrib, $val) = split(/: /, $_);
1737  ***    450     50                        2523            $item->{$attrib} = defined $val ? $val : 1;
1738                                                        } split(/; /, $para);
1739                                                     }
1740                                                     else {
1741         515                               1100         MKDEBUG && _d('Item desc:', substr($para, 0, 40),
1742                                                           length($para) > 40 ? '...' : '');
1743         515                               1824         $para =~ s/\n+/ /g;
1744         515                               2063         $item->{desc} .= $para;
1745                                                     }
1746                                                  
1747         920                               9654      return;
1748                                                  }
1749                                                  
1750                                                  sub verbatim {
1751  ***      0                    0             0      my ( $self, $para ) = @_;
1752  ***      0                                  0      return;
1753                                                  }
1754                                                  
1755                                                  sub _d {
1756  ***      0                    0             0      my ($package, undef, $line) = caller 0;
1757  ***      0      0                           0      @_ = map { (my $temp = $_) =~ s/\n/\n# /g; $temp; }
      ***      0                                  0   
      ***      0                                  0   
1758  ***      0                                  0           map { defined $_ ? $_ : 'undef' }
1759                                                          @_;
1760  ***      0                                  0      print STDERR "# $package:$line $PID ", join(' ', @_), "\n";
1761                                                  }
1762                                                  
1763                                                  1;
1764                                                  
1765                                                  # ###########################################################################
1766                                                  # End PodParser package
1767                                                  # ###########################################################################
1768                                                  
1769                                                  # ###########################################################################
1770                                                  # TextResultSetParser package 6590
1771                                                  # This package is a copy without comments from the original.  The original
1772                                                  # with comments and its test file can be found in the SVN repository at,
1773                                                  #   trunk/common/TextResultSetParser.pm
1774                                                  #   trunk/common/t/TextResultSetParser.t
1775                                                  # See http://code.google.com/p/maatkit/wiki/Developers for more information.
1776                                                  # ###########################################################################
1777                                                  package TextResultSetParser;
1778                                                  
1779                                                  
1780           2                    2            14   use strict;
               2                                  6   
               2                                 10   
1781           2                    2            12   use warnings FATAL => 'all';
               2                                  4   
               2                                 10   
1782           2                    2            11   use English qw(-no_match_vars);
               2                                  9   
               2                                 11   
1783                                                  
1784           2                    2            12   use Data::Dumper;
               2                                  5   
               2                                 11   
1785                                                  $Data::Dumper::Indent    = 1;
1786                                                  $Data::Dumper::Sortkeys  = 1;
1787                                                  $Data::Dumper::Quotekeys = 0;
1788                                                  
1789  ***      2            50      2            12   use constant MKDEBUG => $ENV{MKDEBUG} || 0;
               2                                  5   
               2                                 30   
1790                                                  
1791                                                  sub new {
1792           5                    5            30      my ( $class, %args ) = @_;
1793           5                                 20      my $self = { %args };
1794           5                                 42      return bless $self, $class;
1795                                                  }
1796                                                  
1797                                                  sub _parse_tabular {
1798        1084                 1084          4848      my ( $text, @cols ) = @_;
1799        1084                               2910      my %row;
1800        1084                               8957      my @vals = $text =~ m/\| +([^\|]*?)(?= +\|)/msg;
1801        1084    100                        4283      return (undef, \@vals) unless @cols;
1802        1080                               4536      @row{@cols} = @vals;
1803        1080                               4826      return (\%row, undef);
1804                                                  }
1805                                                  
1806                                                  sub _parse_tab_sep {
1807  ***      0                    0             0      my ( $text, @cols ) = @_;
1808  ***      0                                  0      my %row;
1809  ***      0                                  0      my @vals = split(/\t/, $text);
1810  ***      0      0                           0      return (undef, \@vals) unless @cols;
1811  ***      0                                  0      @row{@cols} = @vals;
1812  ***      0                                  0      return (\%row, undef);
1813                                                  }
1814                                                  
1815                                                  sub parse_vertical_row {
1816  ***      0                    0             0      my ( $text ) = @_;
1817  ***      0                                  0      my %row = $text =~ m/^\s*(\w+):(?: ([^\n]*))?/msg;
1818  ***      0                                  0      MKDEBUG && _d('vertical row:', Dumper(\%row));
1819  ***      0                                  0      return \%row;
1820                                                  }
1821                                                  
1822                                                  sub parse {
1823           4                    4           229      my ( $self, $text ) = @_;
1824           4                                 14      my $result_set;
1825                                                  
1826  ***      4     50                          41      if ( $text =~ m/^\+---/m ) { # standard "tabular" output
      ***             0                               
      ***             0                               
1827           4                                  8         MKDEBUG && _d('Result set text is standard tabular');
1828           4                                 36         my $line_pattern  = qr/^(\| .*)[\r\n]+/m;
1829           4                                 35         $result_set
1830                                                           = parse_horizontal_row($text, $line_pattern, \&_parse_tabular);
1831                                                     }
1832                                                     elsif ( $text =~ m/^id\tselect_type\t/m ) { # tab-separated
1833  ***      0                                  0         MKDEBUG && _d('Result set text is tab-separated');
1834  ***      0                                  0         my $line_pattern  = qr/^(.*?\t.*)[\r\n]+/m;
1835  ***      0                                  0         $result_set
1836                                                           = parse_horizontal_row($text, $line_pattern, \&_parse_tab_sep);
1837                                                     }
1838                                                     elsif ( $text =~ m/\*\*\* \d+\. row/ ) { # "vertical" output
1839  ***      0                                  0         MKDEBUG && _d('Result set text is vertical (\G)');
1840  ***      0                                  0         foreach my $row ( split_vertical_rows($text) ) {
1841  ***      0                                  0            push @$result_set, parse_vertical_row($row);
1842                                                        }
1843                                                     }
1844                                                     else {
1845  ***      0                                  0         die "Cannot determine if text is tabular, tab-separated or veritcal:\n"
1846                                                           . $text;
1847                                                     }
1848                                                  
1849  ***      4     50                          22      if ( $self->{value_for} ) {
1850  ***      0                                  0         foreach my $result_set ( @$result_set ) {
1851  ***      0                                  0            foreach my $key ( keys %$result_set ) {
1852  ***      0      0                           0               $result_set->{$key} = $self->{value_for}->{ $result_set->{$key} }
1853                                                                 if exists $self->{value_for}->{ $result_set->{$key} };
1854                                                           }
1855                                                        }
1856                                                     }
1857                                                  
1858           4                                 20      return $result_set;
1859                                                  }
1860                                                  
1861                                                  sub parse_horizontal_row {
1862           4                    4           138      my ( $text, $line_pattern, $sub ) = @_;
1863           4                                 16      my @result_sets = ();
1864           4                                 16      my @cols        = ();
1865           4                                904      foreach my $line ( $text =~ m/$line_pattern/g ) {
1866        1084                               3720         my ( $row, $cols ) = $sub->($line, @cols);
1867        1084    100                        3663         if ( $row ) {
1868        1080                               3937            push @result_sets, $row;
1869                                                        }
1870                                                        else {
1871           4                                 28            @cols = @$cols;
1872                                                        }
1873                                                     }
1874           4                                113      return \@result_sets;
1875                                                  }
1876                                                  
1877                                                  sub split_vertical_rows {
1878  ***      0                    0             0      my ( $text ) = @_;
1879  ***      0                                  0      my $ROW_HEADER = '\*{3,} \d+\. row \*{3,}';
1880  ***      0                                  0      my @rows = $text =~ m/($ROW_HEADER.*?)(?=$ROW_HEADER|\z)/omgs;
1881  ***      0                                  0      return @rows;
1882                                                  }
1883                                                  
1884                                                  sub _d {
1885  ***      0                    0             0      my ($package, undef, $line) = caller 0;
1886  ***      0      0                           0      @_ = map { (my $temp = $_) =~ s/\n/\n# /g; $temp; }
      ***      0                                  0   
      ***      0                                  0   
1887  ***      0                                  0           map { defined $_ ? $_ : 'undef' }
1888                                                          @_;
1889  ***      0                                  0      print STDERR "# $package:$line $PID ", join(' ', @_), "\n";
1890                                                  }
1891                                                  
1892                                                  1;
1893                                                  
1894                                                  # ###########################################################################
1895                                                  # End TextResultSetParser package
1896                                                  # ###########################################################################
1897                                                  
1898                                                  # ###########################################################################
1899                                                  # Advisor package 6699
1900                                                  # This package is a copy without comments from the original.  The original
1901                                                  # with comments and its test file can be found in the SVN repository at,
1902                                                  #   trunk/common/Advisor.pm
1903                                                  #   trunk/common/t/Advisor.t
1904                                                  # See http://code.google.com/p/maatkit/wiki/Developers for more information.
1905                                                  # ###########################################################################
1906                                                  package Advisor;
1907                                                  
1908           2                    2            14   use strict;
               2                                  5   
               2                                 11   
1909           2                    2            16   use warnings FATAL => 'all';
               2                                  5   
               2                                 10   
1910           2                    2            12   use English qw(-no_match_vars);
               2                                  4   
               2                                 11   
1911  ***      2            50      2            12   use constant MKDEBUG => $ENV{MKDEBUG} || 0;
               2                                  6   
               2                                 26   
1912                                                  
1913                                                  sub new {
1914           5                    5            41      my ( $class, %args ) = @_;
1915           5                                493      foreach my $arg ( qw(match_type) ) {
1916  ***      5     50                          31         die "I need a $arg argument" unless $args{$arg};
1917                                                     }
1918                                                  
1919           5                                 40      my $self = {
1920                                                        %args,
1921                                                        rules          => [],  # Rules from all advisor modules.
1922                                                        rule_index_for => {},  # Maps rules by ID to their array index in $rules.
1923                                                        rule_info      => {},  # ID, severity, description, etc. for each rule.
1924                                                     };
1925                                                  
1926           5                                 48      return bless $self, $class;
1927                                                  }
1928                                                  
1929                                                  sub load_rules {
1930           5                    5            22      my ( $self, $advisor ) = @_;
1931  ***      5     50                          22      return unless $advisor;
1932           5                                 11      MKDEBUG && _d('Loading rules from', ref $advisor);
1933                                                  
1934           5                                 21      my $i = scalar @{$self->{rules}};
               5                                 22   
1935                                                  
1936                                                     RULE:
1937           5                                 30      foreach my $rule ( $advisor->get_rules() ) {
1938         330                                982         my $id = $rule->{id};
1939         330    100                        1444         if ( $self->{ignore_rules}->{"$id"} ) {
1940           2                                  4            MKDEBUG && _d("Ignoring rule", $id);
1941           2                                 11            next RULE;
1942                                                        }
1943  ***    328     50                        1401         die "Rule $id already exists and cannot be redefined"
1944                                                           if defined $self->{rule_index_for}->{$id};
1945         328                                767         push @{$self->{rules}}, $rule;
             328                               1134   
1946         328                               1426         $self->{rule_index_for}->{$id} = $i++;
1947                                                     }
1948                                                  
1949           5                                 63      return;
1950                                                  }
1951                                                  
1952                                                  sub load_rule_info {
1953           5                    5            21      my ( $self, $advisor ) = @_;
1954  ***      5     50                          21      return unless $advisor;
1955           5                                 15      MKDEBUG && _d('Loading rule info from', ref $advisor);
1956           5                                 20      my $rules = $self->{rules};
1957           5                                 23      foreach my $rule ( @$rules ) {
1958         328                                999         my $id = $rule->{id};
1959  ***    328     50                        1450         if ( $self->{ignore_rules}->{"$id"} ) {
1960  ***      0                                  0            die "Rule $id was loaded but should be ignored";
1961                                                        }
1962         328                               1105         my $rule_info = $advisor->get_rule_info($id);
1963  ***    328     50                        1116         next unless $rule_info;
1964  ***    328     50                        1417         die "Info for rule $id already exists and cannot be redefined"
1965                                                           if $self->{rule_info}->{$id};
1966         328                               1400         $self->{rule_info}->{$id} = $rule_info;
1967                                                     }
1968           5                                 17      return;
1969                                                  }
1970                                                  
1971                                                  sub run_rules {
1972           5                    5            51      my ( $self, %args ) = @_;
1973           5                                 19      my @matched_rules;
1974           5                                 17      my @matched_pos;
1975           5                                 22      my $rules      = $self->{rules};
1976           5                                 24      my $match_type = lc $self->{match_type};
1977           5                                 28      foreach my $rule ( @$rules ) {
1978         328                                775         eval {
1979         328                               1952            my $match = $rule->{code}->(%args);
1980  ***    328     50                        1726            if ( $match_type eq 'pos' ) {
      ***            50                               
1981  ***      0      0                           0               if ( defined $match ) {
1982  ***      0                                  0                  MKDEBUG && _d('Matches rule', $rule->{id}, 'near pos', $match);
1983  ***      0                                  0                  push @matched_rules, $rule->{id};
1984  ***      0                                  0                  push @matched_pos,   $match;
1985                                                              }
1986                                                           }
1987                                                           elsif ( $match_type eq 'bool' ) {
1988         328    100                        1206               if ( $match ) {
1989          51                                114                  MKDEBUG && _d("Matches rule", $rule->{id});
1990          51                                222                  push @matched_rules, $rule->{id};
1991                                                              }
1992                                                           }
1993                                                        };
1994  ***    328     50                        1257         if ( $EVAL_ERROR ) {
1995  ***      0                                  0            warn "Code for rule $rule->{id} caused an error: $EVAL_ERROR";
1996                                                        }
1997                                                     }
1998           5                                 34      return \@matched_rules, \@matched_pos;
1999                                                  };
2000                                                  
2001                                                  sub get_rule_info {
2002          51                   51           195      my ( $self, $id ) = @_;
2003  ***     51     50                         184      return unless $id;
2004          51                                227      return $self->{rule_info}->{$id};
2005                                                  }
2006                                                  
2007                                                  sub _d {
2008  ***      0                    0             0      my ($package, undef, $line) = caller 0;
2009  ***      0      0                           0      @_ = map { (my $temp = $_) =~ s/\n/\n# /g; $temp; }
      ***      0                                  0   
      ***      0                                  0   
2010  ***      0                                  0           map { defined $_ ? $_ : 'undef' }
2011                                                          @_;
2012  ***      0                                  0      print STDERR "# $package:$line $PID ", join(' ', @_), "\n";
2013                                                  }
2014                                                  
2015                                                  1;
2016                                                  
2017                                                  # ###########################################################################
2018                                                  # End Advisor package
2019                                                  # ###########################################################################
2020                                                  
2021                                                  # ###########################################################################
2022                                                  # AdvisorRules package 6678
2023                                                  # This package is a copy without comments from the original.  The original
2024                                                  # with comments and its test file can be found in the SVN repository at,
2025                                                  #   trunk/common/AdvisorRules.pm
2026                                                  #   trunk/common/t/AdvisorRules.t
2027                                                  # See http://code.google.com/p/maatkit/wiki/Developers for more information.
2028                                                  # ###########################################################################
2029                                                  package AdvisorRules;
2030                                                  
2031           2                    2            14   use strict;
               2                                  5   
               2                                  9   
2032           2                    2            12   use warnings FATAL => 'all';
               2                                  4   
               2                                 14   
2033           2                    2            12   use English qw(-no_match_vars);
               2                                  4   
               2                                 11   
2034  ***      2            50      2            13   use constant MKDEBUG => $ENV{MKDEBUG} || 0;
               2                                  4   
               2                                 31   
2035                                                  
2036                                                  sub new {
2037           5                    5            37      my ( $class, %args ) = @_;
2038           5                                 27      foreach my $arg ( qw(PodParser) ) {
2039  ***      5     50                          32         die "I need a $arg argument" unless $args{$arg};
2040                                                     }
2041           5                                 37      my $self = {
2042                                                        %args,
2043                                                        rules     => [],
2044                                                        rule_info => {},
2045                                                     };
2046           5                                 48      return bless $self, $class;
2047                                                  }
2048                                                  
2049                                                  sub load_rule_info {
2050           5                    5            33      my ( $self, %args ) = @_;
2051           5                                 27      foreach my $arg ( qw(file section ) ) {
2052  ***     10     50                          50         die "I need a $arg argument" unless $args{$arg};
2053                                                     }
2054  ***      5            33                   61      my $rules = $args{rules} || $self->{rules};
2055           5                                 19      my $p     = $self->{PodParser};
2056                                                  
2057           5                                 37      $p->parse_from_file($args{file});
2058           5                                 56      my $rule_items = $p->get_items($args{section});
2059           5                                 14      my %seen;
2060           5                                 78      foreach my $rule_id ( keys %$rule_items ) {
2061         330                                987         my $rule = $rule_items->{$rule_id};
2062  ***    330     50                        1247         die "Rule $rule_id has no description" unless $rule->{desc};
2063  ***    330     50                        1226         die "Rule $rule_id has no severity"    unless $rule->{severity};
2064  ***    330     50                        1331         die "Rule $rule_id is already defined"
2065                                                           if exists $self->{rule_info}->{$rule_id};
2066         330                               2422         $self->{rule_info}->{$rule_id} = {
2067                                                           id          => $rule_id,
2068                                                           severity    => $rule->{severity},
2069                                                           description => $rule->{desc},
2070                                                        };
2071                                                     }
2072                                                  
2073           5                                 41      foreach my $rule ( @$rules ) {
2074  ***    330     50                        1734         die "There is no info for rule $rule->{id} in $args{file}"
2075                                                           unless $self->{rule_info}->{ $rule->{id} };
2076                                                     }
2077                                                  
2078           5                                 28      return;
2079                                                  }
2080                                                  
2081                                                  sub get_rule_info {
2082         328                  328          1170      my ( $self, $id ) = @_;
2083  ***    328     50                        1160      return unless $id;
2084         328                               1346      return $self->{rule_info}->{$id};
2085                                                  }
2086                                                  
2087                                                  sub _reset_rule_info {
2088  ***      0                    0             0      my ( $self ) = @_;
2089  ***      0                                  0      $self->{rule_info} = {};
2090  ***      0                                  0      return;
2091                                                  }
2092                                                  
2093                                                  sub _d {
2094  ***      0                    0             0      my ($package, undef, $line) = caller 0;
2095  ***      0      0                           0      @_ = map { (my $temp = $_) =~ s/\n/\n# /g; $temp; }
      ***      0                                  0   
      ***      0                                  0   
2096  ***      0                                  0           map { defined $_ ? $_ : 'undef' }
2097                                                          @_;
2098  ***      0                                  0      print STDERR "# $package:$line $PID ", join(' ', @_), "\n";
2099                                                  }
2100                                                  
2101                                                  1;
2102                                                  
2103                                                  # ###########################################################################
2104                                                  # End AdvisorRules package
2105                                                  # ###########################################################################
2106                                                  
2107                                                  # ###########################################################################
2108                                                  # VariableAdvisorRules package 6698
2109                                                  # This package is a copy without comments from the original.  The original
2110                                                  # with comments and its test file can be found in the SVN repository at,
2111                                                  #   trunk/common/VariableAdvisorRules.pm
2112                                                  #   trunk/common/t/VariableAdvisorRules.t
2113                                                  # See http://code.google.com/p/maatkit/wiki/Developers for more information.
2114                                                  # ###########################################################################
2115                                                  package VariableAdvisorRules;
2116           2                    2            13   use base 'AdvisorRules';
               2                                  5   
               2                                 18   
2117                                                  
2118           2                    2            12   use strict;
               2                                  4   
               2                                 10   
2119           2                    2            11   use warnings FATAL => 'all';
               2                                  4   
               2                                 10   
2120           2                    2            12   use English qw(-no_match_vars);
               2                                  4   
               2                                 15   
2121  ***      2            50      2            13   use constant MKDEBUG => $ENV{MKDEBUG} || 0;
               2                                  5   
               2                                 25   
2122                                                  
2123                                                  sub new {
2124           5                    5            31      my ( $class, %args ) = @_;
2125           5                                106      my $self = $class->SUPER::new(%args);
2126           5                                 39      @{$self->{rules}} = $self->get_rules();
               5                                 72   
2127           5                                 56      MKDEBUG && _d(scalar @{$self->{rules}}, "rules");
2128           5                                 24      return $self;
2129                                                  }
2130                                                  
2131                                                  sub get_rules {
2132                                                     return
2133                                                     {
2134                                                        id   => 'auto_increment',
2135                                                        code => sub {
2136           5                    5            33            my ( %args ) = @_;
2137           5                                 23            my $vars = $args{variables};
2138  ***      5     50     33                   67            return unless defined $vars->{auto_increment_increment}
2139                                                              && defined $vars->{auto_increment_offset};
2140  ***      5     50     33                   69            return    $vars->{auto_increment_increment} != 1
2141                                                                  || $vars->{auto_increment_offset}    != 1 ? 1 : 0;
2142                                                        },
2143                                                     },
2144                                                     {
2145                                                        id   => 'concurrent_insert',
2146                                                        code => sub {
2147           5                    5            33            my ( %args ) = @_;
2148           5                                 49            return _var_gt($args{variables}->{concurrent_insert}, 1);
2149                                                        },
2150                                                     },
2151                                                     {
2152                                                        id   => 'connect_timeout',
2153                                                        code => sub {
2154           5                    5            33            my ( %args ) = @_;
2155           5                                 32            return _var_gt($args{variables}->{connect_timeout}, 10);
2156                                                        },
2157                                                     },
2158                                                     {
2159                                                        id   => 'debug',
2160                                                        code => sub {
2161           5                    5            30            my ( %args ) = @_;
2162  ***      5     50                          35            return $args{variables}->{debug} ? 1 : 0;
2163                                                        },
2164                                                     },
2165                                                     {
2166                                                        id   => 'delay_key_write',
2167                                                        code => sub {
2168           5                    5            31            my ( %args ) = @_;
2169           5                                 49            return _var_seq($args{variables}->{delay_key_write}, "ON");
2170                                                        },
2171                                                     },
2172                                                     {
2173                                                        id   => 'flush',
2174                                                        code => sub {
2175           5                    5            31            my ( %args ) = @_;
2176           5                                 31            return _var_seq($args{variables}->{flush}, "ON");
2177                                                        },
2178                                                     },
2179                                                     {
2180                                                        id   => 'flush_time',
2181                                                        code => sub {
2182           5                    5            30            my ( %args ) = @_;
2183           5                                 28            return _var_gt($args{variables}->{flush_time}, 0);
2184                                                        },
2185                                                     },
2186                                                     {
2187                                                        id   => 'have_bdb',
2188                                                        code => sub {
2189           5                    5            33            my ( %args ) = @_;
2190           5                                 39            return _var_seq($args{variables}->{have_bdb}, 'YES');
2191                                                        },
2192                                                     },
2193                                                     {
2194                                                        id   => 'init_connect',
2195                                                        code => sub {
2196           5                    5            31            my ( %args ) = @_;
2197  ***      5     50                          35            return $args{variables}->{init_connect} ? 1 : 0;
2198                                                        },
2199                                                     },
2200                                                     {
2201                                                        id   => 'init_file',
2202                                                        code => sub {
2203           5                    5            31            my ( %args ) = @_;
2204  ***      5     50                          32            return $args{variables}->{init_file} ? 1 : 0;
2205                                                        },
2206                                                     },
2207                                                     {
2208                                                        id   => 'init_slave',
2209                                                        code => sub {
2210           5                    5            31            my ( %args ) = @_;
2211  ***      5     50                          40            return $args{variables}->{init_slave} ? 1 : 0;
2212                                                        },
2213                                                     },
2214                                                     {
2215                                                        id   => 'innodb_additional_mem_pool_size',
2216                                                        code => sub {
2217           5                    5            32            my ( %args ) = @_;
2218           5                                 32            return _var_gt($args{variables}->{innodb_additional_mem_pool_size},
2219                                                              20 * 1_048_576);  # 20M
2220                                                        },
2221                                                     },
2222                                                     {
2223                                                        id   => 'innodb_buffer_pool_size',
2224                                                        code => sub {
2225           5                    5            32            my ( %args ) = @_;
2226           5                                 34            return _var_eq($args{variables}->{innodb_buffer_pool_size},
2227                                                              10 * 1_048_576);  # 10M
2228                                                        },
2229                                                     },
2230                                                     {
2231                                                        id   => 'innodb_checksums',
2232                                                        code => sub {
2233           5                    5            32            my ( %args ) = @_;
2234           5                                 38            return _var_sneq($args{variables}->{innodb_checksums}, "ON");
2235                                                        },
2236                                                     },
2237                                                     {
2238                                                        id   => 'innodb_doublewrite',
2239                                                        code => sub {
2240           5                    5            30            my ( %args ) = @_;
2241           5                                 31            return _var_sneq($args{variables}->{innodb_doublewrite}, "ON");
2242                                                        },
2243                                                     },
2244                                                     {
2245                                                        id   => 'innodb_fast_shutdown',
2246                                                        code => sub {
2247           5                    5            33            my ( %args ) = @_;
2248           5                                 31            return _var_neq($args{variables}->{innodb_fast_shutdown}, 1);
2249                                                        },
2250                                                     },
2251                                                     {
2252                                                        id   => 'innodb_flush_log_at_trx_commit-1',
2253                                                        code => sub {
2254           5                    5            34            my ( %args ) = @_;
2255           5                                 30            return _var_neq($args{variables}->{innodb_flush_log_at_trx_commit}, 1);
2256                                                        },
2257                                                     },
2258                                                     {
2259                                                        id   => 'innodb_flush_log_at_trx_commit-2',
2260                                                        code => sub {
2261           5                    5            33            my ( %args ) = @_;
2262           5                                 32            return _var_eq($args{variables}->{innodb_flush_log_at_trx_commit}, 0);
2263                                                        },
2264                                                     },
2265                                                     {
2266                                                        id   => 'innodb_force_recovery',
2267                                                        code => sub {
2268           5                    5            30            my ( %args ) = @_;
2269           5                                 29            return _var_gt($args{variables}->{innodb_force_recovery}, 0);
2270                                                        },
2271                                                     },
2272                                                     {
2273                                                        id   => 'innodb_lock_wait_timeout',
2274                                                        code => sub {
2275           5                    5            30            my ( %args ) = @_;
2276           5                                 33            return _var_gt($args{variables}->{innodb_lock_wait_timeout}, 50);
2277                                                        },
2278                                                     },
2279                                                     {
2280                                                        id   => 'innodb_log_buffer_size',
2281                                                        code => sub {
2282           5                    5            28            my ( %args ) = @_;
2283           5                                 32            return _var_gt($args{variables}->{innodb_log_buffer_size},
2284                                                              16 * 1_048_576);  # 16M
2285                                                        },
2286                                                     },
2287                                                     {
2288                                                        id   => 'innodb_log_file_size',
2289                                                        code => sub {
2290           5                    5            31            my ( %args ) = @_;
2291           5                                 31            return _var_eq($args{variables}->{innodb_log_file_size},
2292                                                              5 * 1_048_576);  # 5M
2293                                                        },
2294                                                     },
2295                                                     {
2296                                                        id   => 'innodb_max_dirty_pages_pct',
2297                                                        code => sub {
2298           5                    5            30            my ( %args ) = @_;
2299           5                                 41            return _var_lt($args{variables}->{innodb_max_dirty_pages_pct}, 90);
2300                                                        },
2301                                                     },
2302                                                     {
2303                                                        id   => 'key_buffer_size',
2304                                                        code => sub {
2305           5                    5            32            my ( %args ) = @_;
2306           5                                 31            return _var_eq($args{variables}->{key_buffer_size},
2307                                                              8 * 1_048_576);  # 8M
2308                                                        },
2309                                                     },
2310                                                     {
2311                                                        id   => 'large_pages',
2312                                                        code => sub {
2313           5                    5            32            my ( %args ) = @_;
2314           5                                 33            return _var_seq($args{variables}->{large_pages}, "ON");
2315                                                        },
2316                                                     },
2317                                                     {
2318                                                        id   => 'locked_in_memory',
2319                                                        code => sub {
2320           5                    5            30            my ( %args ) = @_;
2321           5                                 35            return _var_seq($args{variables}->{locked_in_memory}, "ON");
2322                                                        },
2323                                                     },
2324                                                     {
2325                                                        id   => 'log_warnings-1',
2326                                                        code => sub {
2327           5                    5            30            my ( %args ) = @_;
2328           5                                 30            return _var_eq($args{variables}->{log_warnings}, 0);
2329                                                        },
2330                                                     },
2331                                                     {
2332                                                        id   => 'log_warnings-2',
2333                                                        code => sub {
2334           5                    5            32            my ( %args ) = @_;
2335           5                                 35            return _var_eq($args{variables}->{log_warnings}, 1);
2336                                                        },
2337                                                     },
2338                                                     {
2339                                                        id   => 'low_priority_updates',
2340                                                        code => sub {
2341           5                    5            31            my ( %args ) = @_;
2342           5                                 30            return _var_seq($args{variables}->{low_priority_updates}, "ON");
2343                                                        },
2344                                                     },
2345                                                     {
2346                                                        id   => 'max_binlog_size',
2347                                                        code => sub {
2348           5                    5            31            my ( %args ) = @_;
2349           5                                 28            return _var_lt($args{variables}->{max_binlog_size},
2350                                                              1 * 1_073_741_824);  # 1G
2351                                                        },
2352                                                     },
2353                                                     {
2354                                                        id   => 'max_connect_errors',
2355                                                        code => sub {
2356           5                    5            31            my ( %args ) = @_;
2357           5                                 28            return _var_eq($args{variables}->{max_connect_errors}, 10);
2358                                                        },
2359                                                     },
2360                                                     {
2361                                                        id   => 'max_connections',
2362                                                        code => sub {
2363           5                    5            30            my ( %args ) = @_;
2364           5                                 31            return _var_gt($args{variables}->{max_connections}, 1_000);
2365                                                        },
2366                                                     },
2367                                                  
2368                                                     {
2369                                                        id   => 'myisam_repair_threads',
2370                                                        code => sub {
2371           5                    5            26            my ( %args ) = @_;
2372           5                                 31            return _var_gt($args{variables}->{myisam_repair_threads}, 1);
2373                                                        },
2374                                                     },
2375                                                     {
2376                                                        id   => 'old_passwords',
2377                                                        code => sub {
2378           5                    5            31            my ( %args ) = @_;
2379           5                                 29            return _var_seq($args{variables}->{old_passwords}, "ON");
2380                                                        },
2381                                                     },
2382                                                     {
2383                                                        id   => 'optimizer_prune_level',
2384                                                        code => sub {
2385           5                    5            35            my ( %args ) = @_;
2386           5                                 28            return _var_lt($args{variables}->{optimizer_prune_level}, 1);
2387                                                        },
2388                                                     },
2389                                                     {
2390                                                        id   => 'port',
2391                                                        code => sub {
2392           5                    5            31            my ( %args ) = @_;
2393           5                                 30            return _var_neq($args{variables}->{port}, 3306);
2394                                                        },
2395                                                     },
2396                                                     {
2397                                                        id   => 'query_cache_size-1',
2398                                                        code => sub {
2399           5                    5            33            my ( %args ) = @_;
2400           5                                 30            return _var_gt($args{variables}->{query_cache_size},
2401                                                              128 * 1_048_576);  # 128M
2402                                                        },
2403                                                     },
2404                                                     {
2405                                                        id   => 'query_cache_size-2',
2406                                                        code => sub {
2407           5                    5            31            my ( %args ) = @_;
2408           5                                 29            return _var_gt($args{variables}->{query_cache_size},
2409                                                              512 * 1_048_576);  # 512M
2410                                                        },
2411                                                     },
2412                                                     {
2413                                                        id   => 'read_buffer_size-1',
2414                                                        code => sub {
2415           5                    5            34            my ( %args ) = @_;
2416           5                                 52            return _var_neq($args{variables}->{read_buffer_size}, 131_072);
2417                                                        },
2418                                                     },
2419                                                     {
2420                                                        id   => 'read_buffer_size-2',
2421                                                        code => sub {
2422           5                    5            34            my ( %args ) = @_;
2423           5                                 29            return _var_gt($args{variables}->{read_buffer_size},
2424                                                              8 * 1_048_576);  # 8M
2425                                                        },
2426                                                     },
2427                                                     {
2428                                                        id   => 'read_rnd_buffer_size-1',
2429                                                        code => sub {
2430           5                    5            32            my ( %args ) = @_;
2431           5                                 29            return _var_neq($args{variables}->{read_rnd_buffer_size}, 262_144);
2432                                                        },
2433                                                     },
2434                                                     {
2435                                                        id   => 'read_rnd_buffer_size-2',
2436                                                        code => sub {
2437           5                    5            32            my ( %args ) = @_;
2438           5                                 30            return _var_gt($args{variables}->{read_rnd_buffer_size},
2439                                                              4 * 1_048_576);  # 4M
2440                                                        },
2441                                                     },
2442                                                     {
2443                                                        id   => 'relay_log_space_limit',
2444                                                        code => sub {
2445           5                    5            30            my ( %args ) = @_;
2446           5                                 31            return _var_gt($args{variables}->{relay_log_space_limit}, 0);
2447                                                        },
2448                                                     },
2449                                                     
2450                                                     {
2451                                                        id   => 'slave_net_timeout',
2452                                                        code => sub {
2453           5                    5            30            my ( %args ) = @_;
2454           5                                 28            return _var_gt($args{variables}->{slave_net_timeout}, 60);
2455                                                        },
2456                                                     },
2457                                                     {
2458                                                        id   => 'slave_skip_errors',
2459                                                        code => sub {
2460           5                    5            31            my ( %args ) = @_;
2461           5    100                          38            return $args{variables}->{slave_skip_errors} ? 1 : 0;
2462                                                        },
2463                                                     },
2464                                                     {
2465                                                        id   => 'sort_buffer_size-1',
2466                                                        code => sub {
2467           5                    5            29            my ( %args ) = @_;
2468           5                                 30            return _var_neq($args{variables}->{sort_buffer_size}, 2_097_144);
2469                                                        },
2470                                                     },
2471                                                     {
2472                                                        id   => 'sort_buffer_size-2',
2473                                                        code => sub {
2474           5                    5            31            my ( %args ) = @_;
2475           5                                 30            return _var_gt($args{variables}->{sort_buffer_size},
2476                                                              4 * 1_048_576);  # 4M
2477                                                        },
2478                                                     },
2479                                                     {
2480                                                        id   => 'sql_notes',
2481                                                        code => sub {
2482           5                    5            32            my ( %args ) = @_;
2483           5                                 31            return _var_seq($args{variables}->{sql_notes}, "OFF");
2484                                                        },
2485                                                     },
2486                                                     {
2487                                                        id   => 'sync_frm',
2488                                                        code => sub {
2489           5                    5            30            my ( %args ) = @_;
2490           5                                 30            return _var_sneq($args{variables}->{sync_frm}, "ON");
2491                                                        },
2492                                                     },
2493                                                     {
2494                                                        id   => 'tx_isolation-1',
2495                                                        code => sub {
2496           5                    5            29            my ( %args ) = @_;
2497           5                                 30            return _var_sneq($args{variables}->{tx_isolation}, "REPEATABLE-READ");
2498                                                        },
2499                                                     },
2500                                                     {
2501                                                        id   => 'tx_isolation-2',
2502                                                        code => sub {
2503           5                    5            30            my ( %args ) = @_;
2504                                                           return
2505  ***      5     50     33                   28                  _var_sneq($args{variables}->{tx_isolation}, "REPEATABLE-READ")
2506                                                              && _var_sneq($args{variables}->{tx_isolation}, "READ-COMMITTED")
2507                                                              ? 1 : 0;
2508                                                        },
2509                                                     },
2510                                                     {
2511                                                        id   => 'expire_log_days',
2512                                                        code => sub {
2513           5                    5            34            my ( %args ) = @_;
2514  ***      5     50     33                   34            return _var_eq($args{variables}->{expire_log_days}, 0)
2515                                                              && $args{variables}->{log_bin} ? 1 : 0;
2516                                                        },
2517                                                     },
2518                                                     {
2519                                                        id   => 'innodb_file_io_threads',
2520                                                        code => sub {
2521           5                    5            33            my ( %args ) = @_;
2522  ***      5     50     33                   32            return _var_neq($args{variables}->{innodb_file_io_threads}, 4)
2523                                                              && $OSNAME ne 'MSWin32' ? 1 : 0;
2524                                                        },
2525                                                     },
2526                                                     {
2527                                                        id   => 'innodb_data_file_path',
2528                                                        code => sub {
2529           5                    5            33            my ( %args ) = @_;
2530                                                           return
2531  ***      5     50     50                   58               ($args{variables}->{innodb_data_file_path} || '') =~ m/autoextend/
2532                                                              ? 1 : 0;
2533                                                        },
2534                                                     },
2535                                                     {
2536                                                        id   => 'innodb_flush_method',
2537                                                        code => sub {
2538           5                    5            30            my ( %args ) = @_;
2539  ***      5     50     33                   33            return _var_sneq($args{variables}->{innodb_flush_method}, 'O_DIRECT')
2540                                                              && $OSNAME ne 'MSWin32' ? 1 : 0;
2541                                                        },
2542                                                     },
2543                                                     {
2544                                                        id   => 'innodb_locks_unsafe_for_binlog',
2545                                                        code => sub {
2546           5                    5            33            my ( %args ) = @_;
2547  ***      5     50     33                   46            return _var_seq($args{variables}->{innodb_locks_unsafe_for_binlog},
2548                                                              "ON") && $args{variables}->{log_bin} ? 1 : 0;
2549                                                        },
2550                                                     },
2551                                                     {
2552                                                        id   => 'innodb_support_xa',
2553                                                        code => sub {
2554           5                    5            34            my ( %args ) = @_;
2555  ***      5     50     33                   35            return _var_sneq($args{variables}->{innodb_support_xa}, "ON")
2556                                                              && $args{variables}->{log_bin} ? 1 : 0;
2557                                                        },
2558                                                     },
2559                                                     {
2560                                                        id   => 'log_bin',
2561                                                        code => sub {
2562           5                    5            32            my ( %args ) = @_;
2563           5                                 30            return _var_sneq($args{variables}->{log_bin}, "ON");
2564                                                        },
2565                                                     },
2566                                                     {
2567                                                        id   => 'log_output',
2568                                                        code => sub {
2569           5                    5            35            my ( %args ) = @_;
2570  ***      5     50    100                   47            return ($args{variables}->{log_output} || '') =~ m/TABLE/i ? 1 : 0;
2571                                                        },
2572                                                     },
2573                                                     {
2574                                                        id   => 'max_relay_log_size',
2575                                                        code => sub {
2576           5                    5            30            my ( %args ) = @_;
2577  ***      5     50     33                   33            return _var_gt($args{variables}->{max_relay_log_size}, 0)
2578                                                              &&  _var_lt($args{variables}->{max_relay_log_size},
2579                                                                    1 * 1_073_741_824)  ? 1 : 0;
2580                                                        },
2581                                                     },
2582                                                     {
2583                                                        id   => 'myisam_recover_options',
2584                                                        code => sub {
2585           4                    4            25            my ( %args ) = @_;
2586  ***      4     50     33                   24            return _var_seq($args{variables}->{myisam_recover_options}, "OFF")
2587                                                              ||  _var_seq($args{variables}->{myisam_recover_options}, "DEFAULT")
2588                                                                 ? 1 : 0;
2589                                                        },
2590                                                     },
2591                                                     {
2592                                                        id   => 'storage_engine',
2593                                                        code => sub {
2594           5                    5            32            my ( %args ) = @_;
2595  ***      5     50                          31            return 0 unless $args{variables}->{storage_engine};
2596  ***      5     50                          68            return $args{variables}->{storage_engine} !~ m/InnoDB|MyISAM/i ? 1 : 0;
2597                                                        },
2598                                                     },
2599                                                     {
2600                                                        id   => 'sync_binlog',
2601                                                        code => sub {
2602           4                    4            26            my ( %args ) = @_;
2603                                                           return
2604  ***      4     50     33                   46               $args{variables}->{log_bin}
      ***                   33                        
2605                                                              && (   _var_eq($args{variables}->{sync_binlog}, 0)
2606                                                                  || _var_gt($args{variables}->{sync_binlog}, 1)) ? 1 : 0;
2607                                                        },
2608                                                     },
2609                                                     {
2610                                                        id   => 'tmp_table_size',
2611                                                        code => sub {
2612           5                    5            32            my ( %args ) = @_;
2613  ***      5    100     50                   68            return ($args{variables}->{tmp_table_size} || 0)
      ***                   50                        
2614                                                                > ($args{variables}->{max_heap_table_size} || 0) ? 1 : 0;
2615                                                        },
2616                                                     },
2617                                                     {
2618                                                        id   => 'old mysql version',
2619                                                        code => sub {
2620           5                    5            32            my ( %args ) = @_;
2621           5                                 21            my $mysql_version = $args{mysql_version};
2622  ***      5     50                          20            return 0 unless $mysql_version;
2623           5                                 41            my ($major, $minor, $patch) = $mysql_version =~ m/(\d{3})/g;
2624  ***      5     50                          37            if ( $major eq '003' ) {
      ***            50                               
      ***            50                               
2625  ***      0      0                           0               return $mysql_version lt '003023000' ? 1 : 0;  # 3.23.x
2626                                                           }
2627                                                           elsif ( $major eq '004' ) {
2628  ***      0      0                           0               return $mysql_version lt '004001020' ? 1 : 0;  # 4.1.20
2629                                                           }
2630                                                           elsif ( $major eq '005' ) {
2631           5    100                          24               if ( $minor eq '000' ) {
      ***            50                               
2632  ***      1     50                          10                  return $mysql_version lt '005000037' ? 1 : 0;  # 5.0.37
2633                                                              }
2634                                                              elsif ( $minor eq '001' ) {
2635  ***      4     50                          29                  return $mysql_version lt '005001030' ? 1 : 0;  # 5.1.30
2636                                                              }
2637                                                              else {
2638  ***      0                                  0                  return 0;
2639                                                              }
2640                                                           }
2641                                                           else {
2642  ***      0                                  0               return 0;
2643                                                           }
2644                                                        },
2645                                                     },
2646                                                     {
2647                                                        id   => 'end-of-life mysql version',
2648                                                        code => sub {
2649           5                    5            34            my ( %args ) = @_;
2650           5                                 25            my $mysql_version = $args{mysql_version};
2651  ***      5     50                         536            return 0 unless $mysql_version;
2652           5    100                          36            return $mysql_version lt '005001000' ? 1 : 0;  # 5.1.x
2653                                                        },
2654                                                     },
2655          10                   10          3781   };
2656                                                  
2657                                                  sub _var_gt {
2658          85                   85           293      my ($var, $val) = @_;
2659  ***     85     50                         315      return 0 unless defined $var;
2660          85    100                         457      return $var > $val ? 1 : 0;
2661                                                  }
2662                                                  
2663                                                  sub _var_lt {
2664          15                   15            55      my ($var, $val) = @_;
2665  ***     15     50                          57      return 0 unless defined $var;
2666  ***     15     50                          86      return $var < $val ? 1 : 0;
2667                                                  }
2668                                                  
2669                                                  sub _var_eq {
2670          79                   79           288      my ($var, $val) = @_;
2671          79    100                         311      return 0 unless defined $var;
2672          74    100                         479      return $var == $val ? 1 : 0;
2673                                                  }
2674                                                  
2675                                                  sub _var_neq {
2676          35                   35           120      my ($var, $val) = @_;
2677  ***     35     50                         134      return 0 unless defined $var;
2678          35    100                         116      return _var_eq($var, $val) ? 0 : 1;
2679                                                  }
2680                                                  
2681                                                  sub _var_seq {
2682          89                   89           322      my ($var, $val) = @_;
2683          89    100                         339      return 0 unless defined $var;
2684          85    100                         582      return $var eq $val ? 1 : 0;
2685                                                  }
2686                                                  
2687                                                  sub _var_sneq {
2688          40                   40           146      my ($var, $val) = @_;
2689  ***     40     50                         153      return 0 unless defined $var;
2690          40    100                         139      return _var_seq($var, $val) ? 0 : 1;
2691                                                  }
2692                                                  
2693                                                  sub _d {
2694  ***      0                    0             0      my ($package, undef, $line) = caller 0;
2695  ***      0      0                           0      @_ = map { (my $temp = $_) =~ s/\n/\n# /g; $temp; }
      ***      0                                  0   
      ***      0                                  0   
2696  ***      0                                  0           map { defined $_ ? $_ : 'undef' }
2697                                                          @_;
2698  ***      0                                  0      print STDERR "# $package:$line $PID ", join(' ', @_), "\n";
2699                                                  }
2700                                                  
2701                                                  1;
2702                                                  
2703                                                  # ###########################################################################
2704                                                  # End VariableAdvisorRules package
2705                                                  # ###########################################################################
2706                                                  
2707                                                  # ###########################################################################
2708                                                  # This is a combination of modules and programs in one -- a runnable module.
2709                                                  # http://www.perl.com/pub/a/2006/07/13/lightning-articles.html?page=last
2710                                                  # Or, look it up in the Camel book on pages 642 and 643 in the 3rd edition.
2711                                                  #
2712                                                  # Check at the end of this package for the call to main() which actually runs
2713                                                  # the program.
2714                                                  # ###########################################################################
2715                                                  package mk_variable_advisor;
2716                                                  
2717           2                    2            16   use strict;
               2                                  5   
               2                                 10   
2718           2                    2            12   use warnings FATAL => 'all';
               2                                  5   
               2                                 11   
2719           2                    2            13   use English qw(-no_match_vars);
               2                                  5   
               2                                 10   
2720           2                    2            13   use Data::Dumper;
               2                                  5   
               2                                 10   
2721                                                  $Data::Dumper::Indent    = 1;
2722                                                  $Data::Dumper::Sortkeys  = 1;
2723                                                  $Data::Dumper::Quotekeys = 0;
2724                                                  
2725  ***      2            50      2            13   use constant MKDEBUG => $ENV{MKDEBUG} || 0;
               2                                  4   
               2                                 27   
2726                                                  
2727                                                  sub main {
2728           5                    5           864      @ARGV = @_;  # set global ARGV for this package
2729                                                  
2730                                                     # ########################################################################
2731                                                     # Get configuration information.
2732                                                     # ########################################################################
2733           5                                111      my $o  = new OptionParser(
2734                                                        strict      => 0,
2735                                                        prompt      => '[OPTION...] [DSN]',
2736                                                        description => q{analyzes variables and advises on possible problems.},
2737                                                     );
2738           5                                 32      $o->get_specs();
2739           5                                 86      $o->get_opts();
2740                                                  
2741           5                                 32      my $dp = $o->DSNParser();
2742           5                                 22      $dp->prop('set-vars', $o->get('set-vars'));
2743                                                  
2744  ***      5     50                          23      if ( !$o->get('help') ) {
2745  ***      5     50     66                   45         if ( @ARGV == 0
2746                                                              && (!$o->get('show-variables')) ) {
2747  ***      0                                  0            $o->save_error("--show-variables must be specified if "
2748                                                              . "a DNS is not given");
2749                                                        }
2750                                                     }
2751                                                  
2752           5                                 35      $o->usage_or_errors();
2753                                                  
2754                                                     # #########################################################################
2755                                                     # Load rules from POD and plugins.
2756                                                     # #########################################################################
2757           5                                 70      my $p   = new PodParser();
2758           5                                 73      my $var = new VariableAdvisorRules(PodParser => $p);
2759           5                                 28      my $adv = new Advisor(
2760                                                        match_type   => "bool",
2761                                                        ignore_rules => $o->get('ignore-rules'),
2762                                                     );
2763                                                  
2764           5                                 42      $var->load_rule_info(
2765                                                        file    => __FILE__,
2766                                                        section => 'RULES',
2767                                                     );
2768           5                                 36      $adv->load_rules($var);
2769           5                                 34      $adv->load_rule_info($var);
2770                                                  
2771                                                     # TODO: load rules from plugins
2772                                                  
2773                                                     # #########################################################################
2774                                                     # Make common modules.
2775                                                     # #########################################################################
2776           5                                 74      my $vp  = new VersionParser();
2777           5                                 58      my $trp = new TextResultSetParser();
2778           5                                 34      my %common_modules = (
2779                                                        OptionParser        => $o,
2780                                                        DSNParser           => $dp,
2781                                                        TextResultSetParser => $trp,
2782                                                        VersionParser       => $vp,
2783                                                     );
2784                                                  
2785                                                     # ##########################################################################
2786                                                     # Connect to MySQL if a DSN was given.
2787                                                     # ##########################################################################
2788           5                                 11      my $dbh;
2789           5    100                          24      if ( @ARGV ) {
2790           1                                  7         my $dsn_defaults = $dp->parse_options($o);
2791           1                                  5         my $dsn          = $dp->parse(shift @ARGV, $dsn_defaults);
2792                                                  
2793           1                                  6         $dbh = $dp->get_dbh($dp->get_cxn_params($dsn), {AutoCommit => 1});
2794           1                                  7         $dbh->{FetchHashKeyName} = 'NAME_lc';
2795                                                     }
2796                                                  
2797                                                     # ########################################################################
2798                                                     # Daemonize now that everything is setup and ready to work.
2799                                                     # ########################################################################
2800           5                                 16      my $daemon;
2801  ***      5     50                          28      if ( $o->get('daemonize') ) {
      ***            50                               
2802  ***      0                                  0         $daemon = new Daemon(o=>$o);
2803  ***      0                                  0         $daemon->daemonize();
2804  ***      0                                  0         MKDEBUG && _d('I am a daemon now');
2805                                                     }
2806                                                     elsif ( $o->get('pid') ) {
2807                                                        # We're not daemoninzing, it just handles PID stuff.
2808  ***      0                                  0         $daemon = new Daemon(o=>$o);
2809  ***      0                                  0         $daemon->make_PID_file();
2810                                                     }
2811                                                  
2812                                                     # #########################################################################
2813                                                     # Get the variables and other MySQL info to pass to rules.
2814                                                     # #########################################################################
2815           5                                 38      my $vars = get_variables(
2816                                                        dbh => $dbh,
2817                                                        %common_modules,
2818                                                     );
2819                                                  
2820           5                                 43      my $mysql_version  = $vp->parse($vars->{version});
2821           5                                 27      my $innodb_version = $vp->innodb_version($dbh);
2822           5                                 15      MKDEBUG && _d("MySQL version", $mysql_version,
2823                                                        "InnoDB version", $innodb_version);
2824                                                  
2825                                                     # #########################################################################
2826                                                     # Run rules, print advice.
2827                                                     # #########################################################################
2828           5                                 50      my ($advice) = $adv->run_rules(
2829                                                        variables      => $vars,
2830                                                        mysql_version  => $mysql_version,
2831                                                        innodb_version => $innodb_version,
2832                                                        %common_modules,
2833                                                     );
2834                                                  
2835           5                                 35      print_advice(
2836                                                        advice  => $advice,
2837                                                        Advisor => $adv,
2838                                                        %common_modules,
2839                                                     );
2840                                                  
2841           5                               3194      return 0;
2842                                                  }
2843                                                  
2844                                                  # ##########################################################################
2845                                                  # Subroutines
2846                                                  # ##########################################################################
2847                                                  
2848                                                  # Returns hashref of SHOW /*40003 GLOBAL*/ VARIABLES values.
2849                                                  sub get_variables {
2850           5                    5            41      my ( %args ) = @_;
2851           5                                 35      my ($dbh, $o, $trp) = @args{qw(dbh OptionParser TextResultSetParser)};
2852           5                                 18      my $vars            = {};
2853                                                  
2854           5    100                          25      if ( $dbh ) {
      ***            50                               
2855           1                                  2         MKDEBUG && _d("Getting variables from dbh", $dbh);
2856           1                                  4         my $sql = "SHOW /*40003 GLOBAL*/ VARIABLES";
2857           1                                  3         MKDEBUG && _d($dbh, $sql);
2858         240                               1269         map { $vars->{$_->{variable_name}} = $_->{value}; }
               1                                 25   
2859           1                                  2            @{ $dbh->selectall_arrayref($sql, {Slice=>{}}) };
2860                                                     }
2861                                                     elsif ( my $file = $o->get('show-variables') ) {
2862           4                                 12         MKDEBUG && _d("Getting variables from", $file);
2863  ***      4     50                         171         open my $fh, "<", $file
2864                                                           or die "Cannot open $file: $OS_ERROR";
2865           4                                 12         my $contents = do { local $/ = undef; <$fh> };
               4                                 34   
               4                                335   
2866           4                                 28         close $fh;
2867        1080                               5714         map { $vars->{$_->{Variable_name}} = $_->{Value} }
               4                                 31   
2868           4                                 12            @{ $trp->parse($contents) };
2869                                                     }
2870                                                  
2871           5                                524      return $vars;
2872                                                  }
2873                                                  
2874                                                  sub print_advice {
2875           5                    5            35      my ( %args ) = @_;
2876           5                                 26      my @required_args = qw(advice Advisor OptionParser);
2877           5                                 22      foreach my $arg ( @required_args ) {
2878  ***     15     50                          69         die "I need a $arg argument" unless $args{$arg};
2879                                                     }
2880           5                                 25      my ($advice, $adv, $o) = @args{@required_args};
2881           5                                 30      my $verbose = $o->get('verbose');
2882                                                  
2883  ***      5     50                          21      return unless scalar @$advice;
2884                                                  
2885           5                                 19      foreach my $id ( @$advice ) {
2886          51                                191         my $info = $adv->get_rule_info($id);
2887          78    100                         313         my @desc = map {
2888  ***     51            50                  402            $_ .= '.' unless m/\.$/;
2889          78                                307            $_;
2890                                                        } split(/\.\s{1,2}/, $info->{description} || '');
2891          51           100                  215         $desc[1] ||= "";  # Some desc have only 1 sentence.
2892  ***     51     50                         244         my $desc = $verbose == 1 ? $desc[0]             # terse
                    100                               
                    100                               
2893                                                                 : $verbose == 2 ? "$desc[0] $desc[1]"  # fuller
2894                                                                 : $verbose >  2 ? $info->{description} # complete
2895                                                                 :                 '';                  # none
2896          51                                443         print "# ", uc $info->{severity}, " $id $desc\n\n";
2897                                                     }
2898                                                  
2899           5                                 22      return;
2900                                                  }
2901                                                  
2902                                                  sub _d {
2903  ***      0                    0                    my ($package, undef, $line) = caller 0;
2904  ***      0      0                                  @_ = map { (my $temp = $_) =~ s/\n/\n# /g; $temp; }
      ***      0                                      
      ***      0                                      
2905  ***      0                                              map { defined $_ ? $_ : 'undef' }
2906                                                          @_;
2907  ***      0                                         print STDERR "# $package:$line $PID ", join(' ', @_), "\n";
2908                                                  }
2909                                                  
2910                                                  # ############################################################################
2911                                                  # Run the program.
2912                                                  # ############################################################################
2913                                                  if ( !caller ) { exit main(@ARGV); }
2914                                                  
2915                                                  1; # Because this is a module as well as a script.
2916                                                  
2917                                                  # ############################################################################
2918                                                  # Documentation
2919                                                  # ############################################################################
2920                                                  
2921                                                  =pod
2922                                                  
2923                                                  =head1 NAME
2924                                                  
2925                                                  mk-variable-advisor - Analyze MySQL variables and advise on possible problems.
2926                                                  
2927                                                  =head1 SYNOPSIS
2928                                                  
2929                                                    mk-variable-advisor localhost
2930                                                  
2931                                                    mk-variable-advisor --show-variables vars.txt
2932                                                  
2933                                                  =head1 RISKS
2934                                                  
2935                                                  The following section is included to inform users about the potential risks,
2936                                                  whether known or unknown, of using this tool.  The two main categories of risks
2937                                                  are those created by the nature of the tool (e.g. read-only tools vs. read-write
2938                                                  tools) and those created by bugs.
2939                                                  
2940                                                  mk-variable-advisor reads MySQL's configuration and examines it and is thus
2941                                                  very low risk.
2942                                                  
2943                                                  At the time of this release, we know of no bugs that could cause serious harm to
2944                                                  users.
2945                                                  
2946                                                  The authoritative source for updated information is always the online issue
2947                                                  tracking system.  Issues that affect this tool will be marked as such.  You can
2948                                                  see a list of such issues at the following URL:
2949                                                  L<http://www.maatkit.org/bugs/mk-variable-advisor>.
2950                                                  
2951                                                  See also L<"BUGS"> for more information on filing bugs and getting help.
2952                                                  
2953                                                  =head1 DESCRIPTION
2954                                                  
2955                                                  mk-variable-advisor examines variables.
2956                                                  
2957                                                  =head1 RULES
2958                                                  
2959                                                  =over
2960                                                  
2961                                                  =item auto_increment
2962                                                  
2963                                                  severity: note
2964                                                  
2965                                                  Are you trying to write to more than one server in a dual-master or
2966                                                  ring replication configuration?  This is potentially very dangerous and in
2967                                                  most cases is a serious mistake.  Most people's reasons for doing this are
2968                                                  actually not valid at all.
2969                                                  
2970                                                  =item concurrent_insert
2971                                                  
2972                                                  severity: note
2973                                                  
2974                                                  Holes (spaces left by deletes) in MyISAM tables might never be
2975                                                  reused.
2976                                                  
2977                                                  =item connect_timeout
2978                                                  
2979                                                  severity: note 
2980                                                  
2981                                                  A large value of this setting can create a denial of service
2982                                                  vulnerability.
2983                                                  
2984                                                  =item debug
2985                                                  
2986                                                  severity: crit
2987                                                  
2988                                                  Servers built with debugging capability should not be used in
2989                                                  production because of the large performance impact.
2990                                                  
2991                                                  =item delay_key_write
2992                                                  
2993                                                  severity: warn
2994                                                  
2995                                                  MyISAM index blocks are never flushed until necessary.  If there is
2996                                                  a server crash, data corruption on MyISAM tables can be much worse than
2997                                                  usual.
2998                                                  
2999                                                  =item flush
3000                                                  
3001                                                  severity: warn 
3002                                                  
3003                                                  This option might decrease performance greatly.
3004                                                  
3005                                                  =item flush_time
3006                                                  
3007                                                  severity: warn 
3008                                                  
3009                                                  This option might decrease performance greatly.
3010                                                  
3011                                                  =item have_bdb
3012                                                  
3013                                                  severity: note 
3014                                                  
3015                                                  The BDB engine is deprecated.  If you aren't using it, you should
3016                                                  disable it with the skip_bdb option.
3017                                                  
3018                                                  =item init_connect
3019                                                  
3020                                                  severity: note
3021                                                  
3022                                                  The init_connect option is enabled on this server.
3023                                                  
3024                                                  =item init_file
3025                                                  
3026                                                  severity: note 
3027                                                  
3028                                                  The init_file option is enabled on this server.
3029                                                  
3030                                                  =item init_slave
3031                                                  
3032                                                  severity: note
3033                                                  
3034                                                  The init_slave option is enabled on this server.
3035                                                  
3036                                                  =item innodb_additional_mem_pool_size
3037                                                  
3038                                                  severity: warn
3039                                                  
3040                                                  This variable generally doesn't need to be larger than 20MB.
3041                                                  
3042                                                  =item innodb_buffer_pool_size
3043                                                  
3044                                                  severity: warn 
3045                                                  
3046                                                  The InnoDB buffer pool size is unconfigured.  In a production
3047                                                  environment it should always be configured explicitly, and the default
3048                                                  10MB size is not good.
3049                                                  
3050                                                  =item innodb_checksums
3051                                                  
3052                                                  severity: warn 
3053                                                  
3054                                                  InnoDB checksums are disabled.  Your data is not protected from
3055                                                  hardware corruption or other errors!
3056                                                  
3057                                                  =item innodb_doublewrite
3058                                                  
3059                                                  severity: warn 
3060                                                  
3061                                                  InnoDB doublewrite is disabled.  Unless you use a filesystem that
3062                                                  protects against partial page writes, your data is not safe!
3063                                                  
3064                                                  =item innodb_fast_shutdown
3065                                                  
3066                                                  severity: warn
3067                                                  
3068                                                  InnoDB's shutdown behavior is not the default.  This can lead to
3069                                                  poor performance, or the need to perform crash recovery upon startup.
3070                                                  
3071                                                  =item innodb_flush_log_at_trx_commit-1
3072                                                  
3073                                                  severity: warn 
3074                                                  
3075                                                  InnoDB is not configured in strictly ACID mode.  If there
3076                                                  is a crash, some transactions can be lost.
3077                                                  
3078                                                  =item innodb_flush_log_at_trx_commit-2
3079                                                  
3080                                                  severity: warn
3081                                                  
3082                                                  Setting innodb_flush_log_at_trx_commit to 0 has no performance
3083                                                  benefits over setting it to 2, and more types of data loss are possible.
3084                                                  If you are trying to change it from 1 for performance reasons, you should
3085                                                  set it to 2 instead of 0.
3086                                                  
3087                                                  =item innodb_force_recovery
3088                                                  
3089                                                  severity: warn 
3090                                                  
3091                                                  InnoDB is in forced recovery mode!  This should be used only
3092                                                  temporarily when recovering from data corruption or other bugs, not for
3093                                                  normal usage.
3094                                                  
3095                                                  =item innodb_lock_wait_timeout
3096                                                  
3097                                                  severity: warn 
3098                                                  
3099                                                  This option has an unusually long value, which can cause
3100                                                  system overload if locks are not being released.
3101                                                  
3102                                                  =item innodb_log_buffer_size
3103                                                  
3104                                                  severity: warn 
3105                                                  
3106                                                  The InnoDB log buffer size generally should not be set larger than
3107                                                  16MB.  If you are doing large BLOB operations, InnoDB is not really a good
3108                                                  choice of engines anyway.
3109                                                  
3110                                                  =item innodb_log_file_size
3111                                                  
3112                                                  severity: warn 
3113                                                  
3114                                                  The InnoDB log file size is set to its default value, which is not
3115                                                  usable on production systems.
3116                                                  
3117                                                  =item innodb_max_dirty_pages_pct
3118                                                  
3119                                                  severity: note 
3120                                                  
3121                                                  The innodb_max_dirty_pages_pct is lower than the default.  This can
3122                                                  cause overly aggressive flushing and add load to the I/O system.
3123                                                  
3124                                                  =item flush_time
3125                                                  
3126                                                  severity: warn 
3127                                                  
3128                                                  This setting is likely to cause very bad performance every
3129                                                  flush_time seconds.
3130                                                  
3131                                                  =item key_buffer_size
3132                                                  
3133                                                  severity: warn 
3134                                                  
3135                                                  The key buffer size is unconfigured.  In a production
3136                                                  environment it should always be configured explicitly, and the default
3137                                                  8MB size is not good.
3138                                                  
3139                                                  =item large_pages
3140                                                  
3141                                                  severity: note 
3142                                                  
3143                                                  Large pages are enabled.
3144                                                  
3145                                                  =item locked_in_memory
3146                                                  
3147                                                  severity: note 
3148                                                  
3149                                                  The server is locked in memory with --memlock.
3150                                                  
3151                                                  =item log_warnings-1
3152                                                  
3153                                                  severity: note
3154                                                  
3155                                                  Log_warnings is disabled, so unusual events such as statements
3156                                                  unsafe for replication and aborted connections will not be logged to the
3157                                                  error log.
3158                                                  
3159                                                  =item log_warnings-2
3160                                                  
3161                                                  severity: note
3162                                                  
3163                                                  Log_warnings must be set greater than 1 to log unusual events such
3164                                                  as aborted connections.
3165                                                  
3166                                                  =item low_priority_updates
3167                                                  
3168                                                  severity: note 
3169                                                  
3170                                                  The server is running with non-default lock priority for updates.
3171                                                  This could cause update queries to wait unexpectedly for read queries.
3172                                                  
3173                                                  =item max_binlog_size
3174                                                  
3175                                                  severity: note 
3176                                                  
3177                                                  The max_binlog_size is smaller than the default of 1GB.
3178                                                  
3179                                                  =item max_connect_errors
3180                                                  
3181                                                  severity: note 
3182                                                  
3183                                                  max_connect_errors should probably be set as large as your platform
3184                                                  allows.
3185                                                  
3186                                                  =item max_connections
3187                                                  
3188                                                  severity: warn 
3189                                                  
3190                                                  If the server ever really has more than a thousand threads running,
3191                                                  then the system is likely to spend more time scheduling threads than
3192                                                  really doing useful work.  This variable's value should be considered in
3193                                                  light of your workload.
3194                                                  
3195                                                  =item myisam_repair_threads
3196                                                  
3197                                                  severity: note 
3198                                                  
3199                                                  myisam_repair_threads > 1 enables multi-threaded repair, which is
3200                                                  relatively untested and is still listed as beta-quality code in the
3201                                                  official documentation.
3202                                                  
3203                                                  =item old_passwords
3204                                                  
3205                                                  severity: warn 
3206                                                  
3207                                                  Old-style passwords are insecure.  They are sent in plain text
3208                                                  across the wire.
3209                                                  
3210                                                  =item optimizer_prune_level
3211                                                  
3212                                                  severity: warn 
3213                                                  
3214                                                  The optimizer will use an exhaustive search when planning complex
3215                                                  queries, which can cause the planning process to take a long time.
3216                                                  
3217                                                  =item port
3218                                                  
3219                                                  severity: note 
3220                                                  
3221                                                  The server is listening on a non-default port.
3222                                                  
3223                                                  =item query_cache_size-1
3224                                                  
3225                                                  severity: note 
3226                                                  
3227                                                  The query cache does not scale to large sizes and can cause unstable
3228                                                  performance when larger than 128MB, especially on multi-core machines.
3229                                                  
3230                                                  =item query_cache_size-2
3231                                                  
3232                                                  severity: warn 
3233                                                  
3234                                                  The query cache can cause severe performance problems when it is
3235                                                  larger than 256MB, especially on multi-core machines.
3236                                                  
3237                                                  =item read_buffer_size-1
3238                                                  
3239                                                  severity: note 
3240                                                  
3241                                                  The read_buffer_size variable should generally be left at its
3242                                                  default unless an expert determines it is necessary to change it.
3243                                                  
3244                                                  =item read_buffer_size-2
3245                                                  
3246                                                  severity: warn 
3247                                                  
3248                                                  The read_buffer_size variable should not be larger than 8MB.  It
3249                                                  should generally be left at its default unless an expert determines it is
3250                                                  necessary to change it.  Making it larger than 2MB can hurt performance
3251                                                  significantly, and can make the server crash, swap to death, or just
3252                                                  become extremely unstable.
3253                                                  
3254                                                  =item read_rnd_buffer_size-1
3255                                                  
3256                                                  severity: note 
3257                                                  
3258                                                  The read_rnd_buffer_size variable should generally be left at its
3259                                                  default unless an expert determines it is necessary to change it.
3260                                                  
3261                                                  =item read_rnd_buffer_size-2
3262                                                  
3263                                                  severity: warn 
3264                                                  
3265                                                  The read_rnd_buffer_size variable should not be larger than 4M.  It
3266                                                  should generally be left at its default unless an expert determines it is
3267                                                  necessary to change it.
3268                                                  
3269                                                  =item relay_log_space_limit
3270                                                  
3271                                                  severity: warn 
3272                                                  
3273                                                  Setting relay_log_space_limit is relatively rare, and could cause
3274                                                  an increased risk of previously unknown bugs in replication.
3275                                                  
3276                                                  =item slave_net_timeout
3277                                                  
3278                                                  severity: warn 
3279                                                  
3280                                                  This variable is set too high.  This is too long to wait before
3281                                                  noticing that the connection to the master has failed and retrying.  This
3282                                                  should probably be set to 60 seconds or less.  It is also a good idea to
3283                                                  use mk-heartbeat to ensure that the connection does not appear to time out
3284                                                  when the master is simply idle.
3285                                                  
3286                                                  =item slave_skip_errors
3287                                                  
3288                                                  severity: crit 
3289                                                  
3290                                                  You should not set this option.  If replication is having errors,
3291                                                  you need to find and resolve the cause of that; it is likely that your
3292                                                  slave's data is different from the master.  You can find out with
3293                                                  mk-table-checksum.
3294                                                  
3295                                                  =item sort_buffer_size-1
3296                                                  
3297                                                  severity: note 
3298                                                  
3299                                                  The sort_buffer_size variable should generally be left at its
3300                                                  default unless an expert determines it is necessary to change it.
3301                                                  
3302                                                  =item sort_buffer_size-2
3303                                                  
3304                                                  severity: note 
3305                                                  
3306                                                  The sort_buffer_size variable should generally be left at its
3307                                                  default unless an expert determines it is necessary to change it.  Making
3308                                                  it larger than a few MB can hurt performance significantly, and can make
3309                                                  the server crash, swap to death, or just become extremely unstable.
3310                                                  
3311                                                  =item sql_notes
3312                                                  
3313                                                  severity: note 
3314                                                  
3315                                                  This server is configured not to log Note level warnings to the
3316                                                  error log.
3317                                                  
3318                                                  =item sync_frm
3319                                                  
3320                                                  severity: warn 
3321                                                  
3322                                                  It is best to set sync_frm so that .frm files are flushed safely to
3323                                                  disk in case of a server crash.
3324                                                  
3325                                                  =item tx_isolation-1
3326                                                  
3327                                                  severity: note 
3328                                                  
3329                                                  This server's transaction isolation level is non-default.
3330                                                  
3331                                                  =item tx_isolation-2
3332                                                  
3333                                                  severity: warn 
3334                                                  
3335                                                  Most applications should use the default REPEATABLE-READ transaction
3336                                                  isolation level, or in a few cases READ-COMMITTED.
3337                                                  
3338                                                  =item expire_log_days
3339                                                  
3340                                                  severity: warn
3341                                                  
3342                                                  Binary logs are enabled, but automatic purging is not enabled.  If
3343                                                  you do not purge binary logs, your disk will fill up.  If you delete
3344                                                  binary logs externally to MySQL, you will cause unwanted behaviors.
3345                                                  Always ask MySQL to purge obsolete logs, never delete them externally.
3346                                                  
3347                                                  =item innodb_file_io_threads
3348                                                  
3349                                                  severity: note 
3350                                                  
3351                                                  This option is useless except on Windows.
3352                                                  
3353                                                  =item innodb_data_file_path
3354                                                  
3355                                                  severity: note 
3356                                                  
3357                                                  Auto-extending InnoDB files can consume a lot of disk space that is
3358                                                  very difficult to reclaim later.  Some people prefer to set
3359                                                  innodb_file_per_table and allocate a fixed-size file for ibdata1.
3360                                                  
3361                                                  =item innodb_flush_method
3362                                                  
3363                                                  severity: note 
3364                                                  
3365                                                  Most production database servers that use InnoDB should set
3366                                                  innodb_flush_method to O_DIRECT to avoid double-buffering, unless the I/O
3367                                                  system is very low performance.
3368                                                  
3369                                                  =item innodb_locks_unsafe_for_binlog
3370                                                  
3371                                                  severity: warn 
3372                                                  
3373                                                  This option makes point-in-time recovery from binary logs, and
3374                                                  replication, untrustworthy if statement-based logging is used.
3375                                                  
3376                                                  =item innodb_support_xa
3377                                                  
3378                                                  severity: warn 
3379                                                  
3380                                                  MySQL's internal XA transaction support between InnoDB and the
3381                                                  binary log is disabled.  The binary log might not match InnoDB's state
3382                                                  after crash recovery.
3383                                                  
3384                                                  =item log_bin
3385                                                  
3386                                                  severity: warn 
3387                                                  
3388                                                  Binary logging is disabled, so point-in-time recovery and
3389                                                  replication are not possible.
3390                                                  
3391                                                  =item log_output
3392                                                  
3393                                                  severity: warn 
3394                                                  
3395                                                  Directing log output to tables has a high performance impact.
3396                                                  
3397                                                  =item max_relay_log_size
3398                                                  
3399                                                  severity: note 
3400                                                  
3401                                                  A custom max_relay_log_size is defined.
3402                                                  
3403                                                  =item myisam_recover_options
3404                                                  
3405                                                  severity: warn 
3406                                                  
3407                                                  myisam_recover_options should be set to some value such as
3408                                                  BACKUP,FORCE to ensure that table corruption is noticed.
3409                                                  
3410                                                  =item storage_engine
3411                                                  
3412                                                  severity: note 
3413                                                  
3414                                                  The server is using a non-standard storage engine as default.
3415                                                  
3416                                                  =item sync_binlog
3417                                                  
3418                                                  severity: warn 
3419                                                  
3420                                                  Binary logging is enabled, but sync_binlog isn't configured so that
3421                                                  every transaction is flushed the binary log for durability.
3422                                                  
3423                                                  =item tmp_table_size
3424                                                  
3425                                                  severity: note 
3426                                                  
3427                                                  The effective minimum size of in-memory implicit temporary tables
3428                                                  used internally during query execution is min(tmp_table_size,
3429                                                  max_heap_table_size), so max_heap_table_size should be at least as large
3430                                                  as tmp_table_size.
3431                                                  
3432                                                  =item old mysql version
3433                                                  
3434                                                  severity: warn
3435                                                  
3436                                                  These are the recommended minimum version for each major release: 3.23, 4.1.20, 5.0.37, 5.1.30.  
3437                                                  
3438                                                  =item end-of-life mysql version
3439                                                  
3440                                                  severity: note
3441                                                  
3442                                                  Every release older than 5.1 is now officially end-of-life.
3443                                                  
3444                                                  =back
3445                                                  
3446                                                  =head1 OPTIONS
3447                                                  
3448                                                  =over
3449                                                  
3450                                                  =item --ask-pass
3451                                                  
3452                                                  Prompt for a password when connecting to MySQL.
3453                                                  
3454                                                  =item --charset
3455                                                  
3456                                                  short form: -A; type: string
3457                                                  
3458                                                  Default character set.  If the value is utf8, sets Perl's binmode on
3459                                                  STDOUT to utf8, passes the mysql_enable_utf8 option to DBD::mysql, and
3460                                                  runs SET NAMES UTF8 after connecting to MySQL.  Any other value sets
3461                                                  binmode on STDOUT without the utf8 layer, and runs SET NAMES after
3462                                                  connecting to MySQL.
3463                                                  
3464                                                  =item --config
3465                                                  
3466                                                  type: Array
3467                                                  
3468                                                  Read this comma-separated list of config files; if specified, this must be the
3469                                                  first option on the command line.
3470                                                  
3471                                                  =item --[no]continue-on-error
3472                                                  
3473                                                  default: yes
3474                                                  
3475                                                  Continue working even if there is an error.
3476                                                  
3477                                                  =item --daemonize
3478                                                  
3479                                                  Fork to the background and detach from the shell.  POSIX
3480                                                  operating systems only.
3481                                                  
3482                                                  =item --defaults-file
3483                                                  
3484                                                  short form: -F; type: string
3485                                                  
3486                                                  Only read mysql options from the given file.  You must give an absolute
3487                                                  pathname.
3488                                                  
3489                                                  =item --help
3490                                                  
3491                                                  Show help and exit.
3492                                                  
3493                                                  =item --host
3494                                                  
3495                                                  short form: -h; type: string
3496                                                  
3497                                                  Connect to host.
3498                                                  
3499                                                  =item --ignore-rules
3500                                                  
3501                                                  type: hash
3502                                                  
3503                                                  Ignore these rule IDs.
3504                                                  
3505                                                  Specify a comma-separated list of rule IDs (e.g. LIT.001,RES.002,etc.)
3506                                                  to ignore.
3507                                                  
3508                                                  =item --password
3509                                                  
3510                                                  short form: -p; type: string
3511                                                  
3512                                                  Password to use when connecting.
3513                                                  
3514                                                  =item --pid
3515                                                  
3516                                                  type: string
3517                                                  
3518                                                  Create the given PID file when daemonized.  The file contains the process
3519                                                  ID of the daemonized instance.  The PID file is removed when the
3520                                                  daemonized instance exits.  The program checks for the existence of the
3521                                                  PID file when starting; if it exists and the process with the matching PID
3522                                                  exists, the program exits.
3523                                                  
3524                                                  =item --port
3525                                                  
3526                                                  short form: -P; type: int
3527                                                  
3528                                                  Port number to use for connection.
3529                                                  
3530                                                  =item --set-vars
3531                                                  
3532                                                  type: string; default: wait_timeout=10000
3533                                                  
3534                                                  Set these MySQL variables.  Immediately after connecting to MySQL, this string
3535                                                  will be appended to SET and executed.
3536                                                  
3537                                                  =item --show-variables
3538                                                  
3539                                                  type: string
3540                                                  
3541                                                  Read C<SHOW VARIABLES> from this file.
3542                                                  
3543                                                  =item --socket
3544                                                  
3545                                                  short form: -S; type: string
3546                                                  
3547                                                  Socket file to use for connection.
3548                                                  
3549                                                  =item --user
3550                                                  
3551                                                  short form: -u; type: string
3552                                                  
3553                                                  User for login if not current user.
3554                                                  
3555                                                  =item --verbose
3556                                                  
3557                                                  short form: -v; cumulative: yes; default: 1
3558                                                  
3559                                                  Increase verbosity of output.  At the default level of verbosity, the
3560                                                  program prints only the first sentence of each rule's description.  At
3561                                                  higher levels, the program prints more of the description.
3562                                                  
3563                                                  =item --version
3564                                                  
3565                                                  Show version and exit.
3566                                                  
3567                                                  =back
3568                                                  
3569                                                  =head1 DSN OPTIONS
3570                                                  
3571                                                  These DSN options are used to create a DSN.  Each option is given like
3572                                                  C<option=value>.  The options are case-sensitive, so P and p are not the
3573                                                  same option.  There cannot be whitespace before or after the C<=> and
3574                                                  if the value contains whitespace it must be quoted.  DSN options are
3575                                                  comma-separated.  See the L<maatkit> manpage for full details.
3576                                                  
3577                                                  =over
3578                                                  
3579                                                  =item * A
3580                                                  
3581                                                  dsn: charset; copy: yes
3582                                                  
3583                                                  Default character set.
3584                                                  
3585                                                  =item * D
3586                                                  
3587                                                  dsn: database; copy: yes
3588                                                  
3589                                                  Default database.
3590                                                  
3591                                                  =item * F
3592                                                  
3593                                                  dsn: mysql_read_default_file; copy: yes
3594                                                  
3595                                                  Only read default options from the given file
3596                                                  
3597                                                  =item * h
3598                                                  
3599                                                  dsn: host; copy: yes
3600                                                  
3601                                                  Connect to host.
3602                                                  
3603                                                  =item * p
3604                                                  
3605                                                  dsn: password; copy: yes
3606                                                  
3607                                                  Password to use when connecting.
3608                                                  
3609                                                  =item * P
3610                                                  
3611                                                  dsn: port; copy: yes
3612                                                  
3613                                                  Port number to use for connection.
3614                                                  
3615                                                  =item * S
3616                                                  
3617                                                  dsn: mysql_socket; copy: yes
3618                                                  
3619                                                  Socket file to use for connection.
3620                                                  
3621                                                  =item * u
3622                                                  
3623                                                  dsn: user; copy: yes
3624                                                  
3625                                                  User for login if not current user.
3626                                                  
3627                                                  =back
3628                                                  
3629                                                  =head1 DOWNLOADING
3630                                                  
3631                                                  You can download Maatkit from Google Code at
3632                                                  L<http://code.google.com/p/maatkit/>, or you can get any of the tools
3633                                                  easily with a command like the following:
3634                                                  
3635                                                     wget http://www.maatkit.org/get/toolname
3636                                                     or
3637                                                     wget http://www.maatkit.org/trunk/toolname
3638                                                  
3639                                                  Where C<toolname> can be replaced with the name (or fragment of a name) of any
3640                                                  of the Maatkit tools.  Once downloaded, they're ready to run; no installation is
3641                                                  needed.  The first URL gets the latest released version of the tool, and the
3642                                                  second gets the latest trunk code from Subversion.
3643                                                  
3644                                                  =head1 ENVIRONMENT
3645                                                  
3646                                                  The environment variable C<MKDEBUG> enables verbose debugging output in all of
3647                                                  the Maatkit tools:
3648                                                  
3649                                                     MKDEBUG=1 mk-....
3650                                                  
3651                                                  =head1 SYSTEM REQUIREMENTS
3652                                                  
3653                                                  You need the following Perl modules: DBI and DBD::mysql.
3654                                                  
3655                                                  =head1 BUGS
3656                                                  
3657                                                  For list of known bugs see L<http://www.maatkit.org/bugs/mk-variable-advisor>.
3658                                                  
3659                                                  Please use Google Code Issues and Groups to report bugs or request support:
3660                                                  L<http://code.google.com/p/maatkit/>.  You can also join #maatkit on Freenode to
3661                                                  discuss Maatkit.
3662                                                  
3663                                                  Please include the complete command-line used to reproduce the problem you are
3664                                                  seeing, the version of all MySQL servers involved, the complete output of the
3665                                                  tool when run with L<"--version">, and if possible, debugging output produced by
3666                                                  running with the C<MKDEBUG=1> environment variable.
3667                                                  
3668                                                  =head1 COPYRIGHT, LICENSE AND WARRANTY
3669                                                  
3670                                                  This program is copyright 2009-@CURRENTYEAR@ Percona Inc.
3671                                                  Feedback and improvements are welcome.
3672                                                  
3673                                                  THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
3674                                                  WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
3675                                                  MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
3676                                                  
3677                                                  This program is free software; you can redistribute it and/or modify it under
3678                                                  the terms of the GNU General Public License as published by the Free Software
3679                                                  Foundation, version 2; OR the Perl Artistic License.  On UNIX and similar
3680                                                  systems, you can issue `man perlgpl' or `man perlartistic' to read these
3681                                                  licenses.
3682                                                  
3683                                                  You should have received a copy of the GNU General Public License along with
3684                                                  this program; if not, write to the Free Software Foundation, Inc., 59 Temple
3685                                                  Place, Suite 330, Boston, MA  02111-1307  USA.
3686                                                  
3687                                                  =head1 AUTHOR
3688                                                  
3689                                                  Baron Schwartz, Daniel Nichter
3690                                                  
3691                                                  =head1 ABOUT MAATKIT
3692                                                  
3693                                                  This tool is part of Maatkit, a toolkit for power users of MySQL.  Maatkit
3694                                                  was created by Baron Schwartz; Baron and Daniel Nichter are the primary
3695                                                  code contributors.  Both are employed by Percona.  Financial support for
3696                                                  Maatkit development is primarily provided by Percona and its clients. 
3697                                                  
3698                                                  =head1 VERSION
3699                                                  
3700                                                  This manual page documents Ver @VERSION@ Distrib @DISTRIB@ $Revision: 6697 $.
3701                                                  
3702                                                  =cut


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
51    ***     50      0     10   unless $args{$arg}
121   ***     50      0      5   unless open my $fh, '<', $file
124   ***     50      5      0   if ($contents =~ /^=head1 DSN OPTIONS/m)
134   ***     50     80      0   if ($val)
135   ***     50      0     40   $val eq 'no' ? :
             100     40     40   $val eq 'yes' ? :
183   ***     50      0     10   unless open my $fh, '<', $file
191          100   5610     10   unless $para =~ /^=head1 $$self{'head1'}/
196          100     10      5   if $para =~ /^=over/
197   ***     50      5      0   if $$self{'skip_rules'}
205   ***     50      0     10   unless $para
208          100    130     10   if (my($option) = $para =~ /^=item $$self{'item'}/)
215          100    110     20   if ($para =~ /: /) { }
219   ***     50      0    200   unless $$self{'attributes'}{$attrib}
223          100     40     70   if ($attribs{'short form'})
239   ***     50      0    130   if $para =~ /^=item/
241          100      5    125   if (my($base_option) = $option =~ /^\[no\](.*)/)
246          100     15    115   $attribs{'default'} ? :
      ***     50      0    130   $attribs{'group'} ? :
254   ***     50      0    155   unless $para
255          100     10    145   if ($para =~ /^=head1/)
259          100    130     15   if $para =~ /^=item /
263   ***     50      0     10   unless @specs
274   ***     50     90      0   if (ref $opt) { }
279   ***     50      0     90   if (not $long)
284   ***     50      0     90   if exists $$self{'opts'}{$long}
287   ***     50      0     90   if (length $long == 1)
292          100     40     50   if ($short) { }
293   ***     50      0     40   if exists $$self{'short_opts'}{$short}
302          100      5     85   $$opt{'spec'} =~ /!/ ? :
303          100      5     85   $$opt{'spec'} =~ /\+/ ? :
304   ***     50      0     90   $$opt{'desc'} =~ /required/ ? :
317          100     10     80   if $type and $type =~ /[HhAadzm]/
319          100     15     75   if (my($def) = $$opt{'desc'} =~ /default\b(?: ([^)]+))?/)
320   ***     50     15      0   defined $def ? :
324          100      5     85   if ($long eq 'config')
328   ***     50      0     90   if (my($dis) = $$opt{'desc'} =~ /(disables .*)/)
341   ***      0      0      0   if ($opt =~ /mutually exclusive|one and only one/)
346   ***      0      0      0   if ($opt =~ /at least one|one and only one/)
351   ***      0      0      0   if ($opt =~ /default to/)
356   ***      0      0      0   if ($opt =~ /restricted to option groups/)
366   ***      0      0      0   unless $rule_ok
383   ***      0      0      0   unless exists $$self{'opts'}{$long}
407   ***      0      0      0   unless exists $$self{'opts'}{$long}
427   ***      0      0      0   exists $$self{'short_opts'}{$opt} ? :
      ***     50      8      0   exists $$self{'opts'}{$opt} ? :
432          100      3      5   if ($$opt{'is_cumulative'}) { }
447   ***     50      0     70   $$self{'opts'}{$long}{'is_cumulative'} ? :
             100     20     70   exists $$self{'defaults'}{$long} ? :
456   ***     50      0      5   if (@ARGV and $ARGV[0] eq '--config')
460   ***     50      5      0   if ($self->has('config'))
466   ***     50     20      0   if ($EVAL_ERROR)
467   ***     50      0     20   $self->got('config') ? :
482   ***     50      0      5   unless GetOptions map({$$_{'spec'}, sub {
	$self->_set_option(@_);
}
;} grep({$$_{'long'} ne 'config';} values %{$$self{'opts'};}))
485   ***     50      0      5   if (exists $$self{'opts'}{'version'} and $$self{'opts'}{'version'}{'got'})
486   ***      0      0      0   unless printf "%s  Ver %s Distrib %s Changeset %s\n", $$self{'program_name'}, $main::VERSION, $main::DISTRIB, $main::SVN_REV
492   ***     50      0      5   if (@ARGV and $$self{'strict'})
498   ***      0      0      0   if (@set > 1)
509   ***      0      0      0   if (@set == 0)
528   ***     50      0     90   unless $long
530          100      7     83   if ($$opt{'got'}) { }
      ***     50      0     83   elsif ($$opt{'is_required'}) { }
531   ***     50      0      7   if (exists $$self{'disables'}{$long})
538   ***     50      0      7   if (exists $$self{'allowed_groups'}{$long})
550   ***      0      0      0   if $restricted_opt eq $long
551   ***      0      0      0   if $$self{'opts'}{$restricted_opt}{'got'}
556   ***      0      0      0   if (@restricted_opts)
558   ***      0      0      0   if (@restricted_opts == 1) { }
579   ***     50     90      0   if ($$opt{'parsed'}) { }
587   ***     50      0      5   if @long == $long_last
597   ***     50      0     90   unless $opt
599          100     30     60   if (not $$opt{'type'})
606   ***     50      0     60   if ($val and $$opt{'type'} eq 'm') { }
      ***     50      0     60   elsif ($val and $$opt{'type'} eq 'd') { }
      ***     50      0     60   elsif ($val and $$opt{'type'} eq 'z') { }
             100      1     59   elsif ($$opt{'type'} eq 'H' or defined $val and $$opt{'type'} eq 'h') { }
             100      5     54   elsif ($$opt{'type'} eq 'A' or defined $val and $$opt{'type'} eq 'a') { }
609   ***      0      0      0   if (not $suffix)
615   ***      0      0      0   if ($suffix =~ /[smhd]/) { }
616   ***      0      0      0   $suffix eq 'h' ? :
      ***      0      0      0   $suffix eq 'm' ? :
      ***      0      0      0   $suffix eq 's' ? :
631   ***      0      0      0   if ($from_key)
633   ***      0      0      0   if ($$self{'opts'}{$from_key}{'parsed'}) { }
666          100      7     43   length $opt == 1 ? :
667   ***     50      0     50   unless $long and exists $$self{'opts'}{$long}
674   ***     50      0     20   length $opt == 1 ? :
675   ***     50      0     20   unless $long and exists $$self{'opts'}{$long}
682          100      8      5   length $opt == 1 ? :
683          100     12      1   defined $long ? :
688   ***      0      0      0   length $opt == 1 ? :
689   ***      0      0      0   unless $long and exists $$self{'opts'}{$long}
716   ***      0      0      0   unless $ENV{'DONT_BREAK_LINES'}
724   ***     50      0      5   if ($$self{'opts'}{'help'}{'got'}) { }
      ***     50      0      5   elsif (scalar @{$$self{'errors'};}) { }
725   ***      0      0      0   unless print $self->print_usage
729   ***      0      0      0   unless print $self->print_errors
738   ***      0      0      0   if (my(@errors) = @{$$self{'errors'};})
747   ***      0      0      0   unless $$self{'got_opts'}
750   ***      0      0      0   $$_{'is_negatable'} ? :
754   ***      0      0      0   $$self{'opts'}{$_}{'is_negatable'} ? :
770   ***      0      0      0   $group eq 'default' ? :
776   ***      0      0      0   $$opt{'is_negatable'} ? :
779   ***      0      0      0   if ($$opt{'type'} and $$opt{'type'} eq 'm')
788   ***      0      0      0   if ($short) { }
797   ***      0      0      0   if (my(@rules) = @{$$self{'rules'};})
801   ***      0      0      0   if ($$self{'DSNParser'})
809   ***      0      0      0   $val ? :
      ***      0      0      0   $type =~ /A|a/ ? :
      ***      0      0      0   $type =~ /H|h/ ? :
      ***      0      0      0   $type eq 'd' ? :
      ***      0      0      0   !defined($val) ? :
      ***      0      0      0   $bool ? :
821   ***      0      0      0   if ref $_[0] eq 'OptionParser'
824   ***      0      0      0   unless print $prompt
832   ***      0      0      0   unless print "\n"
835   ***      0      0      0   if ($EVAL_ERROR)
857   ***     50     20      0   unless open my $fh, '<', $filename
865   ***      0      0      0   if $line =~ /^\s*(?:\#|\;|$)/
868   ***      0      0      0   if ($line eq '--')
873   ***      0      0      0   if ($parse and my($opt, $arg) = $line =~ /^\s*([^=\s]+?)(?:\s*=\s*(.*?)\s*)?$/) { }
      ***      0      0      0   elsif ($line =~ /./) { }
891   ***      0      0      0   unless open my $fh, '<', $file
895   ***      0      0      0   unless $para =~ /^=pod$/m
899   ***      0      0      0   unless $para =~ /$regex/
904   ***      0      0      0   unless close $fh
918   ***      0      0      0   $ref eq 'ARRAY' ? :
      ***      0      0      0   $ref eq 'HASH' ? :
      ***      0      0      0   !$ref ? :
934   ***      0      0      0   if (lc($val || '') eq 'null')
942   ***      0      0      0   if (defined $num) { }
943   ***      0      0      0   if ($factor)
959          100     40     50   $$attribs{'short form'} ? :
             100      5     85   $$attribs{'negatable'} ? :
             100      5     85   $$attribs{'cumulative'} ? :
             100     60     30   $$attribs{'type'} ? :
968   ***      0      0      0   defined $_ ? :
1007  ***     50      0      6   unless $args{$arg}
1013  ***     50      0     49   if (not $$opt{'key'} or not $$opt{'desc'})
1033         100      5      7   if (@_ > 2)
1042         100      1      2   if (not $dsn)
1054  ***     50      5      0   if (my($prop_key, $prop_val) = $dsn_part =~ /^(.)=(.*)$/) { }
1066  ***     50      0     17   if (not defined $final_props{$key} and defined $$prev{$key} and $$opts{$key}{'copy'})
1072         100     12      5   if (not defined $final_props{$key})
1079  ***     50      0      5   unless exists $$opts{$key}
1084  ***     50      0      2   if (my $required = $self->prop('required'))
1086  ***      0      0      0   unless $final_props{$key}
1098  ***     50      0      1   unless ref $o eq 'OptionParser'
1101         100      7      1   if $o->has($_)
1111  ***      0      0      0   unless ref $dsn
1112  ***      0      0      0   $props ? :
1113  ***      0      0      0   $_ eq 'p' ? :
1114  ***      0      0      0   if defined $$dsn{$_}
1115  ***      0      0      0   unless not $props
1128  ***      0      0      0   $opts{$key}{'copy'} ? :
1142  ***     50      0      2   if ($driver eq 'Pg') { }
1174  ***     50      0      2   $cxn_string =~ /charset=utf8/ ? :
1183  ***     50      0      2   if ($$opts{'mysql_use_result'})
1187  ***     50      0      2   if (not $have_dbi)
1206  ***     50      2      0   if ($cxn_string =~ /mysql/i)
1213  ***     50      0      2   $sql_mode ? :
1220  ***     50      0      2   if (my($charset) = $cxn_string =~ /charset=(\w+)/)
1225  ***      0      0      0   if ($charset eq 'utf8') { }
1226  ***      0      0      0   unless binmode STDOUT, ':utf8'
1230  ***      0      0      0   unless binmode STDOUT
1234         100      1      1   if ($self->prop('set-vars'))
1241  ***     50      0      2   if (not $dbh and $EVAL_ERROR)
1243  ***      0      0      0   if ($EVAL_ERROR =~ /not a compiled character set|character set utf8/) { }
      ***      0      0      0   elsif ($EVAL_ERROR =~ m[locate DBD/mysql]i) { }
1256  ***      0      0      0   if (not $tries)
1278  ***      0      0      0   if (my($host) = ($$dbh{'mysql_hostinfo'} || '') =~ /^(\w+) via/)
1295  ***      0      0      0   ($$thing{'Type'} || '') eq 'st' ? :
      ***      0      0      0   unless printf "# Active %sh: %s %s %s\n", $$thing{'Type'} || 'undef', "\t" x $level, $thing, ($$thing{'Type'} || '') eq 'st' ? $$thing{'Statement'} || '' : ''
1305  ***      0      0      0   unless $dsn_1
1306  ***      0      0      0   unless $dsn_2
1310  ***      0      0      0   if ($args{'overwrite'}) { }
1311  ***      0      0      0   defined $$dsn_1{$key} ? :
1314  ***      0      0      0   defined $$dsn_2{$key} ? :
1323  ***      0      0      0   defined $_ ? :
1366  ***      0      0      0   if (not $$self{$dbh})
1370  ***      0      0      0   $$self{$dbh} ge $self->parse($target) ? :
1377         100      4      1   unless $dbh
1388  ***     50      1      0   if ($innodb)
1390  ***     50      1      0   if ($$innodb{'support'} =~ /YES|DEFAULT/i) { }
1393  ***     50      1      0   !$vars ? :
1407  ***      0      0      0   defined $_ ? :
1441  ***      0      0      0   unless $args{$arg}
1444  ***      0      0      0   $o->has('log') ? :
      ***      0      0      0   $o->has('pid') ? :
1460  ***      0      0      0   unless defined(my $pid = fork)
1461  ***      0      0      0   if ($pid)
1469  ***      0      0      0   unless POSIX::setsid()
1470  ***      0      0      0   unless chdir '/'
1476  ***      0      0      0   if (-t STDIN)
1478  ***      0      0      0   unless open STDIN, '/dev/null'
1482  ***      0      0      0   if ($$self{'log_file'}) { }
1484  ***      0      0      0   unless open STDOUT, '>>', $$self{'log_file'}
1488  ***      0      0      0   unless open STDERR, '>&STDOUT'
1492  ***      0      0      0   if (-t STDOUT)
1494  ***      0      0      0   unless open STDOUT, '>', '/dev/null'
1497  ***      0      0      0   if (-t STDERR)
1499  ***      0      0      0   unless open STDERR, '>', '/dev/null'
1510  ***      0      0      0   $self ? :
1512  ***      0      0      0   if ($PID_file and -f $PID_file) { }
1515  ***      0      0      0   if $EVAL_ERROR
1517  ***      0      0      0   if ($pid) { }
1519  ***      0      0      0   if ($pid_is_alive) { }
1541  ***      0      0      0   if (exists $$self{'child'})
1553  ***      0      0      0   if (not $PID_file)
1560  ***      0      0      0   unless open my $PID_FH, '>', $PID_file
1562  ***      0      0      0   unless print $PID_FH $PID
1564  ***      0      0      0   unless close $PID_FH
1573  ***      0      0      0   if ($$self{'PID_file'} and -f $$self{'PID_file'}) { }
1574  ***      0      0      0   unless unlink $$self{'PID_file'}
1587  ***      0      0      0   if ($$self{'PID_owner'} || 0) == $PID
1594  ***      0      0      0   defined $_ ? :
1654  ***     50      5      0   $section ? :
1659  ***     50      0      5   unless $file
1661  ***     50      0      5   unless open my $fh, '<', $file
1666  ***     50      0      5   unless $para
1669         100    570   1045   if ($para =~ /^=(head|item|over|back)/) { }
1688         100     15    555   if ($cmd eq 'head1' and $parse_items_from{$name}) { }
             100     15    540   elsif ($cmd eq 'over') { }
             100    465     75   elsif ($cmd eq 'item') { }
      ***     50      0     75   elsif ($cmd eq '=back') { }
1700  ***     50    465      0   if ($item) { }
1726         100    125    920   unless $$self{'current_section'} and $$self{'current_item'}
1733         100    405    515   if ($para =~ /^\w+[:;] /) { }
1737  ***     50    450      0   defined $val ? :
1757  ***      0      0      0   defined $_ ? :
1801         100      4   1080   unless @cols
1810  ***      0      0      0   unless @cols
1826  ***     50      4      0   if ($text =~ /^\+---/m) { }
      ***      0      0      0   elsif ($text =~ /^id\tselect_type\t/m) { }
      ***      0      0      0   elsif ($text =~ /\*\*\* \d+\. row/) { }
1849  ***     50      0      4   if ($$self{'value_for'})
1852  ***      0      0      0   if exists $$self{'value_for'}{$$result_set{$key}}
1867         100   1080      4   if ($row) { }
1886  ***      0      0      0   defined $_ ? :
1916  ***     50      0      5   unless $args{$arg}
1931  ***     50      0      5   unless $advisor
1939         100      2    328   if ($$self{'ignore_rules'}{"$id"})
1943  ***     50      0    328   if defined $$self{'rule_index_for'}{$id}
1954  ***     50      0      5   unless $advisor
1959  ***     50      0    328   if ($$self{'ignore_rules'}{"$id"})
1963  ***     50      0    328   unless $rule_info
1964  ***     50      0    328   if $$self{'rule_info'}{$id}
1980  ***     50      0    328   if ($match_type eq 'pos') { }
      ***     50    328      0   elsif ($match_type eq 'bool') { }
1981  ***      0      0      0   if (defined $match)
1988         100     51    277   if ($match)
1994  ***     50      0    328   if ($EVAL_ERROR)
2003  ***     50      0     51   unless $id
2009  ***      0      0      0   defined $_ ? :
2039  ***     50      0      5   unless $args{$arg}
2052  ***     50      0     10   unless $args{$arg}
2062  ***     50      0    330   unless $$rule{'desc'}
2063  ***     50      0    330   unless $$rule{'severity'}
2064  ***     50      0    330   if exists $$self{'rule_info'}{$rule_id}
2074  ***     50      0    330   unless $$self{'rule_info'}{$$rule{'id'}}
2083  ***     50      0    328   unless $id
2095  ***      0      0      0   defined $_ ? :
2138  ***     50      0      5   unless defined $$vars{'auto_increment_increment'} and defined $$vars{'auto_increment_offset'}
2140  ***     50      0      5   $$vars{'auto_increment_increment'} != 1 || $$vars{'auto_increment_offset'} != 1 ? :
2162  ***     50      0      5   $args{'variables'}{'debug'} ? :
2197  ***     50      0      5   $args{'variables'}{'init_connect'} ? :
2204  ***     50      0      5   $args{'variables'}{'init_file'} ? :
2211  ***     50      0      5   $args{'variables'}{'init_slave'} ? :
2461         100      1      4   $args{'variables'}{'slave_skip_errors'} ? :
2505  ***     50      0      5   _var_sneq($args{'variables'}{'tx_isolation'}, 'REPEATABLE-READ') && _var_sneq($args{'variables'}{'tx_isolation'}, 'READ-COMMITTED') ? :
2514  ***     50      0      5   _var_eq($args{'variables'}{'expire_log_days'}, 0) && $args{'variables'}{'log_bin'} ? :
2522  ***     50      0      5   _var_neq($args{'variables'}{'innodb_file_io_threads'}, 4) && $OSNAME ne 'MSWin32' ? :
2531  ***     50      5      0   ($args{'variables'}{'innodb_data_file_path'} || '') =~ /autoextend/ ? :
2539  ***     50      5      0   _var_sneq($args{'variables'}{'innodb_flush_method'}, 'O_DIRECT') && $OSNAME ne 'MSWin32' ? :
2547  ***     50      0      5   _var_seq($args{'variables'}{'innodb_locks_unsafe_for_binlog'}, 'ON') && $args{'variables'}{'log_bin'} ? :
2555  ***     50      0      5   _var_sneq($args{'variables'}{'innodb_support_xa'}, 'ON') && $args{'variables'}{'log_bin'} ? :
2570  ***     50      0      5   ($args{'variables'}{'log_output'} || '') =~ /TABLE/i ? :
2577  ***     50      0      5   _var_gt($args{'variables'}{'max_relay_log_size'}, 0) && _var_lt($args{'variables'}{'max_relay_log_size'}, 1073741824) ? :
2586  ***     50      4      0   _var_seq($args{'variables'}{'myisam_recover_options'}, 'OFF') || _var_seq($args{'variables'}{'myisam_recover_options'}, 'DEFAULT') ? :
2595  ***     50      0      5   unless $args{'variables'}{'storage_engine'}
2596  ***     50      0      5   !($args{'variables'}{'storage_engine'} =~ /InnoDB|MyISAM/i) ? :
2604  ***     50      4      0   $args{'variables'}{'log_bin'} && (_var_eq($args{'variables'}{'sync_binlog'}, 0) || _var_gt($args{'variables'}{'sync_binlog'}, 1)) ? :
2613         100      1      4   ($args{'variables'}{'tmp_table_size'} || 0) > ($args{'variables'}{'max_heap_table_size'} || 0) ? :
2622  ***     50      0      5   unless $mysql_version
2624  ***     50      0      5   if ($major eq '003') { }
      ***     50      0      5   elsif ($major eq '004') { }
      ***     50      5      0   elsif ($major eq '005') { }
2625  ***      0      0      0   $mysql_version lt '003023000' ? :
2628  ***      0      0      0   $mysql_version lt '004001020' ? :
2631         100      1      4   if ($minor eq '000') { }
      ***     50      4      0   elsif ($minor eq '001') { }
2632  ***     50      0      1   $mysql_version lt '005000037' ? :
2635  ***     50      0      4   $mysql_version lt '005001030' ? :
2651  ***     50      0      5   unless $mysql_version
2652         100      1      4   $mysql_version lt '005001000' ? :
2659  ***     50      0     85   unless defined $var
2660         100      5     80   $var > $val ? :
2665  ***     50      0     15   unless defined $var
2666  ***     50      0     15   $var < $val ? :
2671         100      5     74   unless defined $var
2672         100     49     25   $var == $val ? :
2677  ***     50      0     35   unless defined $var
2678         100     30      5   _var_eq($var, $val) ? :
2683         100      4     85   unless defined $var
2684         100     44     41   $var eq $val ? :
2689  ***     50      0     40   unless defined $var
2690         100     35      5   _var_seq($var, $val) ? :
2695  ***      0      0      0   defined $_ ? :
2744  ***     50      5      0   if (not $o->get('help'))
2745  ***     50      0      5   if (@ARGV == 0 and not $o->get('show-variables'))
2789         100      1      4   if (@ARGV)
2801  ***     50      0      5   if ($o->get('daemonize')) { }
      ***     50      0      5   elsif ($o->get('pid')) { }
2854         100      1      4   if ($dbh) { }
      ***     50      4      0   elsif (my $file = $o->get('show-variables')) { }
2863  ***     50      0      4   unless open my $fh, '<', $file
2878  ***     50      0     15   unless $args{$arg}
2883  ***     50      0      5   unless scalar @$advice
2887         100     27     51   unless /\.$/
2892  ***     50     10      0   $verbose > 2 ? :
             100     10     10   $verbose == 2 ? :
             100     31     20   $verbose == 1 ? :
2904  ***      0      0      0   defined $_ ? :


Conditions
----------

and 3 conditions

line  err      %     !l  l&&!r   l&&r   expr
----- --- ------ ------ ------ ------   ----
317          100     30     50     10   $type and $type =~ /[HhAadzm]/
456   ***     33      0      5      0   @ARGV and $ARGV[0] eq '--config'
485   ***     33      0      5      0   exists $$self{'opts'}{'version'} and $$self{'opts'}{'version'}{'got'}
492   ***     66      4      1      0   @ARGV and $$self{'strict'}
606   ***     66     45     15      0   $val and $$opt{'type'} eq 'm'
      ***     66     45     15      0   $val and $$opt{'type'} eq 'd'
      ***     66     45     15      0   $val and $$opt{'type'} eq 'z'
             100     45     14      1   defined $val and $$opt{'type'} eq 'h'
      ***     66     45      9      0   defined $val and $$opt{'type'} eq 'a'
667   ***     33      0      0     50   $long and exists $$self{'opts'}{$long}
675   ***     33      0      0     20   $long and exists $$self{'opts'}{$long}
689   ***      0      0      0      0   $long and exists $$self{'opts'}{$long}
779   ***      0      0      0      0   $$opt{'type'} and $$opt{'type'} eq 'm'
873   ***      0      0      0      0   $parse and my($opt, $arg) = $line =~ /^\s*([^=\s]+?)(?:\s*=\s*(.*?)\s*)?$/
1066  ***     66      5     12      0   not defined $final_props{$key} and defined $$prev{$key}
      ***     33     17      0      0   not defined $final_props{$key} and defined $$prev{$key} and $$opts{$key}{'copy'}
1199  ***     66      2      0      2   not $dbh and $tries--
1241  ***     33      2      0      0   not $dbh and $EVAL_ERROR
1512  ***      0      0      0      0   $PID_file and -f $PID_file
1573  ***      0      0      0      0   $$self{'PID_file'} and -f $$self{'PID_file'}
1665  ***     66      0      5   1580   defined($para = <$fh>) and not $para =~ /^=pod/
1668  ***     66      0      5   1615   defined($para = <$fh>) and not $para =~ /^=cut/
1688         100    495     60     15   $cmd eq 'head1' and $parse_items_from{$name}
1726  ***     66    125      0    920   $$self{'current_section'} and $$self{'current_item'}
2138  ***     33      0      0      5   defined $$vars{'auto_increment_increment'} and defined $$vars{'auto_increment_offset'}
2505  ***     33      5      0      0   _var_sneq($args{'variables'}{'tx_isolation'}, 'REPEATABLE-READ') && _var_sneq($args{'variables'}{'tx_isolation'}, 'READ-COMMITTED')
2514  ***     33      5      0      0   _var_eq($args{'variables'}{'expire_log_days'}, 0) && $args{'variables'}{'log_bin'}
2522  ***     33      5      0      0   _var_neq($args{'variables'}{'innodb_file_io_threads'}, 4) && $OSNAME ne 'MSWin32'
2539  ***     33      0      0      5   _var_sneq($args{'variables'}{'innodb_flush_method'}, 'O_DIRECT') && $OSNAME ne 'MSWin32'
2547  ***     33      5      0      0   _var_seq($args{'variables'}{'innodb_locks_unsafe_for_binlog'}, 'ON') && $args{'variables'}{'log_bin'}
2555  ***     33      5      0      0   _var_sneq($args{'variables'}{'innodb_support_xa'}, 'ON') && $args{'variables'}{'log_bin'}
2577  ***     33      5      0      0   _var_gt($args{'variables'}{'max_relay_log_size'}, 0) && _var_lt($args{'variables'}{'max_relay_log_size'}, 1073741824)
2604  ***     33      0      0      4   $args{'variables'}{'log_bin'} && (_var_eq($args{'variables'}{'sync_binlog'}, 0) || _var_gt($args{'variables'}{'sync_binlog'}, 1))
2745  ***     66      1      4      0   @ARGV == 0 and not $o->get('show-variables')

or 2 conditions

line  err      %      l     !l   expr
----- --- ------ ------ ------   ----
44    ***     50      0      2   $ENV{'MKDEBUG'} || 0
55    ***     50     10      0   $program_name ||= $PROGRAM_NAME
56    ***     50     10      0   $ENV{'HOME'} || $ENV{'HOMEPATH'} || $ENV{'USERPROFILE'} || '.'
117   ***     50      0      5   $file ||= '/home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor'
182   ***     50     10      0   $file ||= '/home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor'
306   ***     50     90      0   $$opt{'group'} ||= 'default'
611   ***      0      0      0   $s || 's'
620   ***      0      0      0   $prefix || ''
650   ***     50      1      0   $val || ''
653   ***     50      5      0   $val || ''
712   ***      0      0      0   $$self{'description'} || ''
781   ***      0      0      0   $s ||= 's'
807   ***      0      0      0   $$opt{'type'} || ''
934   ***      0      0      0   $val || ''
948   ***      0      0      0   $pre || ''
1002  ***     50      0      2   $ENV{'MKDEBUG'} || 0
1022  ***     50     49      0   $$opt{'copy'} || 0
1047  ***     50      0      2   $prev ||= {}
1048  ***     50      0      2   $defaults ||= {}
1128  ***      0      0      0   $opts{$key}{'desc'} || '[No description]'
1141  ***     50      0      2   $self->prop('dbidriver') || ''
1145  ***      0      0      0   $$info{'D'} || ''
1151  ***     50      0      2   $$info{'D'} || ''
1173  ***     50      2      0   $opts ||= {}
1278  ***      0      0      0   $$dbh{'mysql_hostinfo'} || ''
1294  ***      0      0      0   $level ||= 0
1295  ***      0      0      0   $$thing{'Type'} || 'undef'
      ***      0      0      0   $$thing{'Type'} || ''
      ***      0      0      0   $$thing{'Statement'} || ''
1350  ***     50      0      2   $ENV{'MKDEBUG'} || 0
1436  ***     50      0      2   $ENV{'MKDEBUG'} || 0
1587  ***      0      0      0   $$self{'PID_owner'} || 0
1621  ***     50      0      2   $ENV{'MKDEBUG'} || 0
1671         100    540     30   $name ||= ''
1789  ***     50      0      2   $ENV{'MKDEBUG'} || 0
1911  ***     50      0      2   $ENV{'MKDEBUG'} || 0
2034  ***     50      0      2   $ENV{'MKDEBUG'} || 0
2121  ***     50      0      2   $ENV{'MKDEBUG'} || 0
2531  ***     50      5      0   $args{'variables'}{'innodb_data_file_path'} || ''
2570         100      4      1   $args{'variables'}{'log_output'} || ''
2613  ***     50      5      0   $args{'variables'}{'tmp_table_size'} || 0
      ***     50      5      0   $args{'variables'}{'max_heap_table_size'} || 0
2725  ***     50      0      2   $ENV{'MKDEBUG'} || 0
2888  ***     50     51      0   $$info{'description'} || ''
2891         100     16     35   $desc[1] ||= ''

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
56    ***     33     10      0      0   $ENV{'HOME'} || $ENV{'HOMEPATH'}
      ***     33     10      0      0   $ENV{'HOME'} || $ENV{'HOMEPATH'} || $ENV{'USERPROFILE'}
606   ***     66      0      1     59   $$opt{'type'} eq 'H' or defined $val and $$opt{'type'} eq 'h'
      ***     66      5      0     54   $$opt{'type'} eq 'A' or defined $val and $$opt{'type'} eq 'a'
1013  ***     33      0      0     49   not $$opt{'key'} or not $$opt{'desc'}
1164  ***      0      0      0      0   $$dsn{'h'} ||= $$vars{'hostname'}{'Value'}
1165  ***      0      0      0      0   $$dsn{'S'} ||= $$vars{'socket'}{'Value'}
1166  ***      0      0      0      0   $$dsn{'P'} ||= $$vars{'port'}{'Value'}
1167  ***      0      0      0      0   $$dsn{'u'} ||= $user
1168  ***      0      0      0      0   $$dsn{'D'} ||= $db
1393  ***      0      0      0      0   $$vars{'Value'} || $$vars{'value'}
2054  ***     33      0      5      0   $args{'rules'} || $$self{'rules'}
2140  ***     33      0      0      5   $$vars{'auto_increment_increment'} != 1 || $$vars{'auto_increment_offset'} != 1
2586  ***     33      4      0      0   _var_seq($args{'variables'}{'myisam_recover_options'}, 'OFF') || _var_seq($args{'variables'}{'myisam_recover_options'}, 'DEFAULT')
2604  ***     33      4      0      0   _var_eq($args{'variables'}{'sync_binlog'}, 0) || _var_gt($args{'variables'}{'sync_binlog'}, 1)


Covered Subroutines
-------------------

Subroutine           Count Location                                                                          
-------------------- ----- ----------------------------------------------------------------------------------
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1002
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1345
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1346
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1348
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1350
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1430
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1431
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1433
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1434
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1436
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1617
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1618
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1619
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1621
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1780
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1781
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1782
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1784
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1789
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1908
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1909
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1910
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1911
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:20  
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2031
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2032
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2033
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2034
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:21  
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2116
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2118
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2119
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2120
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2121
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2717
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2718
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2719
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2720
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2725
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:37  
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:38  
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:40  
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:41  
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:42  
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:44  
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:990 
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:991 
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:992 
BEGIN                    2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:993 
DSNParser                5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:171 
__ANON__                40 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:131 
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2136
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2147
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2154
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2161
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2168
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2175
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2182
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2189
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2196
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2203
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2210
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2217
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2225
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2233
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2240
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2247
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2254
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2261
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2268
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2275
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2282
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2290
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2298
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2305
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2313
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2320
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2327
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2334
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2341
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2348
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2356
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2363
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2371
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2378
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2385
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2392
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2399
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2407
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2415
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2422
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2430
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2437
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2445
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2453
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2460
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2467
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2474
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2482
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2489
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2496
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2503
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2513
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2521
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2529
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2538
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2546
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2554
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2562
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2569
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2576
__ANON__                 4 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2585
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2594
__ANON__                 4 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2602
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2612
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2620
__ANON__                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2649
__ANON__                 8 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:480 
_check_opts              5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:523 
_parse_attribs          90 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:957 
_parse_specs             5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:270 
_parse_tabular        1084 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1798
_pod_to_specs           10 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:181 
_read_config_file       20 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:856 
_set_option              8 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:426 
_validate_type          90 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:596 
_var_eq                 79 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2670
_var_gt                 85 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2658
_var_lt                 15 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2664
_var_neq                35 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2676
_var_seq                89 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2682
_var_sneq               40 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2688
command                570 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1684
get                     50 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:665 
get_cxn_params           2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1138
get_dbh                  2 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1172
get_defaults_files       5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:176 
get_items                5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1653
get_opts                 5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:443 
get_rule_info           51 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2002
get_rule_info          328 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2082
get_rules               10 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2655
get_specs                5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:116 
get_variables            5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2850
got                     20 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:673 
has                     13 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:681 
innodb_version           5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1376
load_rule_info           5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1953
load_rule_info           5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2050
load_rules               5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1930
main                     5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2728
new                      6 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1005
new                      5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1353
new                      5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1642
new                      5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1792
new                      5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1914
new                      5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2037
new                      5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2124
new                     10 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:49  
parse                    3 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1041
parse                    5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1358
parse                    4 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1823
parse_from_file          5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1658
parse_horizontal_row     4 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1862
parse_options            1 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1097
print_advice             5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2875
prop                    12 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1032
run_rules                5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1972
textblock             1045 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1724
usage_or_errors          5 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:723 

Uncovered Subroutines
---------------------

Subroutine           Count Location                                                                          
-------------------- ----- ----------------------------------------------------------------------------------
DESTROY                  0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1585
_d                       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1322
_d                       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1406
_d                       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1593
_d                       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1756
_d                       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1885
_d                       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2008
_d                       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2094
_d                       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2694
_d                       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2903
_d                       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:967 
_get_participants        0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:380 
_make_PID_file           0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1550
_parse_size              0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:932 
_parse_tab_sep           0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1807
_remove_PID_file         0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1572
_reset_rule_info         0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:2088
as_string                0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1110
check_PID_file           0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1509
clone                    0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:909 
copy                     0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1304
daemonize                0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1457
descr                    0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:711 
disconnect               0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1287
errors                   0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:701 
fill_in_dsn              0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1160
get_defaults             0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:416 
get_groups               0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:421 
get_hostname             0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1277
make_PID_file            0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1540
new                      0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1439
opts                     0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:392 
parse_vertical_row       0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1816
print_active_handles     0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1293
print_errors             0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:736 
print_usage              0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:746 
prompt                   0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:706 
prompt_noecho            0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:821 
read_para_after          0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:890 
save_error               0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:696 
set                      0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:687 
set_defaults             0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:404 
short_opts               0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:398 
split_vertical_rows      0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1878
usage                    0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1121
verbatim                 0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1751
version_ge               0 /home/daniel/dev/maatkit/working-copy/mk-variable-advisor/mk-variable-advisor:1365



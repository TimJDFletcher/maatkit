
Revision 2606
59.18user 50.70system 1:51.08elapsed 98%CPU (0avgtext+0avgdata 0maxresident)k
195504inputs+84712outputs (0major+7121minor)pagefaults 0swaps
# fprofpp output format is:
# filename:line time count: source
     1	../mk-log-parser:1075 26.08367 93741: $query =~ s{                          # Float/real into ?
     2	../mk-log-parser:1097 5.15872 93741: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
     3	../mk-log-parser:1467 3.94939 330270: if ( !$got_ts
     4	../mk-log-parser:1529 2.02412 93741: ++$num_events;
     5	../mk-log-parser:1778 1.70133 749928: my $metric_val = $event->{ $metric };
     6	../mk-log-parser:1779 1.49908 749928: next METRIC unless defined $metric_val;
     7	../mk-log-parser:1780 1.49363 563487: my $stats_for_metric = $self->{metrics}->{all}->{ $metric } ||= {};
     8	../mk-log-parser:1513 1.46907 330270: if ( !$found_arg && $pos == $len ) {
     9	../mk-log-parser:1786 1.39598 563487: if ( ref $sub ) {
    10	../mk-log-parser:1782 1.36451 563487: my $sub = $self->{handlers}->{$metric} ||= make_handler(
    11	../mk-log-parser:1781 1.32302 563487: my $stats_for_class  = $fp_ds->{ $metric } ||= {};
    12	../mk-log-parser:1435 1.21733 93741: if ( $stmt =~ s{
    13	../mk-log-parser:1465 1.17074 377133: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o) {
    14	../mk-log-parser:1463 1.08503 377133: my $line = $1;          # Necessary for /g and pos() to work.
    15	../mk-log-parser:1073 0.91452 93741: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
    16	../mk-log-parser:1527 0.87839 93741: my $event = { @properties };
    17	../mk-log-parser:1462 0.77804 377133: $pos     = pos($stmt);  # Be careful not to mess this up!
    18	../mk-log-parser:1090 0.73002 93741: $query =~ tr[ \n\t\r\f][ ]s;                 # Collapse whitespace
    19	../mk-log-parser:1774 0.63920 93741: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
    20	../mk-log-parser:1091 0.60413 93741: $query = lc $query;
    21	../mk-log-parser:1093 0.58207 93741: $query =~ s{
    22	../mk-log-parser:1453 0.46387 93741: $stmt =~ s/;\n#?\Z//;
    23	../mk-log-parser:1452 0.45261 93741: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
    24	../mk-log-parser:1087 0.43441 93741: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into ?
    25	../mk-log-parser:1068 0.40418 93741: my ( $self, $query, $opts ) = @_;
    26	../mk-log-parser:1777 0.39391 93741: foreach my $metric ( keys %{ $self->{attributes} } ) {
    27	../mk-log-parser:1729 0.38680 93741: [at line 12 inside eval] ++$global->{cnt};
    28	../mk-log-parser:1101 0.37104 93741: return $query;
    29	../mk-log-parser:1070 0.36240 93741: $query =~ s/\\["']//g;                # quoted strings
    30	../mk-log-parser:1072 0.34618 93741: $query =~ s/'.*?'/?/g;                # quoted strings

Revision 2658
58.63user 51.74system 1:51.11elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+88016outputs (0major+7198minor)pagefaults 0swaps
# fprofpp output format is:
# filename:line time count: source
     1	../mk-log-parser:1069 25.54903 93741: $query =~ s{                          # Float/real into ?
     2	../mk-log-parser:1091 5.14184 93741: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
     3	../mk-log-parser:1461 3.90495 330270: if ( !$got_ts
     4	../mk-log-parser:1746 1.68215 749928: my $attrib_val = $event->{ $attrib };
     5	../mk-log-parser:1526 1.67369 93741: ++$num_events;
     6	../mk-log-parser:1747 1.50155 749928: if ( !defined $attrib_val ) {
     7	../mk-log-parser:1758 1.48520 563487: my $stats_for_attrib = $self->{metrics}->{all}->{ $attrib } ||= {};
     8	../mk-log-parser:1766 1.44133 563487: if ( ref $handler eq 'CODE' ) {
     9	../mk-log-parser:1507 1.43623 330270: if ( !$found_arg && $pos == $len ) {
    10	../mk-log-parser:1761 1.35034 563487: my $handler = $self->{handlers}->{ $attrib } ||= make_handler(
    11	../mk-log-parser:1759 1.30314 563487: my $stats_for_class  = $fp_ds->{ $attrib } ||= {};
    12	../mk-log-parser:1429 1.20300 93741: if ( $stmt =~ s{
    13	../mk-log-parser:1459 1.16776 377133: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/oi) {
    14	../mk-log-parser:1457 1.07352 377133: my $line = $1;          # Necessary for /g and pos() to work.
    15	../mk-log-parser:1067 0.94662 93741: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
    16	../mk-log-parser:1521 0.86380 93741: my $event = { @properties };
    17	../mk-log-parser:1456 0.76429 377133: $pos     = pos($stmt);  # Be careful not to mess this up!
    18	../mk-log-parser:1084 0.71926 93741: $query =~ tr[ \n\t\r\f][ ]s;                 # Collapse whitespace
    19	../mk-log-parser:1749 0.65134 186441: foreach my $attrib_alias ( keys %{$self->{attributes}->{$attrib}} ) {
    20	../mk-log-parser:1742 0.62876 93741: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
    21	../mk-log-parser:1085 0.58908 93741: $query = lc $query;
    22	../mk-log-parser:1087 0.57079 93741: $query =~ s{
    23	../mk-log-parser:1447 0.48314 93741: $stmt =~ s/;\n#?\Z//;
    24	../mk-log-parser:1446 0.44652 93741: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
    25	../mk-log-parser:1081 0.43512 93741: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into ?
    26	../mk-log-parser:1755 0.42849 186441: next ATTRIB unless defined $attrib_val;
    27	../mk-log-parser:1524 0.41614 187482: last CALLBACK unless $callback->($event);
    28	../mk-log-parser:1062 0.38484 93741: my ( $self, $query, $opts ) = @_;
    29	../mk-log-parser:1745 0.38243 93741: foreach my $attrib ( keys %{ $self->{attributes} } ) {
    30	../mk-log-parser:1724 0.37520 93741: [at line 12 inside eval] ++$global->{cnt};

Revision 2658
36.21user 50.77system 1:27.31elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+85784outputs (0major+7213minor)pagefaults 0swaps
     1	../mk-log-parser:1072 7.65709 93741: $query =~ s{                          # Anything vaguely resembling numbers
     2	../mk-log-parser:1451 3.88469 330270: if ( !$got_ts
     3	../mk-log-parser:1736 1.66771 749928: my $attrib_val = $event->{ $attrib };
     4	../mk-log-parser:1516 1.63484 93741: ++$num_events;
     5	../mk-log-parser:1748 1.52280 563487: my $stats_for_attrib = $self->{metrics}->{all}->{ $attrib } ||= {};
     6	../mk-log-parser:1737 1.47962 749928: if ( !defined $attrib_val ) {
     7	../mk-log-parser:1756 1.43292 563487: if ( ref $handler eq 'CODE' ) {
     8	../mk-log-parser:1497 1.41828 330270: if ( !$found_arg && $pos == $len ) {
     9	../mk-log-parser:1751 1.41580 563487: my $handler = $self->{handlers}->{ $attrib } ||= make_handler(
    10	../mk-log-parser:1749 1.27762 563487: my $stats_for_class  = $fp_ds->{ $attrib } ||= {};
    11	../mk-log-parser:1077 1.22745 93741: $query =~ s/[xb.+-]\?/?/g;            # Clean up leftovers
    12	../mk-log-parser:1419 1.21261 93741: if ( $stmt =~ s{
    13	../mk-log-parser:1447 1.09439 377133: my $line = $1;          # Necessary for /g and pos() to work.
    14	../mk-log-parser:1449 1.06552 377133: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/oi) {
    15	../mk-log-parser:1063 0.94915 93741: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
    16	../mk-log-parser:1511 0.84338 93741: my $event = { @properties };
    17	../mk-log-parser:1446 0.76098 377133: $pos     = pos($stmt);  # Be careful not to mess this up!
    18	../mk-log-parser:1079 0.70523 93741: $query =~ tr[ \n\t\r\f][ ]s;          # Collapse whitespace
    19	../mk-log-parser:1732 0.67630 93741: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
    20	../mk-log-parser:1739 0.65809 186441: foreach my $attrib_alias ( keys %{$self->{attributes}->{$attrib}} ) {
    21	../mk-log-parser:1081 0.63174 93741: $query =~ s{
    22	../mk-log-parser:1080 0.57995 93741: $query = lc $query;
    23	../mk-log-parser:1437 0.46156 93741: $stmt =~ s/;\n#?\Z//;
    24	../mk-log-parser:1436 0.44819 93741: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
    25	../mk-log-parser:1745 0.43230 186441: next ATTRIB unless defined $attrib_val;
    26	../mk-log-parser:1514 0.40499 187482: last CALLBACK unless $callback->($event);
    27	../mk-log-parser:2984 0.38718 93741: fingerprint   => sub { return $_[1]->{fingerprint}; },
    28	../mk-log-parser:1735 0.38295 93741: foreach my $attrib ( keys %{ $self->{attributes} } ) {
    29	../mk-log-parser:1714 0.38238 93741: [at line 12 inside eval] ++$global->{cnt};
    30	../mk-log-parser:1062 0.37704 93741: my ( $self, $query ) = @_;

Revision 2691
59.51user 50.36system 1:50.71elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+85872outputs (0major+7150minor)pagefaults 0swaps
     1	../mk-log-parser:1064 23.83485 93741: $query =~ s/$olc_re//go;
     2	../mk-log-parser:1073 8.07384 93741: $query =~ s{                          # Anything vaguely resembling numbers
     3	../mk-log-parser:1452 3.84157 330270: if ( !$got_ts
     4	../mk-log-parser:1737 1.68136 749928: my $attrib_val = $event->{ $attrib };
     5	../mk-log-parser:1517 1.63133 93741: ++$num_events;
     6	../mk-log-parser:1738 1.48136 749928: if ( !defined $attrib_val ) {
     7	../mk-log-parser:1749 1.46727 563487: my $stats_for_attrib = $self->{metrics}->{all}->{ $attrib } ||= {};
     8	../mk-log-parser:1757 1.45463 563487: if ( ref $handler eq 'CODE' ) {
     9	../mk-log-parser:1498 1.40790 330270: if ( !$found_arg && $pos == $len ) {
    10	../mk-log-parser:1752 1.35258 563487: my $handler = $self->{handlers}->{ $attrib } ||= make_handler(
    11	../mk-log-parser:1750 1.25977 563487: my $stats_for_class  = $fp_ds->{ $attrib } ||= {};
    12	../mk-log-parser:1078 1.22400 93741: $query =~ s/[xb.+-]\?/?/g;            # Clean up leftovers
    13	../mk-log-parser:1420 1.21094 93741: if ( $stmt =~ s{
    14	../mk-log-parser:1448 1.11472 377133: my $line = $1;          # Necessary for /g and pos() to work.
    15	../mk-log-parser:1450 1.07439 377133: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/oi) {
    16	../mk-log-parser:1512 0.87058 93741: my $event = { @properties };
    17	../mk-log-parser:1447 0.76305 377133: $pos     = pos($stmt);  # Be careful not to mess this up!
    18	../mk-log-parser:1080 0.69090 93741: $query =~ tr[ \n\t\r\f][ ]s;          # Collapse whitespace
    19	../mk-log-parser:1733 0.66643 93741: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
    20	../mk-log-parser:1740 0.65638 186441: foreach my $attrib_alias ( keys %{$self->{attributes}->{$attrib}} ) {
    21	../mk-log-parser:1082 0.60669 93741: $query =~ s{
    22	../mk-log-parser:1081 0.57167 93741: $query = lc $query;
    23	../mk-log-parser:1438 0.51751 93741: $stmt =~ s/;\n#?\Z//;
    24	../mk-log-parser:1437 0.44211 93741: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
    25	../mk-log-parser:1746 0.43113 186441: next ATTRIB unless defined $attrib_val;
    26	../mk-log-parser:1515 0.41088 187482: last CALLBACK unless $callback->($event);
    27	../mk-log-parser:1063 0.38145 93741: my ( $self, $query ) = @_;
    28	../mk-log-parser:1736 0.37962 93741: foreach my $attrib ( keys %{ $self->{attributes} } ) {
    29	../mk-log-parser:2985 0.37823 93741: fingerprint   => sub { return $_[1]->{fingerprint}; },
    30	../mk-log-parser:1715 0.37181 93741: [at line 12 inside eval] ++$global->{cnt};

Revision 2686
37.14user 52.83system 1:33.37elapsed 96%CPU (0avgtext+0avgdata 0maxresident)k
195328inputs+85840outputs (0major+7144minor)pagefaults 0swaps
     1	../mk-log-parser:1073 8.04057 93741: $query =~ s{                          # Anything vaguely resembling numbers
     2	../mk-log-parser:1457 4.02352 330270: if ( !$got_ts
     3	../mk-log-parser:1526 2.05079 93741: ++$num_events;
     4	../mk-log-parser:1740 1.77517 749928: my $attrib_val = $event->{ $attrib };
     5	../mk-log-parser:1752 1.57588 563487: my $stats_for_attrib = $self->{metrics}->{all}->{ $attrib } ||= {};
     6	../mk-log-parser:1741 1.55822 749928: if ( !defined $attrib_val ) {
     7	../mk-log-parser:1760 1.55698 563487: if ( ref $handler eq 'CODE' ) {
     8	../mk-log-parser:1503 1.47737 330270: if ( !$found_arg && $pos == $len ) {
     9	../mk-log-parser:1755 1.44929 563487: my $handler = $self->{handlers}->{ $attrib } ||= make_handler(
    10	../mk-log-parser:1753 1.34189 563487: my $stats_for_class  = $fp_ds->{ $attrib } ||= {};
    11	../mk-log-parser:1425 1.27646 93741: if ( $stmt =~ s{
    12	../mk-log-parser:1078 1.27437 93741: $query =~ s/[xb.+-]\?/?/g;            # Clean up leftovers
    13	../mk-log-parser:1064 1.18194 93741: $query =~ s/$olc_re//go;
    14	../mk-log-parser:1453 1.16149 377133: my $line = $1;          # Necessary for /g and pos() to work.
    15	../mk-log-parser:1455 1.11993 377133: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/oi) {
    16	../mk-log-parser:1521 0.92330 93741: my $event = { @properties };
    17	../mk-log-parser:1452 0.82589 377133: $pos     = pos($stmt);  # Be careful not to mess this up!
    18	../mk-log-parser:1080 0.75085 93741: $query =~ tr[ \n\t\r\f][ ]s;          # Collapse whitespace
    19	../mk-log-parser:1734 0.70602 93741: my $fp_ds = $self->{metrics}->{unique}->{ $group_by } ||= {};
    20	../mk-log-parser:1743 0.68576 186441: foreach my $attrib_alias ( keys %{$self->{attributes}->{$attrib}} ) {
    21	../mk-log-parser:1082 0.65040 93741: $query =~ s{
    22	../mk-log-parser:1081 0.59159 93741: $query = lc $query;
    23	../mk-log-parser:1443 0.48937 93741: $stmt =~ s/;\n#?\Z//;
    24	../mk-log-parser:1442 0.48389 93741: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
    25	../mk-log-parser:1749 0.45404 186441: next ATTRIB unless defined $attrib_val;
    26	../mk-log-parser:1524 0.44386 187482: last CALLBACK unless $callback->($event);
    27	../mk-log-parser:1063 0.42149 93741: my ( $self, $query ) = @_;
    28	../mk-log-parser:1722 0.41383 93741: [at line 12 inside eval] ++$global->{cnt};
    29	../mk-log-parser:1739 0.40112 93741: foreach my $attrib ( keys %{ $self->{attributes} } ) {
    30	../mk-log-parser:1071 0.36355 93741: $query =~ s/'.*?'/?/g;                # quoted strings

Revision 2702
34.38user 45.09system 1:19.83elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+74336outputs (0major+7342minor)pagefaults 0swaps
     1	../mk-log-parser:1073 7.95455 93741: $query =~ s{                          # Anything vaguely resembling numbers
     2	../mk-log-parser:1457 3.81902 330270: if ( !$got_ts
     3	../mk-log-parser:1784 1.56312 655830: my $attrib_val = $event->{$attrs[$i]};
     4	../mk-log-parser:1526 1.52004 93741: ++$num_events;
     5	../mk-log-parser:1503 1.41086 330270: if ( !$found_arg && $pos == $len ) {
     6	../mk-log-parser:1785 1.30831 655830: next unless defined $attrib_val;
     7	../mk-log-parser:1425 1.21151 93741: if ( $stmt =~ s{
     8	../mk-log-parser:1078 1.19765 93741: $query =~ s/[xb.+-]\?/?/g;            # Clean up leftovers
     9	../mk-log-parser:1786 1.18778 470267: $handl[$i]->($event, $st_fc[$i], $st_fa[$i]);
    10	../mk-log-parser:1064 1.09447 93741: $query =~ s/$olc_re//go;
    11	../mk-log-parser:1455 1.07749 377133: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/oi) {
    12	../mk-log-parser:1453 1.07327 377133: my $line = $1;          # Necessary for /g and pos() to work.
    13	../mk-log-parser:1521 0.83338 93741: my $event = { @properties };
    14	../mk-log-parser:1452 0.78572 377133: $pos     = pos($stmt);  # Be careful not to mess this up!
    15	../mk-log-parser:1080 0.70753 93741: $query =~ tr[ \n\t\r\f][ ]s;          # Collapse whitespace
    16	../mk-log-parser:1781 0.66656 93690: ||= { map { $_ => {} } @attrs };
    17	../mk-log-parser:1082 0.60823 93741: $query =~ s{
    18	../mk-log-parser:1081 0.57543 93741: $query = lc $query;
    19	../mk-log-parser:1782 0.50488 93690: my @st_fc = @{$fp_ds}{@attrs};
    20	../mk-log-parser:1442 0.47588 93741: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
    21	../mk-log-parser:1723 0.47559 93741: [at line 9 inside eval] $global->{max} = $val if !defined $global->{max} || $val gt $global->{max};
    22	../mk-log-parser:1443 0.45836 93741: $stmt =~ s/;\n#?\Z//;
    23	../mk-log-parser:1524 0.40850 187482: last CALLBACK unless $callback->($event);
    24	../mk-log-parser:1063 0.38394 93741: my ( $self, $query ) = @_;
    25	../mk-log-parser:1071 0.33900 93741: $query =~ s/'.*?'/?/g;                # quoted strings
    26	../mk-log-parser:1723 0.31773 93741: [at line 5 inside eval] $class->{min} = $val if !defined $class->{min} || $val < $class->{min};
    27	../mk-log-parser:1069 0.31741 93741: $query =~ s/\\["']//g;                # quoted strings
    28	../mk-log-parser:1070 0.31714 93741: $query =~ s/".*?"/?/g;                # quoted strings
    29	../mk-log-parser:1091 0.31663 93741: return $query;
    30	../mk-log-parser:1065 0.31241 93741: $query =~ s/$mlc_re//go;

Revision 2705
34.71user 45.84system 1:21.14elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
384inputs+67144outputs (2major+7754minor)pagefaults 0swaps
     1	../mk-log-parser:1073 8.42367 93741: $query =~ s{                          # Anything vaguely resembling numbers
     2	../mk-log-parser:1457 3.82233 330270: if ( !$got_ts
     3	../mk-log-parser:1526 1.57221 93741: ++$num_events;
     4	../mk-log-parser:1503 1.41640 330270: if ( !$found_arg && $pos == $len ) {
     5	../mk-log-parser:1425 1.22849 93741: if ( $stmt =~ s{
     6	../mk-log-parser:1078 1.21863 93741: $query =~ s/[xb.+-]\?/?/g;            # Clean up leftovers
     7	../mk-log-parser:1064 1.13228 93741: $query =~ s/$olc_re//go;
     8	../mk-log-parser:1455 1.11592 377133: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/oi) {
     9	../mk-log-parser:1453 1.09221 377133: my $line = $1;          # Necessary for /g and pos() to work.
    10	../mk-log-parser:1521 0.84538 93741: my $event = { @properties };
    11	../mk-log-parser:1452 0.79315 377133: $pos     = pos($stmt);  # Be careful not to mess this up!
    12	../mk-log-parser:1080 0.69618 93741: $query =~ tr[ \n\t\r\f][ ]s;          # Collapse whitespace
    13	../mk-log-parser:1803 0.68269 93690: [at line 5 inside eval] ||= { map { $_ => {} } @attrs };
    14	../mk-log-parser:1082 0.61688 93741: $query =~ s{
    15	../mk-log-parser:1081 0.57447 93741: $query = lc $query;
    16	../mk-log-parser:1803 0.53607 93690: [at line 6 inside eval] my @st_fc = @{$fp_ds}{@attrs};
    17	../mk-log-parser:1443 0.46613 93741: $stmt =~ s/;\n#?\Z//;
    18	../mk-log-parser:1442 0.44547 93741: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
    19	../mk-log-parser:1524 0.42357 187482: last CALLBACK unless $callback->($event);
    20	../mk-log-parser:1803 0.40816 93690: [at line 2 inside eval] my ( $self, $event, $group_by ) = @_;
    21	../mk-log-parser:1803 0.39124 93690: [at line 95 inside eval] $global->{max} = $val if !defined $global->{max} || $val gt $global->{max};
    22	../mk-log-parser:1063 0.39032 93741: my ( $self, $query ) = @_;
    23	../mk-log-parser:1071 0.34388 93741: $query =~ s/'.*?'/?/g;                # quoted strings
    24	../mk-log-parser:3060 0.33352 93741: return 1; # required to keep callback chain going
    25	../mk-log-parser:1091 0.33037 93741: return $query;
    26	../mk-log-parser:1803 0.32777 93690: [at line 11 inside eval] $class->{min} = $val if !defined $class->{min} || $val < $class->{min};
    27	../mk-log-parser:1069 0.32651 93741: $query =~ s/\\["']//g;                # quoted strings
    28	../mk-log-parser:1070 0.32407 93741: $query =~ s/".*?"/?/g;                # quoted strings
    29	../mk-log-parser:1065 0.31883 93741: $query =~ s/$mlc_re//go;
    30	../mk-log-parser:1086 0.31594 93741: $query =~ s{

Revision 2705
33.60user 47.36system 1:21.28elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+68208outputs (0major+7782minor)pagefaults 0swaps
     1	../mk-log-parser:1078 7.72649 93604: $query =~ s{                          # Anything vaguely resembling numbers
     2	../mk-log-parser:1462 3.82010 330270: if ( !$got_ts
     3	../mk-log-parser:1531 1.46575 93741: ++$num_events;
     4	../mk-log-parser:1508 1.38124 330270: if ( !$found_arg && $pos == $len ) {
     5	../mk-log-parser:1083 1.23910 93604: $query =~ s/[xb.+-]\?/?/g;            # Clean up leftovers
     6	../mk-log-parser:1430 1.23570 93741: if ( $stmt =~ s{
     7	../mk-log-parser:1069 1.13818 93604: $query =~ s/$olc_re//go;
     8	../mk-log-parser:1458 1.11247 377133: my $line = $1;          # Necessary for /g and pos() to work.
     9	../mk-log-parser:1460 1.09060 377133: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/oi) {
    10	../mk-log-parser:1526 0.82533 93741: my $event = { @properties };
    11	../mk-log-parser:1457 0.79432 377133: $pos     = pos($stmt);  # Be careful not to mess this up!
    12	../mk-log-parser:1085 0.70247 93604: $query =~ tr[ \n\t\r\f][ ]s;          # Collapse whitespace
    13	../mk-log-parser:1808 0.68408 93690: [at line 5 inside eval] ||= { map { $_ => {} } @attrs };
    14	../mk-log-parser:1087 0.62798 93604: $query =~ s{
    15	../mk-log-parser:1086 0.59086 93604: $query = lc $query;
    16	../mk-log-parser:1808 0.53292 93690: [at line 6 inside eval] my @st_fc = @{$fp_ds}{@attrs};
    17	../mk-log-parser:1448 0.46322 93741: $stmt =~ s/;\n#?\Z//;
    18	../mk-log-parser:1447 0.44463 93741: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
    19	../mk-log-parser:1529 0.43147 187482: last CALLBACK unless $callback->($event);
    20	../mk-log-parser:1808 0.40079 93690: [at line 2 inside eval] my ( $self, $event, $group_by ) = @_;
    21	../mk-log-parser:1064 0.39372 93741: my ( $self, $query ) = @_;
    22	../mk-log-parser:1808 0.39066 93690: [at line 95 inside eval] $global->{max} = $val if !defined $global->{max} || $val gt $global->{max};
    23	../mk-log-parser:3065 0.34501 93741: return 1; # required to keep callback chain going
    24	../mk-log-parser:1076 0.34487 93604: $query =~ s/'.*?'/?/g;                # quoted strings
    25	../mk-log-parser:1808 0.33097 93690: [at line 11 inside eval] $class->{min} = $val if !defined $class->{min} || $val < $class->{min};
    26	../mk-log-parser:1074 0.32892 93604: $query =~ s/\\["']//g;                # quoted strings
    27	../mk-log-parser:1096 0.32730 93604: return $query;
    28	../mk-log-parser:1075 0.32659 93604: $query =~ s/".*?"/?/g;                # quoted strings
    29	../mk-log-parser:1070 0.31848 93604: $query =~ s/$mlc_re//go;
    30	../mk-log-parser:1067 0.31825 93741: $query =~ m#/\*\w+\.\w+:\d/\d\*/#     # mk-table-checksum, etc query

Revision 2581
65.09user 65.24system 2:11.11elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+118104outputs (0major+5354minor)pagefaults 0swaps
     1	../mk-log-parser:1071 25.43445 78839: $query =~ s{
     2	../mk-log-parser:1095 6.96144 78839: $query =~ s/(?<=\w_)\d+(_\d+)?\b/$1 ? "N_N" : "N"/eg;
     3	../mk-log-parser:1300 5.12337 471021: if ( $line =~ m/^# No InnoDB statistics available/ ) {
     4	../mk-log-parser:1401 2.01991 471021: $line = <$fh> unless $done;
     5	../mk-log-parser:1088 1.81214 78839: $query =~ s/\s{2,}/ /g;                      # Collapse all whitespace
     6	../mk-log-parser:1627 1.45203 393465: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
     7	../mk-log-parser:1259 1.29313 471055: if ( $line =~ m/Version:.+ started with:/ ) {
     8	../mk-log-parser:1399 1.28450 471021: $event->{NR} = $NR;
     9	../mk-log-parser:1350 1.21588 187482: @{$event}{keys %hash} = values %hash;
    10	../mk-log-parser:1617 1.19396 473034: my $metric_val = $event->{ $handler->{metric} };
    11	../mk-log-parser:1681 1.08349 393465: return;
    12	../mk-log-parser:1634 1.07682 393465: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
    13	../mk-log-parser:1254 1.05129 471055: if ( !$mode && $line =~ m/^# [A-Z]/ ) {
    14	../mk-log-parser:1618 0.96741 473034: next METRIC if !defined $metric_val;
    15	../mk-log-parser:1636 0.95925 393465: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
    16	../mk-log-parser:1620 0.95511 393465: $self->_calc_metric($metric_val, $handler, $fp_ds);
    17	../mk-log-parser:1363 0.94712 234360: $type = 0;
    18	../mk-log-parser:1252 0.94429 471055: my $handled_line = 0;
    19	../mk-log-parser:1367 0.94032 471021: if ( !$handled_line ) {
    20	../mk-log-parser:1086 0.92112 78839: $query =~ s/(["']).*?\1/S/g;                 # Turn quoted strings into S
    21	../mk-log-parser:1633 0.91638 393465: my $e_ds = $fp_ds->{ $metric } ||= {};
    22	../mk-log-parser:1628 0.90424 393465: my $metric = $handler->{metric};
    23	../mk-log-parser:1630 0.87544 393465: $metric_val = $handler->{transformer}->($metric_val)
    24	../mk-log-parser:1251 0.87090 471055: MKDEBUG && _d('type: ', $type, ' ', $line);
    25	../mk-log-parser:1089 0.84491 78839: $query =~ s/[\n\r\f]+/ /g;                   # Collapse newlines etc
    26	../mk-log-parser:1415 0.78085 93720: return $event;
    27	../mk-log-parser:1653 0.74255 236517: push @{ $e_ds->{all_vals} }, $metric_val
    28	../mk-log-parser:1956 0.72835 187439: $lp->parse_event($fh, sub { $sm->calc_event_metrics(@_) });
    29	../mk-log-parser:1648 0.63552 236517: my $avg = $e_ds->{total} / $fp_ds->{count};
    30	../mk-log-parser:1594 0.62704 78839: if ( exists $self->{metrics}->{unique}->{ $fp } ) {

Revision 2714
33.72user 45.84system 1:20.06elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+68376outputs (0major+14052minor)pagefaults 0swaps
     1	../mk-log-parser:1078 7.63237 93604: $query =~ s{                          # Anything vaguely resembling numbers
     2	../mk-log-parser:1462 3.77607 330270: if ( !$got_ts
     3	../mk-log-parser:1531 1.44177 93741: ++$num_events;
     4	../mk-log-parser:1508 1.37287 330270: if ( !$found_arg && $pos == $len ) {
     5	../mk-log-parser:1430 1.25774 93741: if ( $stmt =~ s{
     6	../mk-log-parser:1083 1.20696 93604: $query =~ s/[xb.+-]\?/?/g;            # Clean up leftovers
     7	../mk-log-parser:1069 1.12506 93604: $query =~ s/$olc_re//go;
     8	../mk-log-parser:1458 1.08634 377133: my $line = $1;          # Necessary for /g and pos() to work.
     9	../mk-log-parser:1460 1.07869 377133: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/oi) {
    10	../mk-log-parser:1526 0.81410 93741: my $event = { @properties };
    11	../mk-log-parser:1457 0.78938 377133: $pos     = pos($stmt);  # Be careful not to mess this up!
    12	../mk-log-parser:1085 0.69289 93604: $query =~ tr[ \n\t\r\f][ ]s;          # Collapse whitespace
    13	../mk-log-parser:1808 0.67380 93690: [at line 5 inside eval] ||= { map { $_ => {} } @attrs };
    14	../mk-log-parser:1087 0.62678 93604: $query =~ s{
    15	../mk-log-parser:1086 0.58240 93604: $query = lc $query;
    16	../mk-log-parser:1808 0.52405 93690: [at line 6 inside eval] my @st_fc = @{$fp_ds}{@attrs};
    17	../mk-log-parser:1448 0.45695 93741: $stmt =~ s/;\n#?\Z//;
    18	../mk-log-parser:1447 0.43749 93741: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
    19	../mk-log-parser:1529 0.41829 187482: last CALLBACK unless $callback->($event);
    20	../mk-log-parser:1064 0.41361 93741: my ( $self, $query ) = @_;
    21	../mk-log-parser:1808 0.39552 93690: [at line 2 inside eval] my ( $self, $event, $group_by ) = @_;
    22	../mk-log-parser:1808 0.37585 93690: [at line 95 inside eval] $global->{max} = $val if !defined $global->{max} || $val gt $global->{max};
    23	../mk-log-parser:1076 0.33802 93604: $query =~ s/'.*?'/?/g;                # quoted strings
    24	../mk-log-parser:3064 0.33284 93741: return 1; # required to keep callback chain going
    25	../mk-log-parser:1808 0.32498 93690: [at line 11 inside eval] $class->{min} = $val if !defined $class->{min} || $val < $class->{min};
    26	../mk-log-parser:1074 0.32119 93604: $query =~ s/\\["']//g;                # quoted strings
    27	../mk-log-parser:1096 0.31986 93604: return $query;
    28	../mk-log-parser:1075 0.31977 93604: $query =~ s/".*?"/?/g;                # quoted strings
    29	../mk-log-parser:1067 0.31126 93741: $query =~ m#/\*\w+\.\w+:\d/\d\*/#     # mk-table-checksum, etc query
    30	../mk-log-parser:1070 0.31108 93604: $query =~ s/$mlc_re//go;

baron@kanga:~$ fprofpp -t 30
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1446 33.05516 341886: if ( $line !~ m/^#|^use \S|^set \S/i ) {
bin/mk-log-parser:1071 27.30664 85069: $query =~ s{
bin/mk-log-parser:1095 7.29557 85069: $query =~ s/(?<=\w_)\d+(_\d+)?\b/$1 ? "N_N" : "N"/eg;
bin/mk-log-parser:1451 4.38473 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/ ) {
bin/mk-log-parser:1088 1.94738 85069: $query =~ s/\s{2,}/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1709 1.54618 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1699 1.37325 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1485 1.32720 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1427 1.25294 85069: $stmt =~ s{
bin/mk-log-parser:1497 1.23481 85069: return $event;
bin/mk-log-parser:1716 1.23033 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1763 1.22170 424602: return;
bin/mk-log-parser:1445 1.10100 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1700 1.09231 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1718 1.08916 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1702 1.06713 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1715 1.06337 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1710 1.01316 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1712 1.00228 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1424 1.00067 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1086 0.98051 85069: $query =~ s/(["']).*?\1/S/g;                 # Turn quoted strings into S
bin/mk-log-parser:1089 0.93291 85069: $query =~ s/[\n\r\f]+/ /g;                   # Collapse newlines etc
bin/mk-log-parser:1495 0.88331 85069: my $event = { @properties };
bin/mk-log-parser:1735 0.86493 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:2037 0.76365 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1444 0.75185 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:1722 0.74017 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1730 0.73285 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1676 0.72199 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1747 0.70601 255159: my $avg = $g_ds->{total} / $self->{n_queries};

# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1448 32.69878 341886: if ( $line =~ m/^#|^use \S|^set \S/i ) {
bin/mk-log-parser:1074 26.38634 85069: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1096 7.17495 85069: $query =~ s/(?<=\w_)\d+(_\d+)?\b/$1 ? "N_N" : "N"/eg;
bin/mk-log-parser:1450 4.11014 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/ ) {
bin/mk-log-parser:1089 3.07630 85069: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1712 1.57572 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1702 1.39292 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1484 1.32170 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1428 1.22349 85069: $stmt =~ s{
bin/mk-log-parser:1719 1.20877 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1766 1.18558 424602: return;
bin/mk-log-parser:1703 1.10698 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1446 1.08415 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1721 1.07440 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1705 1.07306 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1500 1.04732 85069: return 1;
bin/mk-log-parser:1713 1.04286 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1718 1.03842 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1071 1.00391 85069: $query =~ s/(["']).*?\1/?/g;                 # quoted strings
bin/mk-log-parser:1715 0.99107 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1425 0.98900 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1498 0.86081 85069: my $event = { @properties };
bin/mk-log-parser:1738 0.85032 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1445 0.76702 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:1725 0.74996 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:2040 0.74456 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1733 0.73468 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1679 0.71289 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1750 0.70709 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1723 0.66330 255159: $e_ds->{last} = $metric_val;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1448 32.93695 341886: if ( $line =~ m/^#|^use \S|^set \S/i ) {
bin/mk-log-parser:1074 26.52813 85069: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1096 7.22600 85069: $query =~ s/(?<=\w_)\d+(_\d+)?\b/$1 ? "N_N" : "N"/eg;
bin/mk-log-parser:1450 4.19012 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/ ) {
bin/mk-log-parser:1089 3.17277 85069: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1712 1.56309 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1702 1.39638 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1484 1.33970 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1428 1.23618 85069: $stmt =~ s{
bin/mk-log-parser:1719 1.21619 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1500 1.21272 85069: return 1;
bin/mk-log-parser:1766 1.20183 424602: return;
bin/mk-log-parser:1703 1.10311 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1721 1.08642 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1446 1.07906 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1705 1.06927 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1718 1.06013 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1713 1.02779 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1071 1.00837 85069: $query =~ s/(["']).*?\1/?/g;                 # quoted strings
bin/mk-log-parser:1425 0.98969 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1715 0.98268 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1498 0.92055 85069: my $event = { @properties };
bin/mk-log-parser:1738 0.84999 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:2040 0.77398 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1445 0.75072 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:1725 0.73317 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1733 0.71037 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1679 0.70825 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1750 0.70209 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1723 0.67261 255159: $e_ds->{last} = $metric_val;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1448 32.78656 341886: if ( substr($line, 0, 1) eq '#' || $line =~ m/^use \S|^set \S/oi ) {
bin/mk-log-parser:1074 26.67409 85069: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1096 7.23230 85069: $query =~ s/(?<=\w_)\d+(_\d+)?\b/$1 ? "N_N" : "N"/eg;
bin/mk-log-parser:1450 4.14376 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1089 3.14530 85069: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1712 1.58719 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1702 1.37100 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1484 1.34057 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1428 1.22566 85069: $stmt =~ s{
bin/mk-log-parser:1766 1.21246 424602: return;
bin/mk-log-parser:1719 1.20632 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1703 1.10443 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1705 1.09634 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1446 1.07933 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1721 1.07536 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1718 1.06171 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1713 1.05846 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1500 1.04136 85069: return 1;
bin/mk-log-parser:1071 1.01339 85069: $query =~ s/(["']).*?\1/?/g;                 # quoted strings
bin/mk-log-parser:1425 0.99688 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1715 0.99226 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1738 0.87047 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1498 0.86123 85069: my $event = { @properties };
bin/mk-log-parser:1725 0.76709 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1445 0.74120 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2040 0.74078 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1733 0.72034 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1679 0.71123 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1750 0.70297 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1723 0.66173 255159: $e_ds->{last} = $metric_val;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1074 27.10286 85069: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1448 25.62639 341886: if ( substr($line, 0, 1) eq '#' || $line =~ m/^use \S|^set \S/oi ) {
bin/mk-log-parser:1096 7.28614 85069: $query =~ s/(?<=\w_)\d+(_\d+)?\b/$1 ? "N_N" : "N"/eg;
bin/mk-log-parser:1450 3.74147 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1089 3.10023 85069: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1712 1.66318 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1702 1.42840 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1484 1.36889 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1719 1.27893 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1428 1.24049 85069: $stmt =~ s{
bin/mk-log-parser:1766 1.23795 424602: return;
bin/mk-log-parser:1703 1.14458 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1721 1.13682 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1718 1.13365 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1446 1.11991 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1705 1.11612 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1713 1.07759 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1500 1.06776 85069: return 1;
bin/mk-log-parser:1715 1.02324 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1425 0.99627 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1071 0.99401 85069: $query =~ s/(["']).*?\1/?/g;                 # quoted strings
bin/mk-log-parser:1738 0.90187 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1498 0.88230 85069: my $event = { @properties };
bin/mk-log-parser:1733 0.81465 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1445 0.79506 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:1725 0.76817 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:2040 0.76117 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1750 0.74114 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1679 0.73685 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1723 0.68139 255159: $e_ds->{last} = $metric_val;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1074 27.31678 85069: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1448 25.53952 341886: if ( substr($line, 0, 1) eq '#' || $line =~ m/^use \S|^set \S/oi ) {
bin/mk-log-parser:1096 7.29866 85069: $query =~ s/(?<=\w_)\d+(_\d+)?\b/$1 ? "N_N" : "N"/eg;
bin/mk-log-parser:1450 3.74712 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1089 3.35563 85069: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1712 1.54889 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1702 1.42235 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1484 1.32713 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1428 1.24349 85069: $stmt =~ s{
bin/mk-log-parser:1719 1.22147 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1766 1.18287 424602: return;
bin/mk-log-parser:1703 1.13687 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1721 1.08044 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1446 1.07942 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1705 1.07639 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1500 1.05745 85069: return 1;
bin/mk-log-parser:1718 1.04627 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1713 1.04315 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1715 1.01092 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1071 1.00788 85069: $query =~ s/(["']).*?\1/?/g;                 # quoted strings
bin/mk-log-parser:1425 1.00306 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1498 0.86867 85069: my $event = { @properties };
bin/mk-log-parser:1738 0.86213 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1725 0.76212 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1445 0.75511 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:1733 0.73966 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:2040 0.73205 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1750 0.71245 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1679 0.70165 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1723 0.66515 255159: $e_ds->{last} = $metric_val;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1074 27.27699 85107: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1448 25.75863 341916: if ( substr($line, 0, 1) eq '#' || $line =~ m/^USE \S|^SET \S/o ) {
bin/mk-log-parser:1096 7.32329 85107: $query =~ s/(?<=\w_)\d+(_\d+)?\b/$1 ? "N_N" : "N"/eg;
bin/mk-log-parser:1450 3.81750 311193: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1089 3.19274 85107: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1712 1.54950 424657: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1702 1.39677 510642: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1484 1.35593 311193: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1500 1.24154 85107: return 1;
bin/mk-log-parser:1428 1.23553 85107: $stmt =~ s{
bin/mk-log-parser:1719 1.22542 424657: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1766 1.20613 424657: return;
bin/mk-log-parser:1718 1.18832 424657: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1446 1.12435 341916: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1703 1.09959 510642: next METRIC if !defined $metric_val;
bin/mk-log-parser:1721 1.08641 424657: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1705 1.08157 424657: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1713 1.02903 424657: my $metric = $handler->{metric};
bin/mk-log-parser:1425 1.01196 85108: my $stmt       = <$fh>;
bin/mk-log-parser:1071 1.00373 85107: $query =~ s/(["']).*?\1/?/g;                 # quoted strings
bin/mk-log-parser:1715 0.98425 424657: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1498 0.89022 85107: my $event = { @properties };
bin/mk-log-parser:1738 0.84904 255192: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1445 0.78949 341916: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2040 0.75219 170215: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1725 0.74028 255192: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1733 0.71707 255192: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1750 0.71606 255192: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1679 0.70556 85107: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1680 0.67914 84630: $fp_ds = $self->{metrics}->{unique}->{ $fp };
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1074 27.76410 85069: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1096 7.55858 85069: $query =~ s/(?<=\w_)\d+(_\d+)?\b/$1 ? "N_N" : "N"/eg;
bin/mk-log-parser:1450 3.76011 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1089 3.23670 85069: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1712 1.64442 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1702 1.39988 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1484 1.39915 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1428 1.27443 85069: $stmt =~ s{
bin/mk-log-parser:1719 1.23556 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1766 1.21303 424602: return;
bin/mk-log-parser:1703 1.11781 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1705 1.10650 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1446 1.10062 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1721 1.09165 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1500 1.09046 85069: return 1;
bin/mk-log-parser:1713 1.07291 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1718 1.07242 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1448 1.06668 341886: if ( $line =~ m/^(?:#|use \S|SET \S)/o ) {
bin/mk-log-parser:1071 1.04089 85069: $query =~ s/(["']).*?\1/?/g;                 # quoted strings
bin/mk-log-parser:1425 1.03529 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1715 1.00285 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1738 0.89667 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1498 0.86781 85069: my $event = { @properties };
bin/mk-log-parser:1445 0.80074 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2040 0.77788 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1725 0.77528 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1679 0.73904 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1733 0.73184 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1750 0.71579 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1680 0.68643 84600: $fp_ds = $self->{metrics}->{unique}->{ $fp };
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1074 27.04981 85069: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1096 7.46485 85069: $query =~ s/(?<=\w_)\d+(_\d+)?\b/$1 ? "N_N" : "N"/eg;
bin/mk-log-parser:1450 3.79612 311211: if ( $line =~ m/^# Time: / && $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1089 3.09482 85069: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1712 1.62334 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1702 1.45491 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1484 1.45345 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1428 1.25484 85069: $stmt =~ s{
bin/mk-log-parser:1719 1.25442 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1500 1.24028 85069: return 1;
bin/mk-log-parser:1766 1.22092 424602: return;
bin/mk-log-parser:1703 1.16684 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1446 1.13534 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1448 1.12364 341886: if ( $line =~ m/^(?:#|use \S|SET \S)/o ) {
bin/mk-log-parser:1705 1.11879 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1718 1.10718 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1721 1.09467 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1713 1.08626 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1715 1.03863 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1425 1.01903 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1071 1.00304 85069: $query =~ s/(["']).*?\1/?/g;                 # quoted strings
bin/mk-log-parser:1498 0.89382 85069: my $event = { @properties };
bin/mk-log-parser:1738 0.89296 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1445 0.77951 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:1725 0.77142 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:2040 0.76836 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1679 0.73023 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1750 0.72581 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1733 0.71848 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1723 0.69642 255159: $e_ds->{last} = $metric_val;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1076 26.72584 85069: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1099 7.00469 85069: $query =~ s/\b(?:\d+_)+(?=\w)/N_/g;
bin/mk-log-parser:1454 3.59436 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1091 3.03685 85069: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1716 1.55498 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1706 1.39323 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1488 1.34669 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1432 1.22654 85069: $stmt =~ s{
bin/mk-log-parser:1723 1.21834 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1770 1.19059 424602: return;
bin/mk-log-parser:1707 1.10616 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1725 1.08303 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1709 1.07412 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1722 1.07293 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1450 1.07134 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1452 1.05212 341886: if ( $line =~ m/^(?:#|use \S|SET \S)/o ) {
bin/mk-log-parser:1717 1.03773 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1504 1.02515 85069: return 1;
bin/mk-log-parser:1719 0.99117 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1429 0.99001 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1073 0.95077 85069: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1742 0.85269 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1502 0.84895 85069: my $event = { @properties };
bin/mk-log-parser:2044 0.74476 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1729 0.74317 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1449 0.73880 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:1683 0.73076 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1737 0.70719 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1754 0.70420 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1686 0.68001 84633: if (    defined $self->{worst_metric}
bin/mk-log-parser:1757 0.67573 255159: $g_ds->{avg} = $avg;
bin/mk-log-parser:1727 0.66963 255159: $e_ds->{last} = $metric_val;
bin/mk-log-parser:1684 0.65418 84633: $fp_ds = $self->{metrics}->{unique}->{ $fp };
bin/mk-log-parser:1740 0.62634 255159: $e_ds->{avg} = $avg;
bin/mk-log-parser:1731 0.62131 255159: $e_ds->{min} = $metric_val if !defined $e_ds->{min};
bin/mk-log-parser:1746 0.62085 255159: $g_ds->{total} += $metric_val;
bin/mk-log-parser:1092 0.61585 85069: $query = lc $query;
bin/mk-log-parser:1732 0.60972 255159: $e_ds->{min} = $metric_val if $metric_val < $e_ds->{min};
bin/mk-log-parser:1738 0.60537 255159: $avg = $handler->{transformer}->($avg)
bin/mk-log-parser:1735 0.60212 255159: $e_ds->{max} = $metric_val if $metric_val > $e_ds->{max};
bin/mk-log-parser:1745 0.60088 255159: if ( $handler->{grand_total} ) {
bin/mk-log-parser:1734 0.59425 255159: $e_ds->{max} = $metric_val if !defined $e_ds->{max};
bin/mk-log-parser:1755 0.59397 255159: $avg = $handler->{transformer}->($avg)
bin/mk-log-parser:1748 0.58868 255159: $g_ds->{min} = $metric_val if !defined $g_ds->{min};
bin/mk-log-parser:1749 0.58779 255159: $g_ds->{min} = $metric_val if $metric_val < $g_ds->{min};
bin/mk-log-parser:1751 0.58584 255159: $g_ds->{max} = $metric_val if !defined $g_ds->{max};
bin/mk-log-parser:1094 0.58123 85069: $query =~ s{
bin/mk-log-parser:1752 0.58002 255159: $g_ds->{max} = $metric_val if $metric_val > $g_ds->{max};
bin/mk-log-parser:1764 0.46731 169443: $g_ds->{ $metric_val }++ if $handler->{grand_total};
bin/mk-log-parser:1442 0.44950 85069: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
bin/mk-log-parser:1443 0.44852 85069: $stmt =~ s/;\n#?\Z//;
bin/mk-log-parser:1088 0.44383 85069: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into N
bin/mk-log-parser:1068 0.44006 85069: my ( $self, $query, $opts ) = @_;
bin/mk-log-parser:1428 0.41707 85070: my @properties = ('cmd', 'Query', 'pos_in_log', tell($fh));
bin/mk-log-parser:1761 0.41105 169443: $e_ds->{ $metric_val }++;
bin/mk-log-parser:1762 0.39829 169443: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1104 0.37547 85069: return $query;
bin/mk-log-parser:1072 0.36837 85069: $query =~ s/'.*?'/?/g;                 # quoted strings
bin/mk-log-parser:1426 0.35066 85070: local $INPUT_RECORD_SEPARATOR = ";\n#";
bin/mk-log-parser:1098 0.33861 85069: $query = reverse $query;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1076 26.91988 85069: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1099 7.13950 85069: $query =~ s/\b(?:\d+_)+(?=\w)/N_/g;
bin/mk-log-parser:1454 3.66845 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1091 3.13088 85069: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1716 1.59965 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1706 1.40203 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1488 1.39389 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1432 1.26317 85069: $stmt =~ s{
bin/mk-log-parser:1723 1.26043 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1770 1.19567 424602: return;
bin/mk-log-parser:1707 1.11620 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1450 1.09853 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1452 1.08257 341886: if ( $line =~ m/^(?:#|use \S|SET \S)/o ) {
bin/mk-log-parser:1709 1.08043 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1722 1.07854 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1725 1.07745 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1717 1.06667 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1504 1.06055 85069: return 1;
bin/mk-log-parser:1429 1.01065 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1719 1.00029 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1073 0.96470 85069: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1742 0.87494 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1502 0.87295 85069: my $event = { @properties };
bin/mk-log-parser:2044 0.76130 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1449 0.76006 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:1729 0.74415 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1737 0.71012 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1683 0.70832 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
bin/mk-log-parser:1754 0.70697 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1686 0.66859 84633: if (    defined $self->{worst_metric}
bin/mk-log-parser:1727 0.66034 255159: $e_ds->{last} = $metric_val;
bin/mk-log-parser:1684 0.65930 84633: $fp_ds = $self->{metrics}->{unique}->{ $fp };
bin/mk-log-parser:1740 0.64271 255159: $e_ds->{avg} = $avg;
bin/mk-log-parser:1757 0.63830 255159: $g_ds->{avg} = $avg;
bin/mk-log-parser:1746 0.62984 255159: $g_ds->{total} += $metric_val;
bin/mk-log-parser:1755 0.62633 255159: $avg = $handler->{transformer}->($avg)
bin/mk-log-parser:1731 0.62632 255159: $e_ds->{min} = $metric_val if !defined $e_ds->{min};
bin/mk-log-parser:1745 0.61960 255159: if ( $handler->{grand_total} ) {
bin/mk-log-parser:1092 0.61738 85069: $query = lc $query;
bin/mk-log-parser:1732 0.60893 255159: $e_ds->{min} = $metric_val if $metric_val < $e_ds->{min};
bin/mk-log-parser:1748 0.60848 255159: $g_ds->{min} = $metric_val if !defined $g_ds->{min};
bin/mk-log-parser:1735 0.60582 255159: $e_ds->{max} = $metric_val if $metric_val > $e_ds->{max};
bin/mk-log-parser:1734 0.59857 255159: $e_ds->{max} = $metric_val if !defined $e_ds->{max};
bin/mk-log-parser:1749 0.59648 255159: $g_ds->{min} = $metric_val if $metric_val < $g_ds->{min};
bin/mk-log-parser:1738 0.59543 255159: $avg = $handler->{transformer}->($avg)
bin/mk-log-parser:1094 0.58798 85069: $query =~ s{
bin/mk-log-parser:1752 0.58684 255159: $g_ds->{max} = $metric_val if $metric_val > $g_ds->{max};
bin/mk-log-parser:1751 0.58547 255159: $g_ds->{max} = $metric_val if !defined $g_ds->{max};
bin/mk-log-parser:1443 0.49544 85069: $stmt =~ s/;\n#?\Z//;
bin/mk-log-parser:1764 0.46569 169443: $g_ds->{ $metric_val }++ if $handler->{grand_total};
bin/mk-log-parser:1442 0.44539 85069: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
bin/mk-log-parser:1088 0.44503 85069: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into N
bin/mk-log-parser:1428 0.43248 85070: my @properties = ('cmd', 'Query', 'pos_in_log', tell($fh));
bin/mk-log-parser:1068 0.42491 85069: my ( $self, $query, $opts ) = @_;
bin/mk-log-parser:1761 0.41892 169443: $e_ds->{ $metric_val }++;
bin/mk-log-parser:1762 0.39572 169443: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1104 0.38259 85069: return $query;
bin/mk-log-parser:1426 0.35909 85070: local $INPUT_RECORD_SEPARATOR = ";\n#";
bin/mk-log-parser:1072 0.34657 85069: $query =~ s/'.*?'/?/g;                 # quoted strings
bin/mk-log-parser:1098 0.34499 85069: $query = reverse $query;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1076 26.01023 85069: $query =~ s{                             # Float/real into N
bin/mk-log-parser:1098 5.12884 85069: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g;# Tables ending with groups of digits
bin/mk-log-parser:1452 3.69384 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1091 3.00159 85069: $query =~ s/\s+/ /g;                      # Collapse all whitespace
bin/mk-log-parser:1714 1.55628 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1486 1.39957 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1704 1.35401 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1721 1.21630 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1430 1.21620 85069: $stmt =~ s{
bin/mk-log-parser:1768 1.19427 424602: return;
bin/mk-log-parser:1502 1.17825 85069: return 1;
bin/mk-log-parser:1448 1.09101 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1707 1.08876 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1705 1.08201 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1723 1.07114 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1720 1.03820 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1450 1.02749 341886: if ( $line =~ m/^(?:#|use \S|SET \S)/o ) {
bin/mk-log-parser:1715 1.01155 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1717 0.98947 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1427 0.96195 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1073 0.93862 85069: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1740 0.84599 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1500 0.84403 85069: my $event = { @properties };
bin/mk-log-parser:1727 0.75099 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1447 0.73180 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2042 0.72362 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1735 0.69363 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1752 0.68317 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1684 0.65815 84641: if (    defined $self->{worst_metric}
bin/mk-log-parser:1725 0.64237 255159: $e_ds->{last} = $metric_val;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1076 26.31184 85069: $query =~ s{                     # Float/real into N
bin/mk-log-parser:1098 5.32637 85069: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1075 4.90997 85069: $query =~ s/(?<![\w.+-])\d+(?![\.\w])/?/g; # Integers
bin/mk-log-parser:1452 3.73428 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1091 2.96977 85069: $query =~ s/\s+/ /g;                         # Collapse all whitespace
bin/mk-log-parser:1714 1.60680 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1486 1.42804 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1704 1.40291 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1721 1.24881 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1430 1.22024 85069: $stmt =~ s{
bin/mk-log-parser:1768 1.20071 424602: return;
bin/mk-log-parser:1502 1.18611 85069: return 1;
bin/mk-log-parser:1705 1.11045 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1448 1.10126 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1723 1.09633 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1707 1.08735 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1720 1.07674 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1450 1.06368 341886: if ( $line =~ m/^(?:#|use \S|SET \S)/o ) {
bin/mk-log-parser:1715 1.06101 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1717 1.00314 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1427 0.97099 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1073 0.95462 85069: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1500 0.88172 85069: my $event = { @properties };
bin/mk-log-parser:1740 0.85693 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1447 0.75866 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:1727 0.74336 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:2042 0.72633 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1735 0.71444 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1752 0.71025 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1747 0.67538 255159: $g_ds->{min} = $metric_val if $metric_val < $g_ds->{min};
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 26.43920 85069: $query =~ s{                     # Float/real into N
bin/mk-log-parser:1097 5.37676 85069: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1451 3.70863 311211: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1090 3.09264 85069: $query =~ s/\s+/ /g;                         # Collapse all whitespace
bin/mk-log-parser:1713 1.54052 424602: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1485 1.39843 311211: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1703 1.36593 510414: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1429 1.25912 85069: $stmt =~ s{
bin/mk-log-parser:1720 1.21018 424602: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1767 1.18206 424602: return;
bin/mk-log-parser:1501 1.15437 85069: return 1;
bin/mk-log-parser:1704 1.09751 510414: next METRIC if !defined $metric_val;
bin/mk-log-parser:1706 1.08299 424602: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1722 1.06219 424602: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1447 1.05954 341886: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1449 1.03669 341886: if ( $line =~ m/^(?:#|use \S|SET \S)/o ) {
bin/mk-log-parser:1719 1.03268 424602: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1714 1.00399 424602: my $metric = $handler->{metric};
bin/mk-log-parser:1073 0.99455 85069: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1716 0.97239 424602: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1426 0.96631 85070: my $stmt       = <$fh>;
bin/mk-log-parser:1499 0.84515 85069: my $event = { @properties };
bin/mk-log-parser:1739 0.83943 255159: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1446 0.73371 341886: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2041 0.73270 170139: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1726 0.71509 255159: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1751 0.70499 255159: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1734 0.69491 255159: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1683 0.65776 84641: if (    defined $self->{worst_metric}
bin/mk-log-parser:1680 0.64965 85069: if ( exists $self->{metrics}->{unique}->{ $fp } ) {
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 26.26014 93719: $query =~ s{                     # Float/real into N
bin/mk-log-parser:1097 5.32234 93719: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1451 3.96532 330157: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1090 3.11622 93719: $query =~ s/\s+/ /g;                         # Collapse all whitespace
bin/mk-log-parser:1707 1.73209 467865: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1697 1.55370 562314: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1479 1.47677 330157: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1714 1.35865 467865: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1429 1.35256 93719: $stmt =~ s{
bin/mk-log-parser:1761 1.34686 467865: return;
bin/mk-log-parser:1495 1.28737 93719: return 1;
bin/mk-log-parser:1698 1.22309 562314: next METRIC if !defined $metric_val;
bin/mk-log-parser:1716 1.20812 467865: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1447 1.19269 376998: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1700 1.19042 467865: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1713 1.17558 467865: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1708 1.15325 467865: my $metric = $handler->{metric};
bin/mk-log-parser:1449 1.12769 376998: if ( $line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o ) {
bin/mk-log-parser:1710 1.10086 467865: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1426 1.02240 93720: my $stmt       = <$fh>;
bin/mk-log-parser:1493 0.99995 93719: my $event = { @properties };
bin/mk-log-parser:1073 0.94296 93719: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1733 0.93286 281157: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1446 0.85068 376998: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2035 0.81124 187439: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1720 0.80901 281157: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1728 0.80358 281157: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1745 0.78344 281157: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1718 0.76078 281157: $e_ds->{last} = $metric_val;
bin/mk-log-parser:1748 0.71578 281157: $g_ds->{avg} = $avg;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 26.30542 93719: $query =~ s{                     # Float/real into N
bin/mk-log-parser:1097 5.17319 93719: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1451 3.99733 330157: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1707 1.69290 467865: my ( $self, $metric_val, $handler, $fp_ds ) = @_;
bin/mk-log-parser:1697 1.48557 562314: my $metric_val = $event->{ $handler->{metric} };
bin/mk-log-parser:1479 1.48455 330157: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1714 1.31067 467865: my $g_ds = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1761 1.30134 467865: return;
bin/mk-log-parser:1495 1.29749 93719: return 1;
bin/mk-log-parser:1429 1.25836 93719: $stmt =~ s{
bin/mk-log-parser:1447 1.18663 376998: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1698 1.18538 562314: next METRIC if !defined $metric_val;
bin/mk-log-parser:1716 1.17620 467865: if ( $handler->{type} == METRIC_TYPE_NUMERIC ) {
bin/mk-log-parser:1700 1.17072 467865: $self->_calc_metric($metric_val, $handler, $fp_ds);
bin/mk-log-parser:1713 1.12811 467865: my $e_ds = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1449 1.12486 376998: if ( $line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o ) {
bin/mk-log-parser:1708 1.09913 467865: my $metric = $handler->{metric};
bin/mk-log-parser:1710 1.07081 467865: $metric_val = $handler->{transformer}->($metric_val)
bin/mk-log-parser:1426 0.99189 93720: my $stmt       = <$fh>;
bin/mk-log-parser:1073 0.93150 93719: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1493 0.91165 93719: my $event = { @properties };
bin/mk-log-parser:1733 0.90895 281157: push @{ $e_ds->{all_vals} }, $metric_val
bin/mk-log-parser:1446 0.82369 376998: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2035 0.81274 187439: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1720 0.79137 281157: $e_ds->{total} += $metric_val;
bin/mk-log-parser:1728 0.76428 281157: my $avg = $e_ds->{total} / $fp_ds->{count};
bin/mk-log-parser:1090 0.75254 93719: $query =~ tr[ \n\t\r\f][ ]s;                          # Collapse whitespace
bin/mk-log-parser:1745 0.75208 281157: my $avg = $g_ds->{total} / $self->{n_queries};
bin/mk-log-parser:1718 0.71261 281157: $e_ds->{last} = $metric_val;
bin/mk-log-parser:1748 0.69750 281157: $g_ds->{avg} = $avg;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 26.51995 93719: $query =~ s{                          # Float/real into ?
bin/mk-log-parser:1097 5.25286 93719: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1451 3.93263 330157: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1479 1.48202 330157: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1495 1.28419 93719: return 1;
bin/mk-log-parser:1429 1.26815 93719: $stmt =~ s{
bin/mk-log-parser:1447 1.19710 376998: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1449 1.13985 376998: if ( $line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o ) {
bin/mk-log-parser:1742 1.09733 468595: my $metric_val = $event->{ $metric };
bin/mk-log-parser:1744 1.02243 374876: my $stats_for_metric = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1426 0.98313 93720: my $stmt       = <$fh>;
bin/mk-log-parser:1743 0.97882 468595: next METRIC unless defined $metric_val;
bin/mk-log-parser:1750 0.97159 374876: if ( ref $sub ) {
bin/mk-log-parser:1746 0.93533 374876: my $sub = $self->{handlers}->{$metric} ||= make_handler(
bin/mk-log-parser:1493 0.92753 93719: my $event = { @properties };
bin/mk-log-parser:1073 0.92175 93719: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1745 0.89846 374876: my $stats_for_class  = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1446 0.80114 376998: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2038 0.79272 187439: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1090 0.75006 93719: $query =~ tr[ \n\t\r\f][ ]s;                 # Collapse whitespace
bin/mk-log-parser:1738 0.66128 93719: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
bin/mk-log-parser:1091 0.61403 93719: $query = lc $query;
bin/mk-log-parser:1093 0.60149 93719: $query =~ s{
bin/mk-log-parser:1440 0.47893 93719: $stmt =~ s/;\n#?\Z//;
bin/mk-log-parser:1439 0.46935 93719: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
bin/mk-log-parser:1425 0.45817 93720: my @properties = ('cmd', 'Query', 'pos_in_log', tell($fh));
bin/mk-log-parser:1087 0.45460 93719: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into ?
bin/mk-log-parser:1068 0.43475 93719: my ( $self, $query, $opts ) = @_;
bin/mk-log-parser:1101 0.40264 93719: return $query;
bin/mk-log-parser:1423 0.38166 93720: local $INPUT_RECORD_SEPARATOR = ";\n#";
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 27.36159 93719: $query =~ s{                          # Float/real into ?
bin/mk-log-parser:1097 5.37904 93719: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1451 4.12361 330157: if ( my ( $time ) = $line =~ m/$slow_log_ts_line/o ) {
bin/mk-log-parser:1479 1.53864 330157: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1495 1.31150 93719: return 1;
bin/mk-log-parser:1429 1.31119 93719: $stmt =~ s{
bin/mk-log-parser:1426 1.22865 93720: my $stmt       = <$fh>;
bin/mk-log-parser:1447 1.18406 376998: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1449 1.15739 376998: if ( $line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o ) {
bin/mk-log-parser:1742 1.12909 468595: my $metric_val = $event->{ $metric };
bin/mk-log-parser:1744 1.05548 374876: my $stats_for_metric = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1743 1.02599 468595: next METRIC unless defined $metric_val;
bin/mk-log-parser:1750 1.02409 374876: if ( ref $sub ) {
bin/mk-log-parser:1746 0.98465 374876: my $sub = $self->{handlers}->{$metric} ||= make_handler(
bin/mk-log-parser:1073 0.96382 93719: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1493 0.95156 93719: my $event = { @properties };
bin/mk-log-parser:1745 0.94251 374876: my $stats_for_class  = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1446 0.82171 376998: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2038 0.81608 187439: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1090 0.76253 93719: $query =~ tr[ \n\t\r\f][ ]s;                 # Collapse whitespace
bin/mk-log-parser:1738 0.67134 93719: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
bin/mk-log-parser:1091 0.62511 93719: $query = lc $query;
bin/mk-log-parser:1093 0.61978 93719: $query =~ s{
bin/mk-log-parser:1439 0.49714 93719: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
bin/mk-log-parser:1440 0.49379 93719: $stmt =~ s/;\n#?\Z//;
bin/mk-log-parser:1087 0.46908 93719: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into ?
bin/mk-log-parser:1425 0.46476 93720: my @properties = ('cmd', 'Query', 'pos_in_log', tell($fh));
bin/mk-log-parser:1068 0.44444 93719: my ( $self, $query, $opts ) = @_;
bin/mk-log-parser:1101 0.40992 93719: return $query;
bin/mk-log-parser:1423 0.40053 93720: local $INPUT_RECORD_SEPARATOR = ";\n#";
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 26.02534 93719: $query =~ s{                          # Float/real into ?
bin/mk-log-parser:1097 5.21154 93719: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1452 3.95531 330157: if ( !$got_ts
bin/mk-log-parser:1498 1.46340 330157: if ( !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1514 1.27463 93719: return 1;
bin/mk-log-parser:1429 1.23816 93719: $stmt =~ s{
bin/mk-log-parser:1448 1.12865 376998: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1450 1.10485 376998: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o) {
bin/mk-log-parser:1761 1.07168 468595: my $metric_val = $event->{ $metric };
bin/mk-log-parser:1763 1.01364 374876: my $stats_for_metric = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1762 0.98805 468595: next METRIC unless defined $metric_val;
bin/mk-log-parser:1426 0.98759 93720: my $stmt       = <$fh>;
bin/mk-log-parser:1769 0.97624 374876: if ( ref $sub ) {
bin/mk-log-parser:1073 0.95797 93719: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1765 0.93396 374876: my $sub = $self->{handlers}->{$metric} ||= make_handler(
bin/mk-log-parser:1512 0.89488 93719: my $event = { @properties };
bin/mk-log-parser:1764 0.89230 374876: my $stats_for_class  = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1447 0.78630 376998: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2057 0.77888 187439: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1090 0.73558 93719: $query =~ tr[ \n\t\r\f][ ]s;                 # Collapse whitespace
bin/mk-log-parser:1757 0.64785 93719: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
bin/mk-log-parser:1091 0.60326 93719: $query = lc $query;
bin/mk-log-parser:1093 0.59480 93719: $query =~ s{
bin/mk-log-parser:1440 0.47438 93719: $stmt =~ s/;\n#?\Z//;
bin/mk-log-parser:1439 0.46947 93719: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
bin/mk-log-parser:1425 0.44886 93720: my @properties = ('cmd', 'Query', 'pos_in_log', tell($fh));
bin/mk-log-parser:1087 0.44745 93719: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into ?
bin/mk-log-parser:1068 0.42729 93719: my ( $self, $query, $opts ) = @_;
bin/mk-log-parser:1101 0.38951 93719: return $query;
bin/mk-log-parser:1072 0.38861 93719: $query =~ s/'.*?'/?/g;                # quoted strings
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 26.25065 93719: $query =~ s{                          # Float/real into ?
bin/mk-log-parser:1097 5.05439 93719: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1452 3.39320 330157: if ( !$got_ts
bin/mk-log-parser:1499 1.45220 330157: if ( $got_stuff && !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1515 1.29203 93719: return 1;
bin/mk-log-parser:1429 1.25114 93719: $stmt =~ s{
bin/mk-log-parser:1448 1.15430 376998: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1450 1.15253 376998: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o) {
bin/mk-log-parser:1762 1.09276 468595: my $metric_val = $event->{ $metric };
bin/mk-log-parser:1764 1.02890 374876: my $stats_for_metric = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1763 0.98641 468595: next METRIC unless defined $metric_val;
bin/mk-log-parser:1073 0.97061 93719: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1426 0.96456 93720: my $stmt       = <$fh>;
bin/mk-log-parser:1770 0.95913 374876: if ( ref $sub ) {
bin/mk-log-parser:1766 0.94082 374876: my $sub = $self->{handlers}->{$metric} ||= make_handler(
bin/mk-log-parser:1765 0.89858 374876: my $stats_for_class  = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1513 0.88507 93719: my $event = { @properties };
bin/mk-log-parser:1447 0.82696 376998: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2058 0.76913 187439: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1090 0.74100 93719: $query =~ tr[ \n\t\r\f][ ]s;                 # Collapse whitespace
bin/mk-log-parser:1481 0.69892 187438: push @properties, @temp;
bin/mk-log-parser:1482 0.67791 187438: $got_stuff++;
bin/mk-log-parser:1758 0.64846 93719: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
bin/mk-log-parser:1091 0.64838 93719: $query = lc $query;
bin/mk-log-parser:1093 0.64181 93719: $query =~ s{
bin/mk-log-parser:1087 0.47974 93719: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into ?
bin/mk-log-parser:1440 0.47555 93719: $stmt =~ s/;\n#?\Z//;
bin/mk-log-parser:1439 0.46542 93719: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
bin/mk-log-parser:1425 0.45198 93720: my @properties = ('cmd', 'Query', 'pos_in_log', tell($fh));
bin/mk-log-parser:1068 0.42088 93719: my ( $self, $query, $opts ) = @_;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 26.03509 93719: $query =~ s{                          # Float/real into ?
bin/mk-log-parser:1097 5.34979 93719: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1452 3.46176 330157: if ( !$got_ts
bin/mk-log-parser:1499 1.46873 330157: if ( $got_stuff && !$found_arg && $pos == length($stmt) ) {
bin/mk-log-parser:1515 1.30416 93719: return 1;
bin/mk-log-parser:1429 1.26029 93719: $stmt =~ s{
bin/mk-log-parser:1448 1.17655 376998: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1450 1.14063 376998: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o) {
bin/mk-log-parser:1762 1.09483 468595: my $metric_val = $event->{ $metric };
bin/mk-log-parser:1764 1.05442 374876: my $stats_for_metric = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1426 0.98870 93720: my $stmt       = <$fh>;
bin/mk-log-parser:1763 0.97042 468595: next METRIC unless defined $metric_val;
bin/mk-log-parser:1770 0.96976 374876: if ( ref $sub ) {
bin/mk-log-parser:1073 0.96752 93719: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1513 0.95157 93719: my $event = { @properties };
bin/mk-log-parser:1766 0.94030 374876: my $sub = $self->{handlers}->{$metric} ||= make_handler(
bin/mk-log-parser:1765 0.88956 374876: my $stats_for_class  = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1447 0.79534 376998: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2058 0.79153 187439: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1090 0.75745 93719: $query =~ tr[ \n\t\r\f][ ]s;                 # Collapse whitespace
bin/mk-log-parser:1481 0.70420 187438: push @properties, @temp;
bin/mk-log-parser:1482 0.67092 187438: ++$got_stuff;
bin/mk-log-parser:1758 0.65544 93719: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
bin/mk-log-parser:1091 0.60778 93719: $query = lc $query;
bin/mk-log-parser:1093 0.60008 93719: $query =~ s{
bin/mk-log-parser:1440 0.47646 93719: $stmt =~ s/;\n#?\Z//;
bin/mk-log-parser:1439 0.47419 93719: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
bin/mk-log-parser:1425 0.45613 93720: my @properties = ('cmd', 'Query', 'pos_in_log', tell($fh));
bin/mk-log-parser:1087 0.45091 93719: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into ?
bin/mk-log-parser:1068 0.42968 93719: my ( $self, $query, $opts ) = @_;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 26.63524 93719: $query =~ s{                          # Float/real into ?
bin/mk-log-parser:1097 5.26414 93719: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1453 3.95441 330157: if ( !$got_ts
bin/mk-log-parser:1499 1.43409 330157: if ( !$found_arg && $pos == $len ) {
bin/mk-log-parser:1515 1.33388 93719: return 1;
bin/mk-log-parser:1429 1.29277 93719: $stmt =~ s{
bin/mk-log-parser:1449 1.14515 376998: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1762 1.13053 468595: my $metric_val = $event->{ $metric };
bin/mk-log-parser:1451 1.12364 376998: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o) {
bin/mk-log-parser:1764 1.07176 374876: my $stats_for_metric = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1426 1.01431 93720: my $stmt       = <$fh>;
bin/mk-log-parser:1763 0.99501 468595: next METRIC unless defined $metric_val;
bin/mk-log-parser:1770 0.98579 374876: if ( ref $sub ) {
bin/mk-log-parser:1766 0.95704 374876: my $sub = $self->{handlers}->{$metric} ||= make_handler(
bin/mk-log-parser:1513 0.94358 93719: my $event = { @properties };
bin/mk-log-parser:1073 0.93223 93719: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1765 0.92045 374876: my $stats_for_class  = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1448 0.81655 376998: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2058 0.80283 187439: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1090 0.75618 93719: $query =~ tr[ \n\t\r\f][ ]s;                 # Collapse whitespace
bin/mk-log-parser:1758 0.66460 93719: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
bin/mk-log-parser:1093 0.60988 93719: $query =~ s{
bin/mk-log-parser:1091 0.60976 93719: $query = lc $query;
bin/mk-log-parser:1440 0.50175 93719: $stmt =~ s/;\n#?\Z//;
bin/mk-log-parser:1439 0.47247 93719: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
bin/mk-log-parser:1425 0.47023 93720: my @properties = ('cmd', 'Query', 'pos_in_log', tell($fh));
bin/mk-log-parser:1087 0.46112 93719: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into ?
bin/mk-log-parser:1068 0.44971 93719: my ( $self, $query, $opts ) = @_;
bin/mk-log-parser:1101 0.40249 93719: return $query;
bin/mk-log-parser:1713 0.38817 93719: [at line 12 inside eval] ++$global->{cnt};
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 26.49314 93719: $query =~ s{                          # Float/real into ?
bin/mk-log-parser:1097 5.22306 93719: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1453 3.88092 330157: if ( !$got_ts
bin/mk-log-parser:1499 1.40611 330157: if ( !$found_arg && $pos == $len ) {
bin/mk-log-parser:1515 1.30327 93719: return 1;
bin/mk-log-parser:1429 1.26159 93719: $stmt =~ s{
bin/mk-log-parser:1449 1.14071 376998: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1451 1.11214 376998: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o) {
bin/mk-log-parser:1762 1.10038 468595: my $metric_val = $event->{ $metric };
bin/mk-log-parser:1764 1.04248 374876: my $stats_for_metric = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1426 0.99662 93720: my $stmt       = <$fh>;
bin/mk-log-parser:1770 0.98532 374876: if ( ref $sub ) {
bin/mk-log-parser:1763 0.98449 468595: next METRIC unless defined $metric_val;
bin/mk-log-parser:1766 0.95153 374876: my $sub = $self->{handlers}->{$metric} ||= make_handler(
bin/mk-log-parser:1513 0.93386 93719: my $event = { @properties };
bin/mk-log-parser:1073 0.93033 93719: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1765 0.90773 374876: my $stats_for_class  = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1448 0.84109 376998: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2058 0.79086 187439: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1090 0.74827 93719: $query =~ tr[ \n\t\r\f][ ]s;                 # Collapse whitespace
bin/mk-log-parser:1758 0.65935 93719: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
bin/mk-log-parser:1091 0.60763 93719: $query = lc $query;
bin/mk-log-parser:1093 0.60007 93719: $query =~ s{
bin/mk-log-parser:1439 0.47812 93719: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
bin/mk-log-parser:1440 0.47683 93719: $stmt =~ s/;\n#?\Z//;
bin/mk-log-parser:1425 0.45730 93720: my @properties = ('cmd', 'Query', 'pos_in_log', tell($fh));
bin/mk-log-parser:1087 0.45575 93719: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into ?
bin/mk-log-parser:1068 0.43645 93719: my ( $self, $query, $opts ) = @_;
bin/mk-log-parser:1423 0.41444 93720: local $INPUT_RECORD_SEPARATOR = ";\n#";
bin/mk-log-parser:1101 0.40132 93719: return $query;
# fprofpp output format is:
# filename:line time count: source
bin/mk-log-parser:1075 25.84869 93719: $query =~ s{                          # Float/real into ?
bin/mk-log-parser:1097 4.99637 93719: $query =~ s/(?<=[a-z_])\d[_0-9]*\b/N/g; # Tables ending with groups of digits
bin/mk-log-parser:1453 3.84840 330157: if ( !$got_ts
bin/mk-log-parser:1499 1.36203 330157: if ( !$found_arg && $pos == $len ) {
bin/mk-log-parser:1429 1.24292 93719: $stmt =~ s{
bin/mk-log-parser:1449 1.13370 376998: my $line = $1;          # Necessary for /g and pos() to work.
bin/mk-log-parser:1451 1.10678 376998: if ($line =~ m/^(?:#|use |SET (?:last_insert_id|insert_id|timestamp))/o) {
bin/mk-log-parser:1515 1.09479 93719: return 1;
bin/mk-log-parser:1762 1.07663 468595: my $metric_val = $event->{ $metric };
bin/mk-log-parser:1764 1.04211 374876: my $stats_for_metric = $self->{metrics}->{all}->{ $metric } ||= {};
bin/mk-log-parser:1426 0.98624 93720: my $stmt       = <$fh>;
bin/mk-log-parser:1770 0.96233 374876: if ( ref $sub ) {
bin/mk-log-parser:1763 0.95811 468595: next METRIC unless defined $metric_val;
bin/mk-log-parser:1766 0.91882 374876: my $sub = $self->{handlers}->{$metric} ||= make_handler(
bin/mk-log-parser:1073 0.91346 93719: $query =~ s/[\r\n]+\s*(?:--|#).*//gm; # One-line comments
bin/mk-log-parser:1765 0.88392 374876: my $stats_for_class  = $fp_ds->{ $metric } ||= {};
bin/mk-log-parser:1513 0.87830 93719: my $event = { @properties };
bin/mk-log-parser:1448 0.80883 376998: $pos     = pos($stmt);  # Be careful not to mess this up!
bin/mk-log-parser:2058 0.77108 187439: $lp->parse_slowlog_event($fh, sub { $sm->calc_event_metrics(@_) });
bin/mk-log-parser:1090 0.76713 93719: $query =~ tr[ \n\t\r\f][ ]s;                 # Collapse whitespace
bin/mk-log-parser:1758 0.64869 93719: my $fp_ds = $self->{metrics}->{unique}->{ $fp } ||= {};
bin/mk-log-parser:1091 0.59950 93719: $query = lc $query;
bin/mk-log-parser:1093 0.58641 93719: $query =~ s{
bin/mk-log-parser:1068 0.47058 93719: my ( $self, $query, $opts ) = @_;
bin/mk-log-parser:1440 0.45974 93719: $stmt =~ s/;\n#?\Z//;
bin/mk-log-parser:1439 0.45415 93719: $stmt = '#' . $stmt unless $stmt =~ m/\A#/;
bin/mk-log-parser:1087 0.44643 93719: $query =~ s/\b0(?:x[0-9a-f]+|b[01]+)\b/?/g;  # Hex/bin into ?
bin/mk-log-parser:1425 0.43528 93720: my @properties = ('cmd', 'Query', 'pos_in_log', tell($fh));
bin/mk-log-parser:1101 0.40170 93719: return $query;
bin/mk-log-parser:1072 0.38078 93719: $query =~ s/'.*?'/?/g;                # quoted strings

#!/usr/bin/env python

# This script gets all open issues for the Maatkit project hosted
# on Google Code and print thems sorted by values assigned to labels.

import sys
import optparse
import datetime
import gdata.projecthosting.client
import gdata.projecthosting.data
import gdata.gauth
import gdata.client
import gdata.data
import atom.http_core
import atom.core

today     = datetime.datetime.utcnow()
reports   = [
    "prio",
    "new"
]
rank_incr = {  # rank increases
    'severity' : {
        'critical'  : 3,
        'serious'   : 2,
        'minor'     : 1,
        ''          : 0, # for Type-Enhancement
    },
    'effort' : {
        'extensive' : -3,
        'moderate'  : -2,
        'easy'      : -1,
    },
    'benefit' : {
        'lifechanging' : 3,
        'helpful'      : 2,
        'minimal'      : 1,
    },
    'labels' : {
        'sponsored'        : 100, # always on top
        'patchcontributed' : 1,
        'solutionproposed' : 1,
    },
}

# Get, parse and rank up to max_results open issues.
# Returns a list of dicts, one for each issue, not sorted.
def get_open_issues(max_results=500):
    open_issues = []

    # Connect to Google Code project anonymously and get open issues.
    client     = gdata.projecthosting.client.ProjectHostingClient()
    query      = gdata.projecthosting.client.Query(canned_query='open',
                                                   max_results=max_results)
    issue_list = client.get_issues('maatkit', query=query)
    print "%d open issues as of %s\n" % (len(issue_list.entry), today)

    for issue_info in issue_list.entry:

        # id.text is like
        #   http://code.google.com/feeds/issues/p/maatkit/issues/full/123"
        # so right-split the id number off the end
        id = issue_info.id.text.rsplit('/', 1)[1]

        # amount of time issue has been open
        open_t = today - str_to_datetime(issue_info.published.text)

        issue = {
            'id'        : id,
            'summary'   : issue_info.title.text,
            'status'    : issue_info.status.text,
            'open_date' : issue_info.published.text.split('T')[0],
            'open_days' : open_t.days,
        }
        label_info = parse_labels(issue_info.label)
        issue.update(label_info)
        rank_issue(issue)

        try:
            check_issue(issue)
        except Exception as E:
            print E
            sys.exit(-1)

        open_issues.append(issue)

    return open_issues     

# Convert and return a GC timestamp like "2010-03-23T21:19:03.000Z"
# as a datetime obj.
def str_to_datetime(str):
    return datetime.datetime.strptime(str, "%Y-%m-%dT%H:%M:%S.%fZ")

# Parse labels like Type-, Sponsored, etc.  Two word labels like
# Type-Defect are saved as key-value.  One word labels are saved
# as key and value (e.g. sponsored: sponsored).  Returns a dict
# of labels.
def parse_labels(labels):
    label_info = {}
    tags       = []
    modules    = []
    for label in labels:
        score = 0
        vals  = label.text.split('-')
        val   = vals[0].lower()
        if val == "tag":
            tags.append( vals[1] )
        elif val == "module":
            modules.append( vals[1] )
        else:
            if len(vals) == 2:
                label_info[val] = vals[1].lower()
            else:
                label_info[val] = val

    label_info['tags'] = tags

    # Only Type-Defect (should) have a Severity label, but define
    # this in all cases so we don't have to check for it.
    if 'severity' not in label_info:
        label_info['severity'] = ''

    return label_info

# Rank issues by number of days open and the labels defined in rank_incr.
def rank_issue(issue):
    rank = 0
    if issue['open_days'] < 1:
       rank = 0
    elif issue['open_days'] < 8:
       rank = 1
    elif issue['open_days'] < 31:
       rank = 2
    elif issue['open_days'] < 366:
       rank = 3
    else:
       rank = 4
    for (key, val) in issue.iteritems():
        if key in rank_incr:
            rank += rank_incr[key][val]
        elif key in rank_incr['labels']:
            rank += rank_incr['labels'][val]
    issue['rank'] = rank
    return issue

# Check that issue has required/proper labels.
def check_issue(issue):
    required_labels = ['type', 'effort', 'benefit']
    for label in required_labels:
        if label not in issue:
            raise Exception("Issue " + issue["id"] + " has no "
                    + label.title() + " label")

    if issue['type'] == 'defect' and issue['severity'] == '':
        raise Exception("Issue " + issue["id"] + " is Type-Defect but has no "
                + "Severity label")

    return

def print_prio_report():
    # Get, parse and rank all open issues.
    open_issues = get_open_issues()

    # Sort by rank, descending.
    open_issues = sorted(
        open_issues,
        lambda x, y: cmp(x['rank'], y['rank']),
        reverse=True
    )

    # Print by rank, descending.
    for issue in open_issues:
        print "Issue %s, rank %s: %s"   % (issue['id'], issue['rank'], issue['summary'])
        print "\topen %d days, opened on %s" \
            % (issue['open_days'], issue['open_date'])
        print "\ttype: %s, severity: %s, effort: %s, benefit: %s" \
            % (issue['type'], issue['severity'], issue['effort'],
               issue['benefit'])
        if 'sponsored' in issue:
            print "\tSponsored"
        print

    return

def main():
    option_parser = optparse.OptionParser(usage="issue-report")
    (o, args) = option_parser.parse_args()

    try:
        report = args[0]
    except:
        report = "prio"  # default

    if report not in reports:
        option_parser.error("Invalid REPORT: " + report) 

    if report == "prio":
        print_prio_report()

    return 0

if __name__ == '__main__':
    sys.exit(main())

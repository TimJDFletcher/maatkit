#!/bin/sh

set -e

trunk=$MAATKIT_TRUNK
if [ -z "$trunk" ]; then
   echo "MAATKIT_TRUNK environment variable is not set."
   exit 1
fi

# The first argument is the package to update.  The optional second argument
# is the package within that module (you can only specify one; if you omit it,
# all are updated).

if [ -z $1 ]; then
   echo "Specify a package to update."
   echo "Usage: $0 PACKAGE [MODULE]"
   echo "If no MODULE is specified, then all out-of-date modules in PACKAGE are updated."
   exit 1
else
   PACK=$1
fi

if [ -n "$2" ]; then
   MODULE=$2;
else
   MODULE="";
fi

set -u

if [ ! -d $trunk/$PACK ]; then
   echo "$PACK doesn't exist."
   exit 1
fi

for FILE in `ls $trunk/$PACK/mk-*`
do
   for MOD in `grep 'End .* package' $FILE | awk '{print $3}'`
   do
      if [ -z "$MODULE" -o "$MOD" = "$MODULE" ]; then
         if [ -f "$trunk/common/$MOD.pm" ]; then
            if grep -q '^# [A-Z].* package.*Revision' $FILE; then
               echo "\nERROR: $FILE has a malformed module header:"
               grep '^# [A-Z].* package.*Revision' $FILE
               echo
               exit 1
            fi

            cat $FILE | $trunk/maatkit/insert_module $MOD > $MOD.tmp
            if diff -q $FILE $MOD.tmp | grep differ > /dev/null ; then
               echo "Updating $MOD in $FILE";
               cat $MOD.tmp > $FILE;
            fi
         else
            echo "\nWARNING: $FILE uses nonexistent module $MOD\n"
         fi
         rm -f $MOD.tmp;
      fi
   done
done

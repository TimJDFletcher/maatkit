A script to copy files in parallel with netcat.

#!/bin/bash

set -e
set -u

# #######################################################################
# Arguments
# #######################################################################
SRC=$1
DST=$2
SDIR=$3
DDIR=$4
EXCL=$5

running=0
port=12345

function copyfile () {
   file=$1;
   port=$2;
   echo "$file, $port";
   #(sleep 10; touch forked)&
   #while [ ! -e forked ]; do
      #echo "sleeping";
      #sleep 1;
   #done
   #rm forked
}

for file in `ssh $SRC "du $SDIR/*" | grep -v "'$EXCL'" | sort -nr | awk '{print $2}'`; do
   let port=port+1;
   copyfile $file $port;
done

Show the difference between query plans.  Some type of explain diff.  EXPLAIN
EXTENDED can help catch things like differing charsets, too.

timestamp column names: (updat|insert|delet|creat)ed

About EXPLAIN fingerprinting:

  * it can be pretty easy to just mush most things into key=value pairs and
    string it together into a single string of text.  rows= needs to be
    converted to something like a logarithmic value so only a significant change
    shows up.  (Values 0, 1 are special, and changes among small numbers of rows
    like from 2 to 4 does not need to be noticed either.)
  * mk-log-parser can then add the following to its query review functionality:
    * each time we do a review, store (in a separate table) the fingerprint of
      the EXPLAIN for a query
    * EXPLAIN several different queries with the same fingerprint.  By default
      EXPLAIN the first 5 or so, but after that explain only some fraction of
      them.  Notice whether there are some queries that have a different plan
      and record that, too.
    * Run some queries automatically to show queries whose plan has changed or
      was unstable (e.g. has different plans depending on the parameters)
    * Basically create classes of per-query, per-explain-plan and for each
      class, store a sample query.
